// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.1
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace ExpressionFramework.Parser.OperatorResultParsers
{
    [FunctionName(@"EndsWithOperator")]
    public class EndsWithOperatorParser : OperatorParserBase
    {
        protected override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Operator> DoParse(CrossCutting.Utilities.Parsers.FunctionCallContext context)
        {
            #pragma warning disable CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
            return Result.Success<ExpressionFramework.Domain.Operator>(new ExpressionFramework.Domain.Operators.EndsWithOperator(
                ));
            #pragma warning restore CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
        }
    }
    [FunctionName(@"EnumerableContainsOperator")]
    public class EnumerableContainsOperatorParser : OperatorParserBase
    {
        protected override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Operator> DoParse(CrossCutting.Utilities.Parsers.FunctionCallContext context)
        {
            #pragma warning disable CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
            return Result.Success<ExpressionFramework.Domain.Operator>(new ExpressionFramework.Domain.Operators.EnumerableContainsOperator(
                ));
            #pragma warning restore CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
        }
    }
    [FunctionName(@"EnumerableNotContainsOperator")]
    public class EnumerableNotContainsOperatorParser : OperatorParserBase
    {
        protected override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Operator> DoParse(CrossCutting.Utilities.Parsers.FunctionCallContext context)
        {
            #pragma warning disable CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
            return Result.Success<ExpressionFramework.Domain.Operator>(new ExpressionFramework.Domain.Operators.EnumerableNotContainsOperator(
                ));
            #pragma warning restore CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
        }
    }
    [FunctionName(@"EqualsOperator")]
    public class EqualsOperatorParser : OperatorParserBase
    {
        protected override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Operator> DoParse(CrossCutting.Utilities.Parsers.FunctionCallContext context)
        {
            #pragma warning disable CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
            return Result.Success<ExpressionFramework.Domain.Operator>(new ExpressionFramework.Domain.Operators.EqualsOperator(
                ));
            #pragma warning restore CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
        }
    }
    [FunctionName(@"IsGreaterOperator")]
    public class IsGreaterOperatorParser : OperatorParserBase
    {
        protected override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Operator> DoParse(CrossCutting.Utilities.Parsers.FunctionCallContext context)
        {
            #pragma warning disable CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
            return Result.Success<ExpressionFramework.Domain.Operator>(new ExpressionFramework.Domain.Operators.IsGreaterOperator(
                ));
            #pragma warning restore CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
        }
    }
    [FunctionName(@"IsGreaterOrEqualOperator")]
    public class IsGreaterOrEqualOperatorParser : OperatorParserBase
    {
        protected override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Operator> DoParse(CrossCutting.Utilities.Parsers.FunctionCallContext context)
        {
            #pragma warning disable CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
            return Result.Success<ExpressionFramework.Domain.Operator>(new ExpressionFramework.Domain.Operators.IsGreaterOrEqualOperator(
                ));
            #pragma warning restore CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
        }
    }
    [FunctionName(@"IsNotNullOperator")]
    public class IsNotNullOperatorParser : OperatorParserBase
    {
        protected override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Operator> DoParse(CrossCutting.Utilities.Parsers.FunctionCallContext context)
        {
            #pragma warning disable CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
            return Result.Success<ExpressionFramework.Domain.Operator>(new ExpressionFramework.Domain.Operators.IsNotNullOperator(
                ));
            #pragma warning restore CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
        }
    }
    [FunctionName(@"IsNotNullOrEmptyOperator")]
    public class IsNotNullOrEmptyOperatorParser : OperatorParserBase
    {
        protected override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Operator> DoParse(CrossCutting.Utilities.Parsers.FunctionCallContext context)
        {
            #pragma warning disable CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
            return Result.Success<ExpressionFramework.Domain.Operator>(new ExpressionFramework.Domain.Operators.IsNotNullOrEmptyOperator(
                ));
            #pragma warning restore CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
        }
    }
    [FunctionName(@"IsNotNullOrWhiteSpaceOperator")]
    public class IsNotNullOrWhiteSpaceOperatorParser : OperatorParserBase
    {
        protected override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Operator> DoParse(CrossCutting.Utilities.Parsers.FunctionCallContext context)
        {
            #pragma warning disable CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
            return Result.Success<ExpressionFramework.Domain.Operator>(new ExpressionFramework.Domain.Operators.IsNotNullOrWhiteSpaceOperator(
                ));
            #pragma warning restore CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
        }
    }
    [FunctionName(@"IsNullOperator")]
    public class IsNullOperatorParser : OperatorParserBase
    {
        protected override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Operator> DoParse(CrossCutting.Utilities.Parsers.FunctionCallContext context)
        {
            #pragma warning disable CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
            return Result.Success<ExpressionFramework.Domain.Operator>(new ExpressionFramework.Domain.Operators.IsNullOperator(
                ));
            #pragma warning restore CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
        }
    }
    [FunctionName(@"IsNullOrEmptyOperator")]
    public class IsNullOrEmptyOperatorParser : OperatorParserBase
    {
        protected override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Operator> DoParse(CrossCutting.Utilities.Parsers.FunctionCallContext context)
        {
            #pragma warning disable CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
            return Result.Success<ExpressionFramework.Domain.Operator>(new ExpressionFramework.Domain.Operators.IsNullOrEmptyOperator(
                ));
            #pragma warning restore CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
        }
    }
    [FunctionName(@"IsNullOrWhiteSpaceOperator")]
    public class IsNullOrWhiteSpaceOperatorParser : OperatorParserBase
    {
        protected override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Operator> DoParse(CrossCutting.Utilities.Parsers.FunctionCallContext context)
        {
            #pragma warning disable CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
            return Result.Success<ExpressionFramework.Domain.Operator>(new ExpressionFramework.Domain.Operators.IsNullOrWhiteSpaceOperator(
                ));
            #pragma warning restore CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
        }
    }
    [FunctionName(@"IsSmallerOperator")]
    public class IsSmallerOperatorParser : OperatorParserBase
    {
        protected override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Operator> DoParse(CrossCutting.Utilities.Parsers.FunctionCallContext context)
        {
            #pragma warning disable CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
            return Result.Success<ExpressionFramework.Domain.Operator>(new ExpressionFramework.Domain.Operators.IsSmallerOperator(
                ));
            #pragma warning restore CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
        }
    }
    [FunctionName(@"IsSmallerOrEqualOperator")]
    public class IsSmallerOrEqualOperatorParser : OperatorParserBase
    {
        protected override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Operator> DoParse(CrossCutting.Utilities.Parsers.FunctionCallContext context)
        {
            #pragma warning disable CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
            return Result.Success<ExpressionFramework.Domain.Operator>(new ExpressionFramework.Domain.Operators.IsSmallerOrEqualOperator(
                ));
            #pragma warning restore CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
        }
    }
    [FunctionName(@"NotEndsWithOperator")]
    public class NotEndsWithOperatorParser : OperatorParserBase
    {
        protected override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Operator> DoParse(CrossCutting.Utilities.Parsers.FunctionCallContext context)
        {
            #pragma warning disable CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
            return Result.Success<ExpressionFramework.Domain.Operator>(new ExpressionFramework.Domain.Operators.NotEndsWithOperator(
                ));
            #pragma warning restore CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
        }
    }
    [FunctionName(@"NotEqualsOperator")]
    public class NotEqualsOperatorParser : OperatorParserBase
    {
        protected override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Operator> DoParse(CrossCutting.Utilities.Parsers.FunctionCallContext context)
        {
            #pragma warning disable CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
            return Result.Success<ExpressionFramework.Domain.Operator>(new ExpressionFramework.Domain.Operators.NotEqualsOperator(
                ));
            #pragma warning restore CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
        }
    }
    [FunctionName(@"NotStartsWithOperator")]
    public class NotStartsWithOperatorParser : OperatorParserBase
    {
        protected override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Operator> DoParse(CrossCutting.Utilities.Parsers.FunctionCallContext context)
        {
            #pragma warning disable CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
            return Result.Success<ExpressionFramework.Domain.Operator>(new ExpressionFramework.Domain.Operators.NotStartsWithOperator(
                ));
            #pragma warning restore CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
        }
    }
    [FunctionName(@"StartsWithOperator")]
    public class StartsWithOperatorParser : OperatorParserBase
    {
        protected override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Operator> DoParse(CrossCutting.Utilities.Parsers.FunctionCallContext context)
        {
            #pragma warning disable CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
            return Result.Success<ExpressionFramework.Domain.Operator>(new ExpressionFramework.Domain.Operators.StartsWithOperator(
                ));
            #pragma warning restore CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
        }
    }
    [FunctionName(@"StringContainsOperator")]
    public class StringContainsOperatorParser : OperatorParserBase
    {
        protected override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Operator> DoParse(CrossCutting.Utilities.Parsers.FunctionCallContext context)
        {
            #pragma warning disable CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
            return Result.Success<ExpressionFramework.Domain.Operator>(new ExpressionFramework.Domain.Operators.StringContainsOperator(
                ));
            #pragma warning restore CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
        }
    }
    [FunctionName(@"StringNotContainsOperator")]
    public class StringNotContainsOperatorParser : OperatorParserBase
    {
        protected override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Operator> DoParse(CrossCutting.Utilities.Parsers.FunctionCallContext context)
        {
            #pragma warning disable CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
            return Result.Success<ExpressionFramework.Domain.Operator>(new ExpressionFramework.Domain.Operators.StringNotContainsOperator(
                ));
            #pragma warning restore CS8620 // Argument cannot be used for parameter due to differences in the nullability of reference types.
        }
    }
}
#nullable disable
