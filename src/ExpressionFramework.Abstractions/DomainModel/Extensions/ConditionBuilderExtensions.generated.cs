// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 6.0.3
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ExpressionFramework.Abstractions.DomainModel.Extensions
{
#nullable enable
    public static partial class ConditionBuilderExtensions
    {
        public static T WithLeftExpression<T>(this T instance, ExpressionFramework.Abstractions.DomainModel.Builders.IExpressionBuilder leftExpression)
            where T : ExpressionFramework.Abstractions.DomainModel.Builders.IConditionBuilder
        {
            instance.LeftExpression = leftExpression;
            return instance;
        }

        public static T WithOperator<T>(this T instance, ExpressionFramework.Abstractions.DomainModel.Domains.Operator @operator)
            where T : ExpressionFramework.Abstractions.DomainModel.Builders.IConditionBuilder
        {
            instance.Operator = @operator;
            return instance;
        }

        public static T WithRightExpression<T>(this T instance, ExpressionFramework.Abstractions.DomainModel.Builders.IExpressionBuilder rightExpression)
            where T : ExpressionFramework.Abstractions.DomainModel.Builders.IConditionBuilder
        {
            instance.RightExpression = rightExpression;
            return instance;
        }

        public static T WithStartGroup<T>(this T instance, bool startGroup = true)
            where T : ExpressionFramework.Abstractions.DomainModel.Builders.IConditionBuilder
        {
            instance.StartGroup = startGroup;
            return instance;
        }

        public static T WithEndGroup<T>(this T instance, bool endGroup = true)
            where T : ExpressionFramework.Abstractions.DomainModel.Builders.IConditionBuilder
        {
            instance.EndGroup = endGroup;
            return instance;
        }

        public static T WithCombination<T>(this T instance, ExpressionFramework.Abstractions.DomainModel.Domains.Combination combination)
            where T : ExpressionFramework.Abstractions.DomainModel.Builders.IConditionBuilder
        {
            instance.Combination = combination;
            return instance;
        }
    }
#nullable restore
}

