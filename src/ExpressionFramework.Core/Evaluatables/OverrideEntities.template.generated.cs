// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.3
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace ExpressionFramework.Core.Evaluatables
{
    public partial record ComposableEvaluatable : ExpressionFramework.Core.EvaluatableBase, ExpressionFramework.Core.Abstractions.IEvaluatable
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Core.Abstractions.IEvaluatable InnerEvaluatable
        {
            get;
        }

        public System.Nullable<ExpressionFramework.Core.Domains.Combination> Combination
        {
            get;
        }

        public bool StartGroup
        {
            get;
        }

        public bool EndGroup
        {
            get;
        }

        public ComposableEvaluatable(ExpressionFramework.Core.Abstractions.IEvaluatable innerEvaluatable, System.Nullable<ExpressionFramework.Core.Domains.Combination> combination, bool startGroup, bool endGroup) : base()
        {
            this.InnerEvaluatable = innerEvaluatable;
            this.Combination = combination;
            this.StartGroup = startGroup;
            this.EndGroup = endGroup;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.EvaluatableBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Evaluatables.ComposableEvaluatableBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Evaluatables.ComposableEvaluatableBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IEvaluatableBuilder ExpressionFramework.Core.Abstractions.IEvaluatable.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record ComposedEvaluatable : ExpressionFramework.Core.EvaluatableBase, ExpressionFramework.Core.Abstractions.IEvaluatable
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Core.Evaluatables.ComposableEvaluatable> Conditions
        {
            get;
        }

        public ComposedEvaluatable(System.Collections.Generic.IEnumerable<ExpressionFramework.Core.Evaluatables.ComposableEvaluatable> conditions) : base()
        {
            this.Conditions = conditions is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<ExpressionFramework.Core.Evaluatables.ComposableEvaluatable>(conditions);
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.EvaluatableBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Evaluatables.ComposedEvaluatableBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Evaluatables.ComposedEvaluatableBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IEvaluatableBuilder ExpressionFramework.Core.Abstractions.IEvaluatable.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record ConstantEvaluatable : ExpressionFramework.Core.EvaluatableBase, ExpressionFramework.Core.Abstractions.IEvaluatable
    {
        public bool Value
        {
            get;
        }

        public ConstantEvaluatable(bool value) : base()
        {
            this.Value = value;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.EvaluatableBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Evaluatables.ConstantEvaluatableBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Evaluatables.ConstantEvaluatableBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IEvaluatableBuilder ExpressionFramework.Core.Abstractions.IEvaluatable.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record ConstantResultEvaluatable : ExpressionFramework.Core.EvaluatableBase, ExpressionFramework.Core.Abstractions.IEvaluatable
    {
        public CrossCutting.Common.Results.Result<bool> Result
        {
            get;
        }

        public ConstantResultEvaluatable(CrossCutting.Common.Results.Result<bool> result) : base()
        {
            this.Result = result;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.EvaluatableBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Evaluatables.ConstantResultEvaluatableBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Evaluatables.ConstantResultEvaluatableBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IEvaluatableBuilder ExpressionFramework.Core.Abstractions.IEvaluatable.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record DelegateEvaluatable : ExpressionFramework.Core.EvaluatableBase, ExpressionFramework.Core.Abstractions.IEvaluatable
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Func<bool> Delegate
        {
            get;
        }

        public DelegateEvaluatable(System.Func<bool> @delegate) : base()
        {
            this.Delegate = @delegate;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.EvaluatableBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Evaluatables.DelegateEvaluatableBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Evaluatables.DelegateEvaluatableBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IEvaluatableBuilder ExpressionFramework.Core.Abstractions.IEvaluatable.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record OperatorEvaluatable : ExpressionFramework.Core.EvaluatableBase, ExpressionFramework.Core.Abstractions.IEvaluatable
    {
        public object? LeftValue
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Core.Abstractions.IOperator Operator
        {
            get;
        }

        public object? RightValue
        {
            get;
        }

        public System.StringComparison StringComparison
        {
            get;
        }

        public OperatorEvaluatable(object? leftValue, ExpressionFramework.Core.Abstractions.IOperator @operator, object? rightValue, System.StringComparison stringComparison) : base()
        {
            this.LeftValue = leftValue;
            this.Operator = @operator;
            this.RightValue = rightValue;
            this.StringComparison = stringComparison;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.EvaluatableBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Evaluatables.OperatorEvaluatableBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Evaluatables.OperatorEvaluatableBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IEvaluatableBuilder ExpressionFramework.Core.Abstractions.IEvaluatable.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
}
#nullable disable
