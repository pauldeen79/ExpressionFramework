// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.3
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace ExpressionFramework.Core.Operators
{
    public partial record EndsWithOperator : ExpressionFramework.Core.OperatorBase, ExpressionFramework.Core.Abstractions.IOperator
    {
        public EndsWithOperator() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.OperatorBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Operators.EndsWithOperatorBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Operators.EndsWithOperatorBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder ExpressionFramework.Core.Abstractions.IOperator.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record EnumerableContainsOperator : ExpressionFramework.Core.OperatorBase, ExpressionFramework.Core.Abstractions.IOperator
    {
        public EnumerableContainsOperator() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.OperatorBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Operators.EnumerableContainsOperatorBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Operators.EnumerableContainsOperatorBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder ExpressionFramework.Core.Abstractions.IOperator.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record EnumerableNotContainsOperator : ExpressionFramework.Core.OperatorBase, ExpressionFramework.Core.Abstractions.IOperator
    {
        public EnumerableNotContainsOperator() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.OperatorBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Operators.EnumerableNotContainsOperatorBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Operators.EnumerableNotContainsOperatorBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder ExpressionFramework.Core.Abstractions.IOperator.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record EqualsOperator : ExpressionFramework.Core.OperatorBase, ExpressionFramework.Core.Abstractions.IOperator
    {
        public EqualsOperator() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.OperatorBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Operators.EqualsOperatorBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Operators.EqualsOperatorBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder ExpressionFramework.Core.Abstractions.IOperator.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record IsGreaterOperator : ExpressionFramework.Core.OperatorBase, ExpressionFramework.Core.Abstractions.IOperator
    {
        public IsGreaterOperator() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.OperatorBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Operators.IsGreaterOperatorBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Operators.IsGreaterOperatorBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder ExpressionFramework.Core.Abstractions.IOperator.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record IsGreaterOrEqualOperator : ExpressionFramework.Core.OperatorBase, ExpressionFramework.Core.Abstractions.IOperator
    {
        public IsGreaterOrEqualOperator() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.OperatorBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Operators.IsGreaterOrEqualOperatorBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Operators.IsGreaterOrEqualOperatorBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder ExpressionFramework.Core.Abstractions.IOperator.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record IsNotNullOperator : ExpressionFramework.Core.OperatorBase, ExpressionFramework.Core.Abstractions.IOperator
    {
        public IsNotNullOperator() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.OperatorBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Operators.IsNotNullOperatorBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Operators.IsNotNullOperatorBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder ExpressionFramework.Core.Abstractions.IOperator.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record IsNotNullOrEmptyOperator : ExpressionFramework.Core.OperatorBase, ExpressionFramework.Core.Abstractions.IOperator
    {
        public IsNotNullOrEmptyOperator() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.OperatorBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Operators.IsNotNullOrEmptyOperatorBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Operators.IsNotNullOrEmptyOperatorBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder ExpressionFramework.Core.Abstractions.IOperator.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record IsNotNullOrWhiteSpaceOperator : ExpressionFramework.Core.OperatorBase, ExpressionFramework.Core.Abstractions.IOperator
    {
        public IsNotNullOrWhiteSpaceOperator() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.OperatorBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Operators.IsNotNullOrWhiteSpaceOperatorBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Operators.IsNotNullOrWhiteSpaceOperatorBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder ExpressionFramework.Core.Abstractions.IOperator.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record IsNullOperator : ExpressionFramework.Core.OperatorBase, ExpressionFramework.Core.Abstractions.IOperator
    {
        public IsNullOperator() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.OperatorBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Operators.IsNullOperatorBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Operators.IsNullOperatorBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder ExpressionFramework.Core.Abstractions.IOperator.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record IsNullOrEmptyOperator : ExpressionFramework.Core.OperatorBase, ExpressionFramework.Core.Abstractions.IOperator
    {
        public IsNullOrEmptyOperator() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.OperatorBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Operators.IsNullOrEmptyOperatorBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Operators.IsNullOrEmptyOperatorBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder ExpressionFramework.Core.Abstractions.IOperator.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record IsNullOrWhiteSpaceOperator : ExpressionFramework.Core.OperatorBase, ExpressionFramework.Core.Abstractions.IOperator
    {
        public IsNullOrWhiteSpaceOperator() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.OperatorBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Operators.IsNullOrWhiteSpaceOperatorBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Operators.IsNullOrWhiteSpaceOperatorBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder ExpressionFramework.Core.Abstractions.IOperator.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record IsSmallerOperator : ExpressionFramework.Core.OperatorBase, ExpressionFramework.Core.Abstractions.IOperator
    {
        public IsSmallerOperator() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.OperatorBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Operators.IsSmallerOperatorBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Operators.IsSmallerOperatorBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder ExpressionFramework.Core.Abstractions.IOperator.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record IsSmallerOrEqualOperator : ExpressionFramework.Core.OperatorBase, ExpressionFramework.Core.Abstractions.IOperator
    {
        public IsSmallerOrEqualOperator() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.OperatorBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Operators.IsSmallerOrEqualOperatorBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Operators.IsSmallerOrEqualOperatorBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder ExpressionFramework.Core.Abstractions.IOperator.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record NotEndsWithOperator : ExpressionFramework.Core.OperatorBase, ExpressionFramework.Core.Abstractions.IOperator
    {
        public NotEndsWithOperator() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.OperatorBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Operators.NotEndsWithOperatorBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Operators.NotEndsWithOperatorBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder ExpressionFramework.Core.Abstractions.IOperator.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record NotEqualsOperator : ExpressionFramework.Core.OperatorBase, ExpressionFramework.Core.Abstractions.IOperator
    {
        public NotEqualsOperator() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.OperatorBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Operators.NotEqualsOperatorBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Operators.NotEqualsOperatorBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder ExpressionFramework.Core.Abstractions.IOperator.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record NotStartsWithOperator : ExpressionFramework.Core.OperatorBase, ExpressionFramework.Core.Abstractions.IOperator
    {
        public NotStartsWithOperator() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.OperatorBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Operators.NotStartsWithOperatorBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Operators.NotStartsWithOperatorBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder ExpressionFramework.Core.Abstractions.IOperator.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record StartsWithOperator : ExpressionFramework.Core.OperatorBase, ExpressionFramework.Core.Abstractions.IOperator
    {
        public StartsWithOperator() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.OperatorBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Operators.StartsWithOperatorBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Operators.StartsWithOperatorBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder ExpressionFramework.Core.Abstractions.IOperator.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record StringContainsOperator : ExpressionFramework.Core.OperatorBase, ExpressionFramework.Core.Abstractions.IOperator
    {
        public StringContainsOperator() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.OperatorBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Operators.StringContainsOperatorBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Operators.StringContainsOperatorBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder ExpressionFramework.Core.Abstractions.IOperator.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
    public partial record StringNotContainsOperator : ExpressionFramework.Core.OperatorBase, ExpressionFramework.Core.Abstractions.IOperator
    {
        public StringNotContainsOperator() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Core.Builders.OperatorBaseBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Core.Builders.Operators.StringNotContainsOperatorBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Core.Builders.Operators.StringNotContainsOperatorBuilder(this);
        }

        ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder ExpressionFramework.Core.Abstractions.IOperator.ToBuilder()
        {
            return ToTypedBuilder();
        }
    }
}
#nullable disable
