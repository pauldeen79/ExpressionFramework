// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.3
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace ExpressionFramework.Core.Builders.Operators
{
    public partial class EndsWithOperatorBuilder : ExpressionFramework.Core.Builders.OperatorBaseBuilder<EndsWithOperatorBuilder, ExpressionFramework.Core.Operators.EndsWithOperator>, ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder
    {
        public EndsWithOperatorBuilder(ExpressionFramework.Core.Operators.EndsWithOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public EndsWithOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Core.Operators.EndsWithOperator BuildTyped()
        {
            return new ExpressionFramework.Core.Operators.EndsWithOperator();
        }

        ExpressionFramework.Core.Abstractions.IOperator ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator ExpressionFramework.Core.Operators.EndsWithOperator(EndsWithOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class EnumerableContainsOperatorBuilder : ExpressionFramework.Core.Builders.OperatorBaseBuilder<EnumerableContainsOperatorBuilder, ExpressionFramework.Core.Operators.EnumerableContainsOperator>, ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder
    {
        public EnumerableContainsOperatorBuilder(ExpressionFramework.Core.Operators.EnumerableContainsOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public EnumerableContainsOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Core.Operators.EnumerableContainsOperator BuildTyped()
        {
            return new ExpressionFramework.Core.Operators.EnumerableContainsOperator();
        }

        ExpressionFramework.Core.Abstractions.IOperator ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator ExpressionFramework.Core.Operators.EnumerableContainsOperator(EnumerableContainsOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class EnumerableNotContainsOperatorBuilder : ExpressionFramework.Core.Builders.OperatorBaseBuilder<EnumerableNotContainsOperatorBuilder, ExpressionFramework.Core.Operators.EnumerableNotContainsOperator>, ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder
    {
        public EnumerableNotContainsOperatorBuilder(ExpressionFramework.Core.Operators.EnumerableNotContainsOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public EnumerableNotContainsOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Core.Operators.EnumerableNotContainsOperator BuildTyped()
        {
            return new ExpressionFramework.Core.Operators.EnumerableNotContainsOperator();
        }

        ExpressionFramework.Core.Abstractions.IOperator ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator ExpressionFramework.Core.Operators.EnumerableNotContainsOperator(EnumerableNotContainsOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class EqualsOperatorBuilder : ExpressionFramework.Core.Builders.OperatorBaseBuilder<EqualsOperatorBuilder, ExpressionFramework.Core.Operators.EqualsOperator>, ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder
    {
        public EqualsOperatorBuilder(ExpressionFramework.Core.Operators.EqualsOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public EqualsOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Core.Operators.EqualsOperator BuildTyped()
        {
            return new ExpressionFramework.Core.Operators.EqualsOperator();
        }

        ExpressionFramework.Core.Abstractions.IOperator ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator ExpressionFramework.Core.Operators.EqualsOperator(EqualsOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class IsGreaterOperatorBuilder : ExpressionFramework.Core.Builders.OperatorBaseBuilder<IsGreaterOperatorBuilder, ExpressionFramework.Core.Operators.IsGreaterOperator>, ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder
    {
        public IsGreaterOperatorBuilder(ExpressionFramework.Core.Operators.IsGreaterOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public IsGreaterOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Core.Operators.IsGreaterOperator BuildTyped()
        {
            return new ExpressionFramework.Core.Operators.IsGreaterOperator();
        }

        ExpressionFramework.Core.Abstractions.IOperator ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator ExpressionFramework.Core.Operators.IsGreaterOperator(IsGreaterOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class IsGreaterOrEqualOperatorBuilder : ExpressionFramework.Core.Builders.OperatorBaseBuilder<IsGreaterOrEqualOperatorBuilder, ExpressionFramework.Core.Operators.IsGreaterOrEqualOperator>, ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder
    {
        public IsGreaterOrEqualOperatorBuilder(ExpressionFramework.Core.Operators.IsGreaterOrEqualOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public IsGreaterOrEqualOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Core.Operators.IsGreaterOrEqualOperator BuildTyped()
        {
            return new ExpressionFramework.Core.Operators.IsGreaterOrEqualOperator();
        }

        ExpressionFramework.Core.Abstractions.IOperator ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator ExpressionFramework.Core.Operators.IsGreaterOrEqualOperator(IsGreaterOrEqualOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class IsNotNullOperatorBuilder : ExpressionFramework.Core.Builders.OperatorBaseBuilder<IsNotNullOperatorBuilder, ExpressionFramework.Core.Operators.IsNotNullOperator>, ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder
    {
        public IsNotNullOperatorBuilder(ExpressionFramework.Core.Operators.IsNotNullOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public IsNotNullOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Core.Operators.IsNotNullOperator BuildTyped()
        {
            return new ExpressionFramework.Core.Operators.IsNotNullOperator();
        }

        ExpressionFramework.Core.Abstractions.IOperator ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator ExpressionFramework.Core.Operators.IsNotNullOperator(IsNotNullOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class IsNotNullOrEmptyOperatorBuilder : ExpressionFramework.Core.Builders.OperatorBaseBuilder<IsNotNullOrEmptyOperatorBuilder, ExpressionFramework.Core.Operators.IsNotNullOrEmptyOperator>, ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder
    {
        public IsNotNullOrEmptyOperatorBuilder(ExpressionFramework.Core.Operators.IsNotNullOrEmptyOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public IsNotNullOrEmptyOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Core.Operators.IsNotNullOrEmptyOperator BuildTyped()
        {
            return new ExpressionFramework.Core.Operators.IsNotNullOrEmptyOperator();
        }

        ExpressionFramework.Core.Abstractions.IOperator ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator ExpressionFramework.Core.Operators.IsNotNullOrEmptyOperator(IsNotNullOrEmptyOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class IsNotNullOrWhiteSpaceOperatorBuilder : ExpressionFramework.Core.Builders.OperatorBaseBuilder<IsNotNullOrWhiteSpaceOperatorBuilder, ExpressionFramework.Core.Operators.IsNotNullOrWhiteSpaceOperator>, ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder
    {
        public IsNotNullOrWhiteSpaceOperatorBuilder(ExpressionFramework.Core.Operators.IsNotNullOrWhiteSpaceOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public IsNotNullOrWhiteSpaceOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Core.Operators.IsNotNullOrWhiteSpaceOperator BuildTyped()
        {
            return new ExpressionFramework.Core.Operators.IsNotNullOrWhiteSpaceOperator();
        }

        ExpressionFramework.Core.Abstractions.IOperator ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator ExpressionFramework.Core.Operators.IsNotNullOrWhiteSpaceOperator(IsNotNullOrWhiteSpaceOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class IsNullOperatorBuilder : ExpressionFramework.Core.Builders.OperatorBaseBuilder<IsNullOperatorBuilder, ExpressionFramework.Core.Operators.IsNullOperator>, ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder
    {
        public IsNullOperatorBuilder(ExpressionFramework.Core.Operators.IsNullOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public IsNullOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Core.Operators.IsNullOperator BuildTyped()
        {
            return new ExpressionFramework.Core.Operators.IsNullOperator();
        }

        ExpressionFramework.Core.Abstractions.IOperator ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator ExpressionFramework.Core.Operators.IsNullOperator(IsNullOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class IsNullOrEmptyOperatorBuilder : ExpressionFramework.Core.Builders.OperatorBaseBuilder<IsNullOrEmptyOperatorBuilder, ExpressionFramework.Core.Operators.IsNullOrEmptyOperator>, ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder
    {
        public IsNullOrEmptyOperatorBuilder(ExpressionFramework.Core.Operators.IsNullOrEmptyOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public IsNullOrEmptyOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Core.Operators.IsNullOrEmptyOperator BuildTyped()
        {
            return new ExpressionFramework.Core.Operators.IsNullOrEmptyOperator();
        }

        ExpressionFramework.Core.Abstractions.IOperator ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator ExpressionFramework.Core.Operators.IsNullOrEmptyOperator(IsNullOrEmptyOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class IsNullOrWhiteSpaceOperatorBuilder : ExpressionFramework.Core.Builders.OperatorBaseBuilder<IsNullOrWhiteSpaceOperatorBuilder, ExpressionFramework.Core.Operators.IsNullOrWhiteSpaceOperator>, ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder
    {
        public IsNullOrWhiteSpaceOperatorBuilder(ExpressionFramework.Core.Operators.IsNullOrWhiteSpaceOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public IsNullOrWhiteSpaceOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Core.Operators.IsNullOrWhiteSpaceOperator BuildTyped()
        {
            return new ExpressionFramework.Core.Operators.IsNullOrWhiteSpaceOperator();
        }

        ExpressionFramework.Core.Abstractions.IOperator ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator ExpressionFramework.Core.Operators.IsNullOrWhiteSpaceOperator(IsNullOrWhiteSpaceOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class IsSmallerOperatorBuilder : ExpressionFramework.Core.Builders.OperatorBaseBuilder<IsSmallerOperatorBuilder, ExpressionFramework.Core.Operators.IsSmallerOperator>, ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder
    {
        public IsSmallerOperatorBuilder(ExpressionFramework.Core.Operators.IsSmallerOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public IsSmallerOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Core.Operators.IsSmallerOperator BuildTyped()
        {
            return new ExpressionFramework.Core.Operators.IsSmallerOperator();
        }

        ExpressionFramework.Core.Abstractions.IOperator ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator ExpressionFramework.Core.Operators.IsSmallerOperator(IsSmallerOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class IsSmallerOrEqualOperatorBuilder : ExpressionFramework.Core.Builders.OperatorBaseBuilder<IsSmallerOrEqualOperatorBuilder, ExpressionFramework.Core.Operators.IsSmallerOrEqualOperator>, ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder
    {
        public IsSmallerOrEqualOperatorBuilder(ExpressionFramework.Core.Operators.IsSmallerOrEqualOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public IsSmallerOrEqualOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Core.Operators.IsSmallerOrEqualOperator BuildTyped()
        {
            return new ExpressionFramework.Core.Operators.IsSmallerOrEqualOperator();
        }

        ExpressionFramework.Core.Abstractions.IOperator ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator ExpressionFramework.Core.Operators.IsSmallerOrEqualOperator(IsSmallerOrEqualOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class NotEndsWithOperatorBuilder : ExpressionFramework.Core.Builders.OperatorBaseBuilder<NotEndsWithOperatorBuilder, ExpressionFramework.Core.Operators.NotEndsWithOperator>, ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder
    {
        public NotEndsWithOperatorBuilder(ExpressionFramework.Core.Operators.NotEndsWithOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public NotEndsWithOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Core.Operators.NotEndsWithOperator BuildTyped()
        {
            return new ExpressionFramework.Core.Operators.NotEndsWithOperator();
        }

        ExpressionFramework.Core.Abstractions.IOperator ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator ExpressionFramework.Core.Operators.NotEndsWithOperator(NotEndsWithOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class NotEqualsOperatorBuilder : ExpressionFramework.Core.Builders.OperatorBaseBuilder<NotEqualsOperatorBuilder, ExpressionFramework.Core.Operators.NotEqualsOperator>, ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder
    {
        public NotEqualsOperatorBuilder(ExpressionFramework.Core.Operators.NotEqualsOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public NotEqualsOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Core.Operators.NotEqualsOperator BuildTyped()
        {
            return new ExpressionFramework.Core.Operators.NotEqualsOperator();
        }

        ExpressionFramework.Core.Abstractions.IOperator ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator ExpressionFramework.Core.Operators.NotEqualsOperator(NotEqualsOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class NotStartsWithOperatorBuilder : ExpressionFramework.Core.Builders.OperatorBaseBuilder<NotStartsWithOperatorBuilder, ExpressionFramework.Core.Operators.NotStartsWithOperator>, ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder
    {
        public NotStartsWithOperatorBuilder(ExpressionFramework.Core.Operators.NotStartsWithOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public NotStartsWithOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Core.Operators.NotStartsWithOperator BuildTyped()
        {
            return new ExpressionFramework.Core.Operators.NotStartsWithOperator();
        }

        ExpressionFramework.Core.Abstractions.IOperator ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator ExpressionFramework.Core.Operators.NotStartsWithOperator(NotStartsWithOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class StartsWithOperatorBuilder : ExpressionFramework.Core.Builders.OperatorBaseBuilder<StartsWithOperatorBuilder, ExpressionFramework.Core.Operators.StartsWithOperator>, ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder
    {
        public StartsWithOperatorBuilder(ExpressionFramework.Core.Operators.StartsWithOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public StartsWithOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Core.Operators.StartsWithOperator BuildTyped()
        {
            return new ExpressionFramework.Core.Operators.StartsWithOperator();
        }

        ExpressionFramework.Core.Abstractions.IOperator ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator ExpressionFramework.Core.Operators.StartsWithOperator(StartsWithOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class StringContainsOperatorBuilder : ExpressionFramework.Core.Builders.OperatorBaseBuilder<StringContainsOperatorBuilder, ExpressionFramework.Core.Operators.StringContainsOperator>, ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder
    {
        public StringContainsOperatorBuilder(ExpressionFramework.Core.Operators.StringContainsOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public StringContainsOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Core.Operators.StringContainsOperator BuildTyped()
        {
            return new ExpressionFramework.Core.Operators.StringContainsOperator();
        }

        ExpressionFramework.Core.Abstractions.IOperator ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator ExpressionFramework.Core.Operators.StringContainsOperator(StringContainsOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
    public partial class StringNotContainsOperatorBuilder : ExpressionFramework.Core.Builders.OperatorBaseBuilder<StringNotContainsOperatorBuilder, ExpressionFramework.Core.Operators.StringNotContainsOperator>, ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder
    {
        public StringNotContainsOperatorBuilder(ExpressionFramework.Core.Operators.StringNotContainsOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public StringNotContainsOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Core.Operators.StringNotContainsOperator BuildTyped()
        {
            return new ExpressionFramework.Core.Operators.StringNotContainsOperator();
        }

        ExpressionFramework.Core.Abstractions.IOperator ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder.Build()
        {
            return BuildTyped();
        }

        partial void SetDefaultValues();

        public static implicit operator ExpressionFramework.Core.Operators.StringNotContainsOperator(StringNotContainsOperatorBuilder entity)
        {
            return entity.BuildTyped();
        }
    }
}
#nullable disable
