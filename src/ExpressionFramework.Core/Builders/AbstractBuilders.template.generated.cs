// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.3
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace ExpressionFramework.Core.Builders
{
    public abstract partial class EvaluatableBaseBuilder<TBuilder, TEntity> : EvaluatableBaseBuilder, ExpressionFramework.Core.Builders.Abstractions.IEvaluatableBuilder
        where TEntity : ExpressionFramework.Core.EvaluatableBase
        where TBuilder : EvaluatableBaseBuilder<TBuilder, TEntity>
    {
        protected EvaluatableBaseBuilder(ExpressionFramework.Core.EvaluatableBase source) : base(source)
        {
        }

        protected EvaluatableBaseBuilder() : base()
        {
        }

        public override ExpressionFramework.Core.EvaluatableBase Build()
        {
            return BuildTyped();
        }

        public abstract TEntity BuildTyped();

        ExpressionFramework.Core.Abstractions.IEvaluatable ExpressionFramework.Core.Builders.Abstractions.IEvaluatableBuilder.Build()
        {
            return BuildTyped();
        }

        public static implicit operator ExpressionFramework.Core.EvaluatableBase(EvaluatableBaseBuilder<TBuilder, TEntity> entity)
        {
            return entity.BuildTyped();
        }
    }
    public abstract partial class OperatorBaseBuilder<TBuilder, TEntity> : OperatorBaseBuilder, ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder
        where TEntity : ExpressionFramework.Core.OperatorBase
        where TBuilder : OperatorBaseBuilder<TBuilder, TEntity>
    {
        protected OperatorBaseBuilder(ExpressionFramework.Core.OperatorBase source) : base(source)
        {
        }

        protected OperatorBaseBuilder() : base()
        {
        }

        public override ExpressionFramework.Core.OperatorBase Build()
        {
            return BuildTyped();
        }

        public abstract TEntity BuildTyped();

        ExpressionFramework.Core.Abstractions.IOperator ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder.Build()
        {
            return BuildTyped();
        }

        public static implicit operator ExpressionFramework.Core.OperatorBase(OperatorBaseBuilder<TBuilder, TEntity> entity)
        {
            return entity.BuildTyped();
        }
    }
}
#nullable disable
