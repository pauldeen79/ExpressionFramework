// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.3
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace ExpressionFramework.Core.Builders
{
    public abstract partial class EvaluatableBaseBuilder : ExpressionFramework.Core.Builders.Abstractions.IEvaluatableBuilder, System.ComponentModel.INotifyPropertyChanged
    {
        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected EvaluatableBaseBuilder(ExpressionFramework.Core.EvaluatableBase source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        protected EvaluatableBaseBuilder()
        {
            SetDefaultValues();
        }

        public abstract ExpressionFramework.Core.EvaluatableBase Build();

        ExpressionFramework.Core.Abstractions.IEvaluatable ExpressionFramework.Core.Builders.Abstractions.IEvaluatableBuilder.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public static implicit operator ExpressionFramework.Core.EvaluatableBase(EvaluatableBaseBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public abstract partial class OperatorBaseBuilder : ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder, System.ComponentModel.INotifyPropertyChanged
    {
        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected OperatorBaseBuilder(ExpressionFramework.Core.OperatorBase source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        protected OperatorBaseBuilder()
        {
            SetDefaultValues();
        }

        public abstract ExpressionFramework.Core.OperatorBase Build();

        ExpressionFramework.Core.Abstractions.IOperator ExpressionFramework.Core.Builders.Abstractions.IOperatorBuilder.Build()
        {
            return Build();
        }

        partial void SetDefaultValues();

        public static implicit operator ExpressionFramework.Core.OperatorBase(OperatorBaseBuilder entity)
        {
            return entity.Build();
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
}
#nullable disable
