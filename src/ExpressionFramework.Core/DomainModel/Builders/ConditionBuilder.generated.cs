// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 6.0.3
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ExpressionFramework.Core.DomainModel.Builders
{
#nullable enable
    public partial class ConditionBuilder : ExpressionFramework.Abstractions.DomainModel.Builders.IConditionBuilder
    {
        public ExpressionFramework.Abstractions.DomainModel.Builders.IExpressionBuilder LeftExpression
        {
            get;
            set;
        }

        public ExpressionFramework.Abstractions.DomainModel.Domains.Operator Operator
        {
            get;
            set;
        }

        public ExpressionFramework.Abstractions.DomainModel.Builders.IExpressionBuilder RightExpression
        {
            get;
            set;
        }

        public bool StartGroup
        {
            get;
            set;
        }

        public bool EndGroup
        {
            get;
            set;
        }

        public ExpressionFramework.Abstractions.DomainModel.Domains.Combination Combination
        {
            get;
            set;
        }

        public ExpressionFramework.Abstractions.DomainModel.ICondition Build()
        {
            return new ExpressionFramework.Core.DomainModel.Condition(LeftExpression.Build(), Operator, RightExpression.Build(), StartGroup, EndGroup, Combination);
        }

        public ConditionBuilder()
        {
            LeftExpression = new ExpressionFramework.Core.DomainModel.Builders.EmptyExpressionBuilder();
            Operator = default;
            RightExpression = new ExpressionFramework.Core.DomainModel.Builders.EmptyExpressionBuilder();
            StartGroup = default;
            EndGroup = default;
            Combination = default;
        }

        public ConditionBuilder(ExpressionFramework.Abstractions.DomainModel.ICondition source)
        {
            LeftExpression = source.LeftExpression.ToBuilder();
            Operator = source.Operator;
            RightExpression = source.RightExpression.ToBuilder();
            StartGroup = source.StartGroup;
            EndGroup = source.EndGroup;
            Combination = source.Combination;
        }
    }
#nullable restore
}

