<#@ Template language="c#" #>
<#+
public partial class ExpressionFrameworkCSharpClassBase
{
    protected static ITypeBase[] GetCoreModels()
    {
        return new[]
        {
            new ClassBuilder()
                .WithNamespace(@"ExpressionFramework.Abstractions.DomainModel")
                .AddProperties(
                    new ClassPropertyBuilder()
                        .WithHasSetter(false)
                        .WithName(@"LeftExpression")
                        .WithTypeName(@"ExpressionFramework.Abstractions.DomainModel.IExpression"),
                    new ClassPropertyBuilder()
                        .WithHasSetter(false)
                        .WithName(@"Operator")
                        .WithTypeName(@"ExpressionFramework.Abstractions.DomainModel.Domains.Operator"),
                    new ClassPropertyBuilder()
                        .WithHasSetter(false)
                        .WithName(@"RightExpression")
                        .WithTypeName(@"ExpressionFramework.Abstractions.DomainModel.IExpression"),
                    new ClassPropertyBuilder()
                        .WithHasSetter(false)
                        .WithName(@"StartGroup")
                        .WithTypeName(@"System.Boolean"),
                    new ClassPropertyBuilder()
                        .WithHasSetter(false)
                        .WithName(@"EndGroup")
                        .WithTypeName(@"System.Boolean"),
                    new ClassPropertyBuilder()
                        .WithHasSetter(false)
                        .WithName(@"Combination")
                        .WithTypeName(@"ExpressionFramework.Abstractions.DomainModel.Domains.Combination"))
                .WithName(@"ICondition"),
            new ClassBuilder()
                .WithNamespace(@"ExpressionFramework.Abstractions.DomainModel")
                .AddInterfaces(
                    @"ExpressionFramework.Abstractions.DomainModel.IExpression")
                .AddProperties(
                    new ClassPropertyBuilder()
                        .WithHasSetter(false)
                        .WithName(@"Function")
                        .WithTypeName(@"ExpressionFramework.Abstractions.DomainModel.IExpressionFunction")
                        .WithIsNullable(true))
                .AddMethods(
                    new ClassMethodBuilder()
                        .WithVirtual(true)
                        .WithAbstract(true)
                        .WithName(@"ToBuilder")
                        .WithTypeName(@"ExpressionFramework.Abstractions.DomainModel.Builders.IExpressionBuilder"))
                .WithName(@"IEmptyExpression"),
            new ClassBuilder()
                .WithNamespace(@"ExpressionFramework.Abstractions.DomainModel")
                .AddInterfaces(
                    @"ExpressionFramework.Abstractions.DomainModel.IExpression")
                .AddProperties(
                    new ClassPropertyBuilder()
                        .WithHasSetter(false)
                        .WithName(@"Value")
                        .WithTypeName(@"System.Object")
                        .WithIsNullable(true),
                    new ClassPropertyBuilder()
                        .WithHasSetter(false)
                        .WithName(@"Function")
                        .WithTypeName(@"ExpressionFramework.Abstractions.DomainModel.IExpressionFunction")
                        .WithIsNullable(true))
                .AddMethods(
                    new ClassMethodBuilder()
                        .WithVirtual(true)
                        .WithAbstract(true)
                        .WithName(@"ToBuilder")
                        .WithTypeName(@"ExpressionFramework.Abstractions.DomainModel.Builders.IExpressionBuilder"))
                .WithName(@"IConstantExpression"),
            new ClassBuilder()
                .WithNamespace(@"ExpressionFramework.Abstractions.DomainModel")
                .AddInterfaces(
                    @"ExpressionFramework.Abstractions.DomainModel.IExpression")
                .AddProperties(
                    new ClassPropertyBuilder()
                        .WithHasSetter(false)
                        .WithName(@"ValueDelegate")
                        .WithTypeName(@"System.Func`4[[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[ExpressionFramework.Abstractions.DomainModel.IExpression, ExpressionFramework.Abstractions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[ExpressionFramework.Abstractions.IExpressionEvaluator, ExpressionFramework.Abstractions, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null],[System.Object, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]"),
                    new ClassPropertyBuilder()
                        .WithHasSetter(false)
                        .WithName(@"Function")
                        .WithTypeName(@"ExpressionFramework.Abstractions.DomainModel.IExpressionFunction")
                        .WithIsNullable(true))
                .AddMethods(
                    new ClassMethodBuilder()
                        .WithVirtual(true)
                        .WithAbstract(true)
                        .WithName(@"ToBuilder")
                        .WithTypeName(@"ExpressionFramework.Abstractions.DomainModel.Builders.IExpressionBuilder"))
                .WithName(@"IDelegateExpression"),
            new ClassBuilder()
                .WithNamespace(@"ExpressionFramework.Abstractions.DomainModel")
                .AddInterfaces(
                    @"ExpressionFramework.Abstractions.DomainModel.IExpression")
                .AddProperties(
                    new ClassPropertyBuilder()
                        .WithHasSetter(false)
                        .WithName(@"FieldName")
                        .WithTypeName(@"System.String"),
                    new ClassPropertyBuilder()
                        .WithHasSetter(false)
                        .WithName(@"Function")
                        .WithTypeName(@"ExpressionFramework.Abstractions.DomainModel.IExpressionFunction")
                        .WithIsNullable(true))
                .AddMethods(
                    new ClassMethodBuilder()
                        .WithVirtual(true)
                        .WithAbstract(true)
                        .WithName(@"ToBuilder")
                        .WithTypeName(@"ExpressionFramework.Abstractions.DomainModel.Builders.IExpressionBuilder"))
                .WithName(@"IFieldExpression"),
        }.Select(x => x.Build()).ToArray();
    }
}
#>