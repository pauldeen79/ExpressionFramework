<#@ Template language="c#" #>
<#+
    public partial class ExpressionFrameworkCSharpClassBase
    {
        protected static ITypeBase[] GetBaseModels()
        {
            return new[]
            {
                new ClassBuilder()
                    .WithNamespace(@"ExpressionFramework.Abstractions.DomainModel")
                    .AddProperties(
                        new ClassPropertyBuilder()
                            .WithHasSetter(false)
                            .WithName(@"LeftExpression")
                            .WithTypeName(@"ExpressionFramework.Abstractions.DomainModel.IExpression"),
                        new ClassPropertyBuilder()
                            .WithHasSetter(false)
                            .WithName(@"Operator")
                            .WithTypeName(@"ExpressionFramework.Abstractions.DomainModel.Domains.Operator"),
                        new ClassPropertyBuilder()
                            .WithHasSetter(false)
                            .WithName(@"RightExpression")
                            .WithTypeName(@"ExpressionFramework.Abstractions.DomainModel.IExpression"),
                        new ClassPropertyBuilder()
                            .WithHasSetter(false)
                            .WithName(@"StartGroup")
                            .WithTypeName(@"System.Boolean"),
                        new ClassPropertyBuilder()
                            .WithHasSetter(false)
                            .WithName(@"EndGroup")
                            .WithTypeName(@"System.Boolean"),
                        new ClassPropertyBuilder()
                            .WithHasSetter(false)
                            .WithName(@"Combination")
                            .WithTypeName(@"ExpressionFramework.Abstractions.DomainModel.Domains.Combination"))
                    .WithName(@"ICondition"),
                new ClassBuilder()
                    .WithNamespace(@"ExpressionFramework.Abstractions.DomainModel")
                    .AddProperties(
                        new ClassPropertyBuilder()
                            .WithHasSetter(false)
                            .WithName(@"Function")
                            .WithTypeName(@"ExpressionFramework.Abstractions.DomainModel.IExpressionFunction")
                            .WithIsNullable(true))
                    .AddMethods(
                        new ClassMethodBuilder()
                            .WithVirtual(true)
                            .WithAbstract(true)
                            .WithName(@"ToBuilder")
                            .WithTypeName(@"ExpressionFramework.Abstractions.DomainModel.Builders.IExpressionBuilder"))
                    .WithName(@"IExpression"),
                new ClassBuilder()
                    .WithNamespace(@"ExpressionFramework.Abstractions.DomainModel")
                    .AddProperties(
                        new ClassPropertyBuilder()
                            .WithHasSetter(false)
                            .WithName(@"InnerFunction")
                            .WithTypeName(@"ExpressionFramework.Abstractions.DomainModel.IExpressionFunction")
                            .WithIsNullable(true))
                    .AddMethods(
                        new ClassMethodBuilder()
                            .WithVirtual(true)
                            .WithAbstract(true)
                            .WithName(@"ToBuilder")
                            .WithTypeName(@"ExpressionFramework.Abstractions.DomainModel.Builders.IExpressionFunctionBuilder"))
                    .WithName(@"IExpressionFunction"),
            }.Select(x => x.Build()).ToArray();
        }
    }
}
#>