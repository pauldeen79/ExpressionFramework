// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 8.0.10
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#nullable enable
namespace ExpressionFramework.Domain.Expressions
{
    public partial record AggregateExpression : ExpressionFramework.Domain.Expression
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Domain.Expression> Expressions
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Aggregator Aggregator
        {
            get;
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.IFormatProvider>? FormatProviderExpression
        {
            get;
        }

        public AggregateExpression(System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.Expression> expressions, ExpressionFramework.Domain.Aggregator aggregator, ExpressionFramework.Domain.Contracts.ITypedExpression<System.IFormatProvider>? formatProviderExpression) : base()
        {
            this.Expressions = expressions is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<ExpressionFramework.Domain.Expression>(expressions);
            this.Aggregator = aggregator;
            this.FormatProviderExpression = formatProviderExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.AggregateExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.AggregateExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }
    }
    public partial record AllExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<bool>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> Expression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<bool> PredicateExpression
        {
            get;
        }

        public AllExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<bool> predicateExpression) : base()
        {
            this.Expression = expression;
            this.PredicateExpression = predicateExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.AllExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.AllExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record AndExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<bool>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<bool> FirstExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<bool> SecondExpression
        {
            get;
        }

        public AndExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<bool> firstExpression, ExpressionFramework.Domain.Contracts.ITypedExpression<bool> secondExpression) : base()
        {
            this.FirstExpression = firstExpression;
            this.SecondExpression = secondExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.AndExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.AndExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record AnyExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<bool>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> Expression
        {
            get;
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<bool>? PredicateExpression
        {
            get;
        }

        public AnyExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<bool>? predicateExpression) : base()
        {
            this.Expression = expression;
            this.PredicateExpression = predicateExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.AnyExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.AnyExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record CastExpression<T> : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<T>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression SourceExpression
        {
            get;
        }

        public CastExpression(ExpressionFramework.Domain.Expression sourceExpression) : base()
        {
            this.SourceExpression = sourceExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.CastExpressionBuilder<T> ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.CastExpressionBuilder<T>(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }
    }
    public partial record ChainedExpression : ExpressionFramework.Domain.Expression
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Domain.Expression> Expressions
        {
            get;
        }

        public ChainedExpression(System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.Expression> expressions) : base()
        {
            this.Expressions = expressions is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<ExpressionFramework.Domain.Expression>(expressions);
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.ChainedExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.ChainedExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }
    }
    public partial record CompoundExpression : ExpressionFramework.Domain.Expression
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression FirstExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression SecondExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Aggregator Aggregator
        {
            get;
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.IFormatProvider>? FormatProviderExpression
        {
            get;
        }

        public CompoundExpression(ExpressionFramework.Domain.Expression firstExpression, ExpressionFramework.Domain.Expression secondExpression, ExpressionFramework.Domain.Aggregator aggregator, ExpressionFramework.Domain.Contracts.ITypedExpression<System.IFormatProvider>? formatProviderExpression) : base()
        {
            this.FirstExpression = firstExpression;
            this.SecondExpression = secondExpression;
            this.Aggregator = aggregator;
            this.FormatProviderExpression = formatProviderExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.CompoundExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.CompoundExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }
    }
    public partial record ConstantExpression : ExpressionFramework.Domain.Expression
    {
        public object? Value
        {
            get;
        }

        public ConstantExpression(object? value) : base()
        {
            this.Value = value;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.ConstantExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.ConstantExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }
    }
    public partial record ConstantResultExpression : ExpressionFramework.Domain.Expression
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Common.Results.Result Value
        {
            get;
        }

        public ConstantResultExpression(CrossCutting.Common.Results.Result value) : base()
        {
            this.Value = value;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.ConstantResultExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.ConstantResultExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }
    }
    public partial record ContextExpression : ExpressionFramework.Domain.Expression
    {
        public ContextExpression() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.ContextExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.ContextExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }
    }
    public partial record CountExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<int>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> Expression
        {
            get;
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<bool>? PredicateExpression
        {
            get;
        }

        public CountExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<bool>? predicateExpression) : base()
        {
            this.Expression = expression;
            this.PredicateExpression = predicateExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.CountExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.CountExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record DayExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<int>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.DateTime> Expression
        {
            get;
        }

        public DayExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<System.DateTime> expression) : base()
        {
            this.Expression = expression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.DayExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.DayExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record DefaultExpression<T> : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<T>
    {
        public DefaultExpression() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.DefaultExpressionBuilder<T> ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.DefaultExpressionBuilder<T>(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }
    }
    public partial record DelegateExpression : ExpressionFramework.Domain.Expression
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Func<object?,object?> Value
        {
            get;
        }

        public DelegateExpression(System.Func<object?,object?> value) : base()
        {
            this.Value = value;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.DelegateExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.DelegateExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }
    }
    public partial record DelegateResultExpression : ExpressionFramework.Domain.Expression
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Func<object?,CrossCutting.Common.Results.Result<object?>> Result
        {
            get;
        }

        public DelegateResultExpression(System.Func<object?,CrossCutting.Common.Results.Result<object?>> result) : base()
        {
            this.Result = result;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.DelegateResultExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.DelegateResultExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }
    }
    public partial record ElementAtExpression : ExpressionFramework.Domain.Expression
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> Expression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<int> IndexExpression
        {
            get;
        }

        public ElementAtExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<int> indexExpression) : base()
        {
            this.Expression = expression;
            this.IndexExpression = indexExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.ElementAtExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.ElementAtExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }
    }
    public partial record ElementAtOrDefaultExpression : ExpressionFramework.Domain.Expression
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> Expression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<int> IndexExpression
        {
            get;
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression? DefaultExpression
        {
            get;
        }

        public ElementAtOrDefaultExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<int> indexExpression, ExpressionFramework.Domain.Expression? defaultExpression) : base()
        {
            this.Expression = expression;
            this.IndexExpression = indexExpression;
            this.DefaultExpression = defaultExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.ElementAtOrDefaultExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.ElementAtOrDefaultExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }
    }
    public partial record EmptyExpression : ExpressionFramework.Domain.Expression
    {
        public EmptyExpression() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.EmptyExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.EmptyExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }
    }
    public partial record EqualsExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<bool>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression FirstExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression SecondExpression
        {
            get;
        }

        public EqualsExpression(ExpressionFramework.Domain.Expression firstExpression, ExpressionFramework.Domain.Expression secondExpression) : base()
        {
            this.FirstExpression = firstExpression;
            this.SecondExpression = secondExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.EqualsExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.EqualsExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record ErrorExpression : ExpressionFramework.Domain.Expression
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<string> ErrorMessageExpression
        {
            get;
        }

        public ErrorExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<string> errorMessageExpression) : base()
        {
            this.ErrorMessageExpression = errorMessageExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.ErrorExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.ErrorExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }
    }
    public partial record EvaluatableExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<bool>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Evaluatable Condition
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression Expression
        {
            get;
        }

        public EvaluatableExpression(ExpressionFramework.Domain.Evaluatable condition, ExpressionFramework.Domain.Expression expression) : base()
        {
            this.Condition = condition;
            this.Expression = expression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.EvaluatableExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.EvaluatableExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record FalseExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<bool>
    {
        public FalseExpression() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.FalseExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.FalseExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record FieldExpression : ExpressionFramework.Domain.Expression
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression Expression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<string> FieldNameExpression
        {
            get;
        }

        public FieldExpression(ExpressionFramework.Domain.Expression expression, ExpressionFramework.Domain.Contracts.ITypedExpression<string> fieldNameExpression) : base()
        {
            this.Expression = expression;
            this.FieldNameExpression = fieldNameExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.FieldExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.FieldExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }
    }
    public partial record FirstExpression : ExpressionFramework.Domain.Expression
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> Expression
        {
            get;
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<bool>? PredicateExpression
        {
            get;
        }

        public FirstExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<bool>? predicateExpression) : base()
        {
            this.Expression = expression;
            this.PredicateExpression = predicateExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.FirstExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.FirstExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }
    }
    public partial record FirstOrDefaultExpression : ExpressionFramework.Domain.Expression
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> Expression
        {
            get;
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<bool>? PredicateExpression
        {
            get;
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression? DefaultExpression
        {
            get;
        }

        public FirstOrDefaultExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<bool>? predicateExpression, ExpressionFramework.Domain.Expression? defaultExpression) : base()
        {
            this.Expression = expression;
            this.PredicateExpression = predicateExpression;
            this.DefaultExpression = defaultExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.FirstOrDefaultExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.FirstOrDefaultExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }
    }
    public partial record GroupByExpression : ExpressionFramework.Domain.Expression
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> Expression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression KeySelectorExpression
        {
            get;
        }

        public GroupByExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> expression, ExpressionFramework.Domain.Expression keySelectorExpression) : base()
        {
            this.Expression = expression;
            this.KeySelectorExpression = keySelectorExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.GroupByExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.GroupByExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }
    }
    public partial record IfExpression : ExpressionFramework.Domain.Expression
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Evaluatable Condition
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression ResultExpression
        {
            get;
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression? DefaultExpression
        {
            get;
        }

        public IfExpression(ExpressionFramework.Domain.Evaluatable condition, ExpressionFramework.Domain.Expression resultExpression, ExpressionFramework.Domain.Expression? defaultExpression) : base()
        {
            this.Condition = condition;
            this.ResultExpression = resultExpression;
            this.DefaultExpression = defaultExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.IfExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.IfExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }
    }
    public partial record InvalidExpression : ExpressionFramework.Domain.Expression
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<string> ErrorMessageExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Domain.Contracts.ITypedExpression<CrossCutting.Common.Results.ValidationError>> ValidationErrorExpressions
        {
            get;
        }

        public InvalidExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<string> errorMessageExpression, System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.Contracts.ITypedExpression<CrossCutting.Common.Results.ValidationError>> validationErrorExpressions) : base()
        {
            this.ErrorMessageExpression = errorMessageExpression;
            this.ValidationErrorExpressions = validationErrorExpressions is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<ExpressionFramework.Domain.Contracts.ITypedExpression<CrossCutting.Common.Results.ValidationError>>(validationErrorExpressions);
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.InvalidExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.InvalidExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }
    }
    public partial record LastExpression : ExpressionFramework.Domain.Expression
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> Expression
        {
            get;
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<bool>? PredicateExpression
        {
            get;
        }

        public LastExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<bool>? predicateExpression) : base()
        {
            this.Expression = expression;
            this.PredicateExpression = predicateExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.LastExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.LastExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }
    }
    public partial record LastOrDefaultExpression : ExpressionFramework.Domain.Expression
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> Expression
        {
            get;
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<bool>? PredicateExpression
        {
            get;
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression? DefaultExpression
        {
            get;
        }

        public LastOrDefaultExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<bool>? predicateExpression, ExpressionFramework.Domain.Expression? defaultExpression) : base()
        {
            this.Expression = expression;
            this.PredicateExpression = predicateExpression;
            this.DefaultExpression = defaultExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.LastOrDefaultExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.LastOrDefaultExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }
    }
    public partial record LeftExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<string>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<string> Expression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<int> LengthExpression
        {
            get;
        }

        public LeftExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<string> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<int> lengthExpression) : base()
        {
            this.Expression = expression;
            this.LengthExpression = lengthExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.LeftExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.LeftExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record MaxExpression : ExpressionFramework.Domain.Expression
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> Expression
        {
            get;
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression? SelectorExpression
        {
            get;
        }

        public MaxExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> expression, ExpressionFramework.Domain.Expression? selectorExpression) : base()
        {
            this.Expression = expression;
            this.SelectorExpression = selectorExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.MaxExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.MaxExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }
    }
    public partial record MinExpression : ExpressionFramework.Domain.Expression
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> Expression
        {
            get;
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression? SelectorExpression
        {
            get;
        }

        public MinExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> expression, ExpressionFramework.Domain.Expression? selectorExpression) : base()
        {
            this.Expression = expression;
            this.SelectorExpression = selectorExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.MinExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.MinExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }
    }
    public partial record MonthExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<int>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.DateTime> Expression
        {
            get;
        }

        public MonthExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<System.DateTime> expression) : base()
        {
            this.Expression = expression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.MonthExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.MonthExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record NotEqualsExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<bool>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression FirstExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression SecondExpression
        {
            get;
        }

        public NotEqualsExpression(ExpressionFramework.Domain.Expression firstExpression, ExpressionFramework.Domain.Expression secondExpression) : base()
        {
            this.FirstExpression = firstExpression;
            this.SecondExpression = secondExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.NotEqualsExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.NotEqualsExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record NotExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<bool>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<bool> Expression
        {
            get;
        }

        public NotExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<bool> expression) : base()
        {
            this.Expression = expression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.NotExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.NotExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record NowExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<System.DateTime>
    {
        public CrossCutting.Common.Abstractions.IDateTimeProvider? DateTimeProvider
        {
            get;
        }

        public NowExpression(CrossCutting.Common.Abstractions.IDateTimeProvider? dateTimeProvider) : base()
        {
            this.DateTimeProvider = dateTimeProvider;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.NowExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.NowExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record OfTypeExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.Generic.IEnumerable<object?>>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> Expression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Type> TypeExpression
        {
            get;
        }

        public OfTypeExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<System.Type> typeExpression) : base()
        {
            this.Expression = expression;
            this.TypeExpression = typeExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.OfTypeExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.OfTypeExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record OperatorExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<bool>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression LeftExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression RightExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Operator Operator
        {
            get;
        }

        public OperatorExpression(ExpressionFramework.Domain.Expression leftExpression, ExpressionFramework.Domain.Expression rightExpression, ExpressionFramework.Domain.Operator @operator) : base()
        {
            this.LeftExpression = leftExpression;
            this.RightExpression = rightExpression;
            this.Operator = @operator;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.OperatorExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.OperatorExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record OrderByExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.Generic.IEnumerable<object?>>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> Expression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Domain.Contracts.ITypedExpression<ExpressionFramework.Domain.SortOrder>> SortOrderExpressions
        {
            get;
        }

        public OrderByExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> expression, System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.Contracts.ITypedExpression<ExpressionFramework.Domain.SortOrder>> sortOrderExpressions) : base()
        {
            this.Expression = expression;
            this.SortOrderExpressions = sortOrderExpressions is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<ExpressionFramework.Domain.Contracts.ITypedExpression<ExpressionFramework.Domain.SortOrder>>(sortOrderExpressions);
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.OrderByExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.OrderByExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record OrExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<bool>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<bool> FirstExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<bool> SecondExpression
        {
            get;
        }

        public OrExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<bool> firstExpression, ExpressionFramework.Domain.Contracts.ITypedExpression<bool> secondExpression) : base()
        {
            this.FirstExpression = firstExpression;
            this.SecondExpression = secondExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.OrExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.OrExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record RightExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<string>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<string> Expression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<int> LengthExpression
        {
            get;
        }

        public RightExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<string> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<int> lengthExpression) : base()
        {
            this.Expression = expression;
            this.LengthExpression = lengthExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.RightExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.RightExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record SelectExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.Generic.IEnumerable<object?>>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> Expression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression SelectorExpression
        {
            get;
        }

        public SelectExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> expression, ExpressionFramework.Domain.Expression selectorExpression) : base()
        {
            this.Expression = expression;
            this.SelectorExpression = selectorExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.SelectExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.SelectExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record SequenceExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.Generic.IEnumerable<object?>>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Domain.Expression> Expressions
        {
            get;
        }

        public SequenceExpression(System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.Expression> expressions) : base()
        {
            this.Expressions = expressions is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<ExpressionFramework.Domain.Expression>(expressions);
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.SequenceExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.SequenceExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record SingleExpression : ExpressionFramework.Domain.Expression
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> Expression
        {
            get;
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<bool>? PredicateExpression
        {
            get;
        }

        public SingleExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<bool>? predicateExpression) : base()
        {
            this.Expression = expression;
            this.PredicateExpression = predicateExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.SingleExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.SingleExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }
    }
    public partial record SingleOrDefaultExpression : ExpressionFramework.Domain.Expression
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> Expression
        {
            get;
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<bool>? PredicateExpression
        {
            get;
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression? DefaultExpression
        {
            get;
        }

        public SingleOrDefaultExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<bool>? predicateExpression, ExpressionFramework.Domain.Expression? defaultExpression) : base()
        {
            this.Expression = expression;
            this.PredicateExpression = predicateExpression;
            this.DefaultExpression = defaultExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.SingleOrDefaultExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.SingleOrDefaultExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }
    }
    public partial record SkipExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.Generic.IEnumerable<object?>>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> Expression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<int> CountExpression
        {
            get;
        }

        public SkipExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<int> countExpression) : base()
        {
            this.Expression = expression;
            this.CountExpression = countExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.SkipExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.SkipExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record StringConcatenateExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<string>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Domain.Contracts.ITypedExpression<string>> Expressions
        {
            get;
        }

        public StringConcatenateExpression(System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.Contracts.ITypedExpression<string>> expressions) : base()
        {
            this.Expressions = expressions is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<ExpressionFramework.Domain.Contracts.ITypedExpression<System.String>>(expressions);
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.StringConcatenateExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.StringConcatenateExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record StringFindExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<int>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<string> Expression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<string> FindExpression
        {
            get;
        }

        public StringFindExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<string> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<string> findExpression) : base()
        {
            this.Expression = expression;
            this.FindExpression = findExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.StringFindExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.StringFindExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record StringLengthExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<int>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<string> Expression
        {
            get;
        }

        public StringLengthExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<string> expression) : base()
        {
            this.Expression = expression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.StringLengthExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.StringLengthExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record StringReplaceExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<string>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<string> Expression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<string> FindExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<string> ReplaceExpression
        {
            get;
        }

        public StringReplaceExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<string> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<string> findExpression, ExpressionFramework.Domain.Contracts.ITypedExpression<string> replaceExpression) : base()
        {
            this.Expression = expression;
            this.FindExpression = findExpression;
            this.ReplaceExpression = replaceExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.StringReplaceExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.StringReplaceExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record SubstringExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<string>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<string> Expression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<int> IndexExpression
        {
            get;
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<int>? LengthExpression
        {
            get;
        }

        public SubstringExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<string> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<int> indexExpression, ExpressionFramework.Domain.Contracts.ITypedExpression<int>? lengthExpression) : base()
        {
            this.Expression = expression;
            this.IndexExpression = indexExpression;
            this.LengthExpression = lengthExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.SubstringExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.SubstringExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record SumExpression : ExpressionFramework.Domain.Expression
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> Expression
        {
            get;
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression? SelectorExpression
        {
            get;
        }

        public SumExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> expression, ExpressionFramework.Domain.Expression? selectorExpression) : base()
        {
            this.Expression = expression;
            this.SelectorExpression = selectorExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.SumExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.SumExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }
    }
    public partial record SwitchExpression : ExpressionFramework.Domain.Expression
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Domain.Case> Cases
        {
            get;
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression? DefaultExpression
        {
            get;
        }

        public SwitchExpression(System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.Case> cases, ExpressionFramework.Domain.Expression? defaultExpression) : base()
        {
            this.Cases = cases is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<ExpressionFramework.Domain.Case>(cases);
            this.DefaultExpression = defaultExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.SwitchExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.SwitchExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }
    }
    public partial record TakeExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.Generic.IEnumerable<object?>>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> Expression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<int> CountExpression
        {
            get;
        }

        public TakeExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<int> countExpression) : base()
        {
            this.Expression = expression;
            this.CountExpression = countExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.TakeExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.TakeExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record ToCamelCaseExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<string>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<string> Expression
        {
            get;
        }

        [System.ComponentModel.DefaultValueAttribute(null)]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Globalization.CultureInfo>? Culture
        {
            get;
        }

        public ToCamelCaseExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<string> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<System.Globalization.CultureInfo>? culture) : base()
        {
            this.Expression = expression;
            this.Culture = culture;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.ToCamelCaseExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.ToCamelCaseExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record TodayExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<System.DateTime>
    {
        public CrossCutting.Common.Abstractions.IDateTimeProvider? DateTimeProvider
        {
            get;
        }

        public TodayExpression(CrossCutting.Common.Abstractions.IDateTimeProvider? dateTimeProvider) : base()
        {
            this.DateTimeProvider = dateTimeProvider;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.TodayExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.TodayExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record ToLowerCaseExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<string>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<string> Expression
        {
            get;
        }

        [System.ComponentModel.DefaultValueAttribute(null)]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Globalization.CultureInfo>? Culture
        {
            get;
        }

        public ToLowerCaseExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<string> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<System.Globalization.CultureInfo>? culture) : base()
        {
            this.Expression = expression;
            this.Culture = culture;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.ToLowerCaseExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.ToLowerCaseExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record ToPascalCaseExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<string>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<string> Expression
        {
            get;
        }

        [System.ComponentModel.DefaultValueAttribute(null)]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Globalization.CultureInfo>? Culture
        {
            get;
        }

        public ToPascalCaseExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<string> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<System.Globalization.CultureInfo>? culture) : base()
        {
            this.Expression = expression;
            this.Culture = culture;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.ToPascalCaseExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.ToPascalCaseExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record ToUpperCaseExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<string>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<string> Expression
        {
            get;
        }

        [System.ComponentModel.DefaultValueAttribute(null)]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Globalization.CultureInfo>? Culture
        {
            get;
        }

        public ToUpperCaseExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<string> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<System.Globalization.CultureInfo>? culture) : base()
        {
            this.Expression = expression;
            this.Culture = culture;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.ToUpperCaseExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.ToUpperCaseExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record TrimEndExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<string>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<string> Expression
        {
            get;
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<char[]>? TrimCharsExpression
        {
            get;
        }

        public TrimEndExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<string> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<char[]>? trimCharsExpression) : base()
        {
            this.Expression = expression;
            this.TrimCharsExpression = trimCharsExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.TrimEndExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.TrimEndExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record TrimExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<string>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<string> Expression
        {
            get;
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<char[]>? TrimCharsExpression
        {
            get;
        }

        public TrimExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<string> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<char[]>? trimCharsExpression) : base()
        {
            this.Expression = expression;
            this.TrimCharsExpression = trimCharsExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.TrimExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.TrimExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record TrimStartExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<string>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<string> Expression
        {
            get;
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<char[]>? TrimCharsExpression
        {
            get;
        }

        public TrimStartExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<string> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<char[]>? trimCharsExpression) : base()
        {
            this.Expression = expression;
            this.TrimCharsExpression = trimCharsExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.TrimStartExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.TrimStartExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record TrueExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<bool>
    {
        public TrueExpression() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.TrueExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.TrueExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record TryCastExpression<T> : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<T>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression SourceExpression
        {
            get;
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<T>? DefaultExpression
        {
            get;
        }

        public TryCastExpression(ExpressionFramework.Domain.Expression sourceExpression, ExpressionFramework.Domain.Contracts.ITypedExpression<T>? defaultExpression) : base()
        {
            this.SourceExpression = sourceExpression;
            this.DefaultExpression = defaultExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.TryCastExpressionBuilder<T> ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.TryCastExpressionBuilder<T>(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }
    }
    public partial record TypedChainedExpression<T> : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<T>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Domain.Expression> Expressions
        {
            get;
        }

        public TypedChainedExpression(System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.Expression> expressions) : base()
        {
            this.Expressions = expressions is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<ExpressionFramework.Domain.Expression>(expressions);
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.TypedChainedExpressionBuilder<T> ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.TypedChainedExpressionBuilder<T>(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }
    }
    public partial record TypedConstantExpression<T> : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<T>
    {
        public T Value
        {
            get;
        }

        public TypedConstantExpression(T value) : base()
        {
            this.Value = value;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<T> ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<T>(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }
    }
    public partial record TypedConstantResultExpression<T> : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<T>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public CrossCutting.Common.Results.Result<T> Value
        {
            get;
        }

        public TypedConstantResultExpression(CrossCutting.Common.Results.Result<T> value) : base()
        {
            this.Value = value;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.TypedConstantResultExpressionBuilder<T> ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.TypedConstantResultExpressionBuilder<T>(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }
    }
    public partial record TypedContextExpression<T> : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<T>
    {
        public TypedContextExpression() : base()
        {
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.TypedContextExpressionBuilder<T> ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.TypedContextExpressionBuilder<T>(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }
    }
    public partial record TypedDelegateExpression<T> : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<T>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Func<object?,T> Value
        {
            get;
        }

        public TypedDelegateExpression(System.Func<object?,T> value) : base()
        {
            this.Value = value;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.TypedDelegateExpressionBuilder<T> ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.TypedDelegateExpressionBuilder<T>(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }
    }
    public partial record TypedDelegateResultExpression<T> : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<T>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Func<object?,CrossCutting.Common.Results.Result<T>> Value
        {
            get;
        }

        public TypedDelegateResultExpression(System.Func<object?,CrossCutting.Common.Results.Result<T>> value) : base()
        {
            this.Value = value;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.TypedDelegateResultExpressionBuilder<T> ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.TypedDelegateResultExpressionBuilder<T>(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }
    }
    public partial record TypedFieldExpression<T> : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<T>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression Expression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<string> FieldNameExpression
        {
            get;
        }

        public TypedFieldExpression(ExpressionFramework.Domain.Expression expression, ExpressionFramework.Domain.Contracts.ITypedExpression<string> fieldNameExpression) : base()
        {
            this.Expression = expression;
            this.FieldNameExpression = fieldNameExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.TypedFieldExpressionBuilder<T> ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.TypedFieldExpressionBuilder<T>(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.NotFound<ExpressionFramework.Domain.Expression>();
        }
    }
    public partial record WhereExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.Generic.IEnumerable<object?>>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> Expression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<bool> PredicateExpression
        {
            get;
        }

        public WhereExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.IEnumerable> expression, ExpressionFramework.Domain.Contracts.ITypedExpression<bool> predicateExpression) : base()
        {
            this.Expression = expression;
            this.PredicateExpression = predicateExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.WhereExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.WhereExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
    public partial record YearExpression : ExpressionFramework.Domain.Expression, ExpressionFramework.Domain.Contracts.ITypedExpression<int>
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpression<System.DateTime> Expression
        {
            get;
        }

        public YearExpression(ExpressionFramework.Domain.Contracts.ITypedExpression<System.DateTime> expression) : base()
        {
            this.Expression = expression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.ExpressionBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Expressions.YearExpressionBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Expressions.YearExpressionBuilder(this);
        }

        public override CrossCutting.Common.Results.Result<ExpressionFramework.Domain.Expression> GetSingleContainedExpression()
        {
            return CrossCutting.Common.Results.Result.Success(Expression.ToUntyped());
        }

        public Expression ToUntyped()
        {
            return this;
        }
    }
}
#nullable disable
