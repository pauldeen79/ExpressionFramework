// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.1
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace ExpressionFramework.Domain.Builders.Operators
{
    public partial class EndsWithOperatorBuilder : ExpressionFramework.Domain.Builders.OperatorBuilder<EndsWithOperatorBuilder, ExpressionFramework.Domain.Operators.EndsWithOperator>
    {
        public EndsWithOperatorBuilder(ExpressionFramework.Domain.Operators.EndsWithOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public EndsWithOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Operators.EndsWithOperator BuildTyped()
        {
            return new ExpressionFramework.Domain.Operators.EndsWithOperator();
        }

        partial void SetDefaultValues();
    }
    public partial class EnumerableContainsOperatorBuilder : ExpressionFramework.Domain.Builders.OperatorBuilder<EnumerableContainsOperatorBuilder, ExpressionFramework.Domain.Operators.EnumerableContainsOperator>
    {
        public EnumerableContainsOperatorBuilder(ExpressionFramework.Domain.Operators.EnumerableContainsOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public EnumerableContainsOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Operators.EnumerableContainsOperator BuildTyped()
        {
            return new ExpressionFramework.Domain.Operators.EnumerableContainsOperator();
        }

        partial void SetDefaultValues();
    }
    public partial class EnumerableNotContainsOperatorBuilder : ExpressionFramework.Domain.Builders.OperatorBuilder<EnumerableNotContainsOperatorBuilder, ExpressionFramework.Domain.Operators.EnumerableNotContainsOperator>
    {
        public EnumerableNotContainsOperatorBuilder(ExpressionFramework.Domain.Operators.EnumerableNotContainsOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public EnumerableNotContainsOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Operators.EnumerableNotContainsOperator BuildTyped()
        {
            return new ExpressionFramework.Domain.Operators.EnumerableNotContainsOperator();
        }

        partial void SetDefaultValues();
    }
    public partial class EqualsOperatorBuilder : ExpressionFramework.Domain.Builders.OperatorBuilder<EqualsOperatorBuilder, ExpressionFramework.Domain.Operators.EqualsOperator>
    {
        public EqualsOperatorBuilder(ExpressionFramework.Domain.Operators.EqualsOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public EqualsOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Operators.EqualsOperator BuildTyped()
        {
            return new ExpressionFramework.Domain.Operators.EqualsOperator();
        }

        partial void SetDefaultValues();
    }
    public partial class IsGreaterOperatorBuilder : ExpressionFramework.Domain.Builders.OperatorBuilder<IsGreaterOperatorBuilder, ExpressionFramework.Domain.Operators.IsGreaterOperator>
    {
        public IsGreaterOperatorBuilder(ExpressionFramework.Domain.Operators.IsGreaterOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public IsGreaterOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Operators.IsGreaterOperator BuildTyped()
        {
            return new ExpressionFramework.Domain.Operators.IsGreaterOperator();
        }

        partial void SetDefaultValues();
    }
    public partial class IsGreaterOrEqualOperatorBuilder : ExpressionFramework.Domain.Builders.OperatorBuilder<IsGreaterOrEqualOperatorBuilder, ExpressionFramework.Domain.Operators.IsGreaterOrEqualOperator>
    {
        public IsGreaterOrEqualOperatorBuilder(ExpressionFramework.Domain.Operators.IsGreaterOrEqualOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public IsGreaterOrEqualOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Operators.IsGreaterOrEqualOperator BuildTyped()
        {
            return new ExpressionFramework.Domain.Operators.IsGreaterOrEqualOperator();
        }

        partial void SetDefaultValues();
    }
    public partial class IsNotNullOperatorBuilder : ExpressionFramework.Domain.Builders.OperatorBuilder<IsNotNullOperatorBuilder, ExpressionFramework.Domain.Operators.IsNotNullOperator>
    {
        public IsNotNullOperatorBuilder(ExpressionFramework.Domain.Operators.IsNotNullOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public IsNotNullOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Operators.IsNotNullOperator BuildTyped()
        {
            return new ExpressionFramework.Domain.Operators.IsNotNullOperator();
        }

        partial void SetDefaultValues();
    }
    public partial class IsNotNullOrEmptyOperatorBuilder : ExpressionFramework.Domain.Builders.OperatorBuilder<IsNotNullOrEmptyOperatorBuilder, ExpressionFramework.Domain.Operators.IsNotNullOrEmptyOperator>
    {
        public IsNotNullOrEmptyOperatorBuilder(ExpressionFramework.Domain.Operators.IsNotNullOrEmptyOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public IsNotNullOrEmptyOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Operators.IsNotNullOrEmptyOperator BuildTyped()
        {
            return new ExpressionFramework.Domain.Operators.IsNotNullOrEmptyOperator();
        }

        partial void SetDefaultValues();
    }
    public partial class IsNotNullOrWhiteSpaceOperatorBuilder : ExpressionFramework.Domain.Builders.OperatorBuilder<IsNotNullOrWhiteSpaceOperatorBuilder, ExpressionFramework.Domain.Operators.IsNotNullOrWhiteSpaceOperator>
    {
        public IsNotNullOrWhiteSpaceOperatorBuilder(ExpressionFramework.Domain.Operators.IsNotNullOrWhiteSpaceOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public IsNotNullOrWhiteSpaceOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Operators.IsNotNullOrWhiteSpaceOperator BuildTyped()
        {
            return new ExpressionFramework.Domain.Operators.IsNotNullOrWhiteSpaceOperator();
        }

        partial void SetDefaultValues();
    }
    public partial class IsNullOperatorBuilder : ExpressionFramework.Domain.Builders.OperatorBuilder<IsNullOperatorBuilder, ExpressionFramework.Domain.Operators.IsNullOperator>
    {
        public IsNullOperatorBuilder(ExpressionFramework.Domain.Operators.IsNullOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public IsNullOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Operators.IsNullOperator BuildTyped()
        {
            return new ExpressionFramework.Domain.Operators.IsNullOperator();
        }

        partial void SetDefaultValues();
    }
    public partial class IsNullOrEmptyOperatorBuilder : ExpressionFramework.Domain.Builders.OperatorBuilder<IsNullOrEmptyOperatorBuilder, ExpressionFramework.Domain.Operators.IsNullOrEmptyOperator>
    {
        public IsNullOrEmptyOperatorBuilder(ExpressionFramework.Domain.Operators.IsNullOrEmptyOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public IsNullOrEmptyOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Operators.IsNullOrEmptyOperator BuildTyped()
        {
            return new ExpressionFramework.Domain.Operators.IsNullOrEmptyOperator();
        }

        partial void SetDefaultValues();
    }
    public partial class IsNullOrWhiteSpaceOperatorBuilder : ExpressionFramework.Domain.Builders.OperatorBuilder<IsNullOrWhiteSpaceOperatorBuilder, ExpressionFramework.Domain.Operators.IsNullOrWhiteSpaceOperator>
    {
        public IsNullOrWhiteSpaceOperatorBuilder(ExpressionFramework.Domain.Operators.IsNullOrWhiteSpaceOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public IsNullOrWhiteSpaceOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Operators.IsNullOrWhiteSpaceOperator BuildTyped()
        {
            return new ExpressionFramework.Domain.Operators.IsNullOrWhiteSpaceOperator();
        }

        partial void SetDefaultValues();
    }
    public partial class IsSmallerOperatorBuilder : ExpressionFramework.Domain.Builders.OperatorBuilder<IsSmallerOperatorBuilder, ExpressionFramework.Domain.Operators.IsSmallerOperator>
    {
        public IsSmallerOperatorBuilder(ExpressionFramework.Domain.Operators.IsSmallerOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public IsSmallerOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Operators.IsSmallerOperator BuildTyped()
        {
            return new ExpressionFramework.Domain.Operators.IsSmallerOperator();
        }

        partial void SetDefaultValues();
    }
    public partial class IsSmallerOrEqualOperatorBuilder : ExpressionFramework.Domain.Builders.OperatorBuilder<IsSmallerOrEqualOperatorBuilder, ExpressionFramework.Domain.Operators.IsSmallerOrEqualOperator>
    {
        public IsSmallerOrEqualOperatorBuilder(ExpressionFramework.Domain.Operators.IsSmallerOrEqualOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public IsSmallerOrEqualOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Operators.IsSmallerOrEqualOperator BuildTyped()
        {
            return new ExpressionFramework.Domain.Operators.IsSmallerOrEqualOperator();
        }

        partial void SetDefaultValues();
    }
    public partial class NotEndsWithOperatorBuilder : ExpressionFramework.Domain.Builders.OperatorBuilder<NotEndsWithOperatorBuilder, ExpressionFramework.Domain.Operators.NotEndsWithOperator>
    {
        public NotEndsWithOperatorBuilder(ExpressionFramework.Domain.Operators.NotEndsWithOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public NotEndsWithOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Operators.NotEndsWithOperator BuildTyped()
        {
            return new ExpressionFramework.Domain.Operators.NotEndsWithOperator();
        }

        partial void SetDefaultValues();
    }
    public partial class NotEqualsOperatorBuilder : ExpressionFramework.Domain.Builders.OperatorBuilder<NotEqualsOperatorBuilder, ExpressionFramework.Domain.Operators.NotEqualsOperator>
    {
        public NotEqualsOperatorBuilder(ExpressionFramework.Domain.Operators.NotEqualsOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public NotEqualsOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Operators.NotEqualsOperator BuildTyped()
        {
            return new ExpressionFramework.Domain.Operators.NotEqualsOperator();
        }

        partial void SetDefaultValues();
    }
    public partial class NotStartsWithOperatorBuilder : ExpressionFramework.Domain.Builders.OperatorBuilder<NotStartsWithOperatorBuilder, ExpressionFramework.Domain.Operators.NotStartsWithOperator>
    {
        public NotStartsWithOperatorBuilder(ExpressionFramework.Domain.Operators.NotStartsWithOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public NotStartsWithOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Operators.NotStartsWithOperator BuildTyped()
        {
            return new ExpressionFramework.Domain.Operators.NotStartsWithOperator();
        }

        partial void SetDefaultValues();
    }
    public partial class StartsWithOperatorBuilder : ExpressionFramework.Domain.Builders.OperatorBuilder<StartsWithOperatorBuilder, ExpressionFramework.Domain.Operators.StartsWithOperator>
    {
        public StartsWithOperatorBuilder(ExpressionFramework.Domain.Operators.StartsWithOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public StartsWithOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Operators.StartsWithOperator BuildTyped()
        {
            return new ExpressionFramework.Domain.Operators.StartsWithOperator();
        }

        partial void SetDefaultValues();
    }
    public partial class StringContainsOperatorBuilder : ExpressionFramework.Domain.Builders.OperatorBuilder<StringContainsOperatorBuilder, ExpressionFramework.Domain.Operators.StringContainsOperator>
    {
        public StringContainsOperatorBuilder(ExpressionFramework.Domain.Operators.StringContainsOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public StringContainsOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Operators.StringContainsOperator BuildTyped()
        {
            return new ExpressionFramework.Domain.Operators.StringContainsOperator();
        }

        partial void SetDefaultValues();
    }
    public partial class StringNotContainsOperatorBuilder : ExpressionFramework.Domain.Builders.OperatorBuilder<StringNotContainsOperatorBuilder, ExpressionFramework.Domain.Operators.StringNotContainsOperator>
    {
        public StringNotContainsOperatorBuilder(ExpressionFramework.Domain.Operators.StringNotContainsOperator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public StringNotContainsOperatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Operators.StringNotContainsOperator BuildTyped()
        {
            return new ExpressionFramework.Domain.Operators.StringNotContainsOperator();
        }

        partial void SetDefaultValues();
    }
}
#nullable disable
