// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace ExpressionFramework.Domain.Builders.Expressions
{
    public partial class AggregateExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<AggregateExpressionBuilder, ExpressionFramework.Domain.Expressions.AggregateExpression>
    {
        private System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ExpressionBuilder> _expressions;

        private ExpressionFramework.Domain.Builders.AggregatorBuilder _aggregator;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.IFormatProvider>? _formatProviderExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ExpressionBuilder> Expressions
        {
            get
            {
                return _expressions;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Domain.Builders.ExpressionBuilder>>.Default.Equals(_expressions!, value!);
                _expressions = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expressions));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.AggregatorBuilder Aggregator
        {
            get
            {
                return _aggregator;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.AggregatorBuilder>.Default.Equals(_aggregator!, value!);
                _aggregator = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Aggregator));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.IFormatProvider>? FormatProviderExpression
        {
            get
            {
                return _formatProviderExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.IFormatProvider>>.Default.Equals(_formatProviderExpression!, value!);
                _formatProviderExpression = value;
                if (hasChanged) HandlePropertyChanged(nameof(FormatProviderExpression));
            }
        }

        public AggregateExpressionBuilder(ExpressionFramework.Domain.Expressions.AggregateExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expressions = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ExpressionBuilder>();
            if (source.Expressions is not null) foreach (var item in source.Expressions.Select(x => x.ToBuilder())) _expressions.Add(item);
            _aggregator = source.Aggregator?.ToBuilder()!;
            _formatProviderExpression = source.FormatProviderExpression?.ToTypedBuilder()!;
        }

        public AggregateExpressionBuilder() : base()
        {
            _expressions = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ExpressionBuilder>();
            _aggregator = default(ExpressionFramework.Domain.Builders.AggregatorBuilder)!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.AggregateExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.AggregateExpression(Expressions.Select(x => x.Build()!).ToList().AsReadOnly(), Aggregator?.Build()!, FormatProviderExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.AggregateExpressionBuilder AddExpressions(System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.Builders.ExpressionBuilder> expressions)
        {
            if (expressions is null) throw new System.ArgumentNullException(nameof(expressions));
            return AddExpressions(expressions.ToArray());
        }

        public ExpressionFramework.Domain.Builders.Expressions.AggregateExpressionBuilder AddExpressions(params ExpressionFramework.Domain.Builders.ExpressionBuilder[] expressions)
        {
            if (expressions is null) throw new System.ArgumentNullException(nameof(expressions));
            foreach (var item in expressions) Expressions.Add(item);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.AggregateExpressionBuilder WithAggregator(ExpressionFramework.Domain.Builders.AggregatorBuilder aggregator)
        {
            if (aggregator is null) throw new System.ArgumentNullException(nameof(aggregator));
            Aggregator = aggregator;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.AggregateExpressionBuilder WithFormatProviderExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.IFormatProvider>? formatProviderExpression)
        {
            FormatProviderExpression = formatProviderExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.AggregateExpressionBuilder AddExpressions(System.Collections.Generic.IEnumerable<object> expressions)
        {
            if (expressions is null) throw new System.ArgumentNullException(nameof(expressions));
            return AddExpressions(expressions.ToArray());
        }

        public ExpressionFramework.Domain.Builders.Expressions.AggregateExpressionBuilder AddExpressions(params object[] expressions)
        {
            if (expressions is null) throw new System.ArgumentNullException(nameof(expressions));
            return AddExpressions(expressions.Select(x => new ExpressionFramework.Domain.Builders.Expressions.ConstantExpressionBuilder().WithValue(x)));
        }

        public ExpressionFramework.Domain.Builders.Expressions.AggregateExpressionBuilder WithFormatProviderExpression(System.IFormatProvider? formatProviderExpression)
        {
            FormatProviderExpression = formatProviderExpression is null ? null : new TypedConstantExpressionBuilder<System.IFormatProvider>().WithValue(formatProviderExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.AggregateExpressionBuilder WithFormatProviderExpression(System.Func<object?, System.IFormatProvider>? formatProviderExpression)
        {
            FormatProviderExpression = formatProviderExpression is null ? null : new TypedDelegateExpressionBuilder<System.IFormatProvider>().WithValue(formatProviderExpression);
            return this;
        }
    }
    public partial class AllExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<AllExpressionBuilder, ExpressionFramework.Domain.Expressions.AllExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool> _predicateExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool> PredicateExpression
        {
            get
            {
                return _predicateExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>>.Default.Equals(_predicateExpression!, value!);
                _predicateExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(PredicateExpression));
            }
        }

        public AllExpressionBuilder(ExpressionFramework.Domain.Expressions.AllExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _predicateExpression = source.PredicateExpression.ToTypedBuilder();
        }

        public AllExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Collections.IEnumerable>()!;
            _predicateExpression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Boolean>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.AllExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.AllExpression(Expression.Build(), PredicateExpression.Build());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.AllExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.AllExpressionBuilder WithPredicateExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool> predicateExpression)
        {
            if (predicateExpression is null) throw new System.ArgumentNullException(nameof(predicateExpression));
            PredicateExpression = predicateExpression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<bool> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.AllExpressionBuilder WithExpression(System.Collections.IEnumerable expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.AllExpressionBuilder WithExpression(System.Func<object?, System.Collections.IEnumerable> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.AllExpressionBuilder WithPredicateExpression(bool predicateExpression)
        {
            PredicateExpression = new TypedConstantExpressionBuilder<System.Boolean>().WithValue(predicateExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.AllExpressionBuilder WithPredicateExpression(System.Func<object?, bool> predicateExpression)
        {
            PredicateExpression = new TypedDelegateExpressionBuilder<System.Boolean>().WithValue(predicateExpression);
            return this;
        }
    }
    public partial class AndExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<AndExpressionBuilder, ExpressionFramework.Domain.Expressions.AndExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool> _firstExpression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool> _secondExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool> FirstExpression
        {
            get
            {
                return _firstExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>>.Default.Equals(_firstExpression!, value!);
                _firstExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(FirstExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool> SecondExpression
        {
            get
            {
                return _secondExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>>.Default.Equals(_secondExpression!, value!);
                _secondExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SecondExpression));
            }
        }

        public AndExpressionBuilder(ExpressionFramework.Domain.Expressions.AndExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _firstExpression = source.FirstExpression.ToTypedBuilder();
            _secondExpression = source.SecondExpression.ToTypedBuilder();
        }

        public AndExpressionBuilder() : base()
        {
            _firstExpression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Boolean>()!;
            _secondExpression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Boolean>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.AndExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.AndExpression(FirstExpression.Build(), SecondExpression.Build());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.AndExpressionBuilder WithFirstExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool> firstExpression)
        {
            if (firstExpression is null) throw new System.ArgumentNullException(nameof(firstExpression));
            FirstExpression = firstExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.AndExpressionBuilder WithSecondExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool> secondExpression)
        {
            if (secondExpression is null) throw new System.ArgumentNullException(nameof(secondExpression));
            SecondExpression = secondExpression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<bool> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.AndExpressionBuilder WithFirstExpression(bool firstExpression)
        {
            FirstExpression = new TypedConstantExpressionBuilder<System.Boolean>().WithValue(firstExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.AndExpressionBuilder WithFirstExpression(System.Func<object?, bool> firstExpression)
        {
            FirstExpression = new TypedDelegateExpressionBuilder<System.Boolean>().WithValue(firstExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.AndExpressionBuilder WithSecondExpression(bool secondExpression)
        {
            SecondExpression = new TypedConstantExpressionBuilder<System.Boolean>().WithValue(secondExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.AndExpressionBuilder WithSecondExpression(System.Func<object?, bool> secondExpression)
        {
            SecondExpression = new TypedDelegateExpressionBuilder<System.Boolean>().WithValue(secondExpression);
            return this;
        }
    }
    public partial class AnyExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<AnyExpressionBuilder, ExpressionFramework.Domain.Expressions.AnyExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>? _predicateExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>? PredicateExpression
        {
            get
            {
                return _predicateExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>>.Default.Equals(_predicateExpression!, value!);
                _predicateExpression = value;
                if (hasChanged) HandlePropertyChanged(nameof(PredicateExpression));
            }
        }

        public AnyExpressionBuilder(ExpressionFramework.Domain.Expressions.AnyExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _predicateExpression = source.PredicateExpression?.ToTypedBuilder()!;
        }

        public AnyExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Collections.IEnumerable>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.AnyExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.AnyExpression(Expression.Build(), PredicateExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.AnyExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.AnyExpressionBuilder WithPredicateExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>? predicateExpression)
        {
            PredicateExpression = predicateExpression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<bool> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.AnyExpressionBuilder WithExpression(System.Collections.IEnumerable expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.AnyExpressionBuilder WithExpression(System.Func<object?, System.Collections.IEnumerable> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.AnyExpressionBuilder WithPredicateExpression(bool? predicateExpression)
        {
            PredicateExpression = predicateExpression is null ? null : new TypedConstantExpressionBuilder<System.Boolean>().WithValue(predicateExpression.Value);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.AnyExpressionBuilder WithPredicateExpression(System.Func<object?, bool>? predicateExpression)
        {
            PredicateExpression = predicateExpression is null ? null : new TypedDelegateExpressionBuilder<System.Boolean>().WithValue(predicateExpression);
            return this;
        }
    }
    public partial class CastExpressionBuilder<T> : ExpressionFramework.Domain.Builders.ExpressionBuilder<CastExpressionBuilder<T>, ExpressionFramework.Domain.Expressions.CastExpression<T>>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<T>
    {
        private ExpressionFramework.Domain.Builders.ExpressionBuilder _sourceExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder SourceExpression
        {
            get
            {
                return _sourceExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_sourceExpression!, value!);
                _sourceExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SourceExpression));
            }
        }

        public CastExpressionBuilder(ExpressionFramework.Domain.Expressions.CastExpression<T> source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _sourceExpression = source.SourceExpression?.ToBuilder()!;
        }

        public CastExpressionBuilder() : base()
        {
            _sourceExpression = default(ExpressionFramework.Domain.Builders.ExpressionBuilder)!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.CastExpression<T> BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.CastExpression<T>(SourceExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.CastExpressionBuilder<T> WithSourceExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder sourceExpression)
        {
            if (sourceExpression is null) throw new System.ArgumentNullException(nameof(sourceExpression));
            SourceExpression = sourceExpression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<T> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<T>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.CastExpressionBuilder<T> WithSourceExpression(object sourceExpression)
        {
            SourceExpression = new ConstantExpressionBuilder().WithValue(sourceExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.CastExpressionBuilder<T> WithSourceExpression(System.Func<object?, object> sourceExpression)
        {
            SourceExpression = new DelegateExpressionBuilder().WithValue(sourceExpression);
            return this;
        }
    }
    public partial class ChainedExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<ChainedExpressionBuilder, ExpressionFramework.Domain.Expressions.ChainedExpression>
    {
        private System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ExpressionBuilder> _expressions;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ExpressionBuilder> Expressions
        {
            get
            {
                return _expressions;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Domain.Builders.ExpressionBuilder>>.Default.Equals(_expressions!, value!);
                _expressions = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expressions));
            }
        }

        public ChainedExpressionBuilder(ExpressionFramework.Domain.Expressions.ChainedExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expressions = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ExpressionBuilder>();
            if (source.Expressions is not null) foreach (var item in source.Expressions.Select(x => x.ToBuilder())) _expressions.Add(item);
        }

        public ChainedExpressionBuilder() : base()
        {
            _expressions = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ExpressionBuilder>();
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.ChainedExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.ChainedExpression(Expressions.Select(x => x.Build()!).ToList().AsReadOnly());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.ChainedExpressionBuilder AddExpressions(System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.Builders.ExpressionBuilder> expressions)
        {
            if (expressions is null) throw new System.ArgumentNullException(nameof(expressions));
            return AddExpressions(expressions.ToArray());
        }

        public ExpressionFramework.Domain.Builders.Expressions.ChainedExpressionBuilder AddExpressions(params ExpressionFramework.Domain.Builders.ExpressionBuilder[] expressions)
        {
            if (expressions is null) throw new System.ArgumentNullException(nameof(expressions));
            foreach (var item in expressions) Expressions.Add(item);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ChainedExpressionBuilder AddExpressions(System.Collections.Generic.IEnumerable<object> expressions)
        {
            if (expressions is null) throw new System.ArgumentNullException(nameof(expressions));
            return AddExpressions(expressions.ToArray());
        }

        public ExpressionFramework.Domain.Builders.Expressions.ChainedExpressionBuilder AddExpressions(params object[] expressions)
        {
            if (expressions is null) throw new System.ArgumentNullException(nameof(expressions));
            return AddExpressions(expressions.Select(x => new ExpressionFramework.Domain.Builders.Expressions.ConstantExpressionBuilder().WithValue(x)));
        }
    }
    public partial class CompoundExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<CompoundExpressionBuilder, ExpressionFramework.Domain.Expressions.CompoundExpression>
    {
        private ExpressionFramework.Domain.Builders.ExpressionBuilder _firstExpression;

        private ExpressionFramework.Domain.Builders.ExpressionBuilder _secondExpression;

        private ExpressionFramework.Domain.Builders.AggregatorBuilder _aggregator;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.IFormatProvider>? _formatProviderExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder FirstExpression
        {
            get
            {
                return _firstExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_firstExpression!, value!);
                _firstExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(FirstExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder SecondExpression
        {
            get
            {
                return _secondExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_secondExpression!, value!);
                _secondExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SecondExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.AggregatorBuilder Aggregator
        {
            get
            {
                return _aggregator;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.AggregatorBuilder>.Default.Equals(_aggregator!, value!);
                _aggregator = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Aggregator));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.IFormatProvider>? FormatProviderExpression
        {
            get
            {
                return _formatProviderExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.IFormatProvider>>.Default.Equals(_formatProviderExpression!, value!);
                _formatProviderExpression = value;
                if (hasChanged) HandlePropertyChanged(nameof(FormatProviderExpression));
            }
        }

        public CompoundExpressionBuilder(ExpressionFramework.Domain.Expressions.CompoundExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _firstExpression = source.FirstExpression?.ToBuilder()!;
            _secondExpression = source.SecondExpression?.ToBuilder()!;
            _aggregator = source.Aggregator?.ToBuilder()!;
            _formatProviderExpression = source.FormatProviderExpression?.ToTypedBuilder()!;
        }

        public CompoundExpressionBuilder() : base()
        {
            _firstExpression = default(ExpressionFramework.Domain.Builders.ExpressionBuilder)!;
            _secondExpression = default(ExpressionFramework.Domain.Builders.ExpressionBuilder)!;
            _aggregator = default(ExpressionFramework.Domain.Builders.AggregatorBuilder)!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.CompoundExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.CompoundExpression(FirstExpression?.Build()!, SecondExpression?.Build()!, Aggregator?.Build()!, FormatProviderExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.CompoundExpressionBuilder WithFirstExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder firstExpression)
        {
            if (firstExpression is null) throw new System.ArgumentNullException(nameof(firstExpression));
            FirstExpression = firstExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.CompoundExpressionBuilder WithSecondExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder secondExpression)
        {
            if (secondExpression is null) throw new System.ArgumentNullException(nameof(secondExpression));
            SecondExpression = secondExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.CompoundExpressionBuilder WithAggregator(ExpressionFramework.Domain.Builders.AggregatorBuilder aggregator)
        {
            if (aggregator is null) throw new System.ArgumentNullException(nameof(aggregator));
            Aggregator = aggregator;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.CompoundExpressionBuilder WithFormatProviderExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.IFormatProvider>? formatProviderExpression)
        {
            FormatProviderExpression = formatProviderExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.CompoundExpressionBuilder WithFirstExpression(object firstExpression)
        {
            FirstExpression = new ConstantExpressionBuilder().WithValue(firstExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.CompoundExpressionBuilder WithFirstExpression(System.Func<object?, object> firstExpression)
        {
            FirstExpression = new DelegateExpressionBuilder().WithValue(firstExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.CompoundExpressionBuilder WithSecondExpression(object secondExpression)
        {
            SecondExpression = new ConstantExpressionBuilder().WithValue(secondExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.CompoundExpressionBuilder WithSecondExpression(System.Func<object?, object> secondExpression)
        {
            SecondExpression = new DelegateExpressionBuilder().WithValue(secondExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.CompoundExpressionBuilder WithFormatProviderExpression(System.IFormatProvider? formatProviderExpression)
        {
            FormatProviderExpression = formatProviderExpression is null ? null : new TypedConstantExpressionBuilder<System.IFormatProvider>().WithValue(formatProviderExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.CompoundExpressionBuilder WithFormatProviderExpression(System.Func<object?, System.IFormatProvider>? formatProviderExpression)
        {
            FormatProviderExpression = formatProviderExpression is null ? null : new TypedDelegateExpressionBuilder<System.IFormatProvider>().WithValue(formatProviderExpression);
            return this;
        }
    }
    public partial class ConstantExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<ConstantExpressionBuilder, ExpressionFramework.Domain.Expressions.ConstantExpression>
    {
        private object? _value;

        public object? Value
        {
            get
            {
                return _value;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Object>.Default.Equals(_value!, value!);
                _value = value;
                if (hasChanged) HandlePropertyChanged(nameof(Value));
            }
        }

        public ConstantExpressionBuilder(ExpressionFramework.Domain.Expressions.ConstantExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _value = source.Value;
        }

        public ConstantExpressionBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.ConstantExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.ConstantExpression(Value);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.ConstantExpressionBuilder WithValue(object? value)
        {
            Value = value;
            return this;
        }
    }
    public partial class ConstantResultExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<ConstantResultExpressionBuilder, ExpressionFramework.Domain.Expressions.ConstantResultExpression>
    {
        private CrossCutting.Common.Results.Result _value;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public CrossCutting.Common.Results.Result Value
        {
            get
            {
                return _value;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Common.Results.Result>.Default.Equals(_value!, value!);
                _value = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Value));
            }
        }

        public ConstantResultExpressionBuilder(ExpressionFramework.Domain.Expressions.ConstantResultExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _value = source.Value;
        }

        public ConstantResultExpressionBuilder() : base()
        {
            _value = default(CrossCutting.Common.Results.Result)!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.ConstantResultExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.ConstantResultExpression(Value);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.ConstantResultExpressionBuilder WithValue(CrossCutting.Common.Results.Result value)
        {
            if (value is null) throw new System.ArgumentNullException(nameof(value));
            Value = value;
            return this;
        }
    }
    public partial class ContextExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<ContextExpressionBuilder, ExpressionFramework.Domain.Expressions.ContextExpression>
    {
        public ContextExpressionBuilder(ExpressionFramework.Domain.Expressions.ContextExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public ContextExpressionBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.ContextExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.ContextExpression();
        }

        partial void SetDefaultValues();
    }
    public partial class CountExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<CountExpressionBuilder, ExpressionFramework.Domain.Expressions.CountExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>? _predicateExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>? PredicateExpression
        {
            get
            {
                return _predicateExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>>.Default.Equals(_predicateExpression!, value!);
                _predicateExpression = value;
                if (hasChanged) HandlePropertyChanged(nameof(PredicateExpression));
            }
        }

        public CountExpressionBuilder(ExpressionFramework.Domain.Expressions.CountExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _predicateExpression = source.PredicateExpression?.ToTypedBuilder()!;
        }

        public CountExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Collections.IEnumerable>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.CountExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.CountExpression(Expression.Build(), PredicateExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.CountExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.CountExpressionBuilder WithPredicateExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>? predicateExpression)
        {
            PredicateExpression = predicateExpression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<int> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Int32>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.CountExpressionBuilder WithExpression(System.Collections.IEnumerable expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.CountExpressionBuilder WithExpression(System.Func<object?, System.Collections.IEnumerable> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.CountExpressionBuilder WithPredicateExpression(bool? predicateExpression)
        {
            PredicateExpression = predicateExpression is null ? null : new TypedConstantExpressionBuilder<System.Boolean>().WithValue(predicateExpression.Value);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.CountExpressionBuilder WithPredicateExpression(System.Func<object?, bool>? predicateExpression)
        {
            PredicateExpression = predicateExpression is null ? null : new TypedDelegateExpressionBuilder<System.Boolean>().WithValue(predicateExpression);
            return this;
        }
    }
    public partial class DayExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<DayExpressionBuilder, ExpressionFramework.Domain.Expressions.DayExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.DateTime> _expression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.DateTime> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.DateTime>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        public DayExpressionBuilder(ExpressionFramework.Domain.Expressions.DayExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
        }

        public DayExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.DateTime>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.DayExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.DayExpression(Expression.Build());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.DayExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.DateTime> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<int> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Int32>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.DayExpressionBuilder WithExpression(System.DateTime expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.DateTime>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.DayExpressionBuilder WithExpression(System.Func<object?, System.DateTime> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.DateTime>().WithValue(expression);
            return this;
        }
    }
    public partial class DefaultExpressionBuilder<T> : ExpressionFramework.Domain.Builders.ExpressionBuilder<DefaultExpressionBuilder<T>, ExpressionFramework.Domain.Expressions.DefaultExpression<T>>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<T>
    {
        public DefaultExpressionBuilder(ExpressionFramework.Domain.Expressions.DefaultExpression<T> source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public DefaultExpressionBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.DefaultExpression<T> BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.DefaultExpression<T>();
        }

        partial void SetDefaultValues();

        ExpressionFramework.Domain.Contracts.ITypedExpression<T> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<T>.Build()
        {
            return BuildTyped();
        }
    }
    public partial class DelegateExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<DelegateExpressionBuilder, ExpressionFramework.Domain.Expressions.DelegateExpression>
    {
        private System.Func<object?,object?> _value;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Func<object?,object?> Value
        {
            get
            {
                return _value;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Func<System.Object?,System.Object?>>.Default.Equals(_value!, value!);
                _value = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Value));
            }
        }

        public DelegateExpressionBuilder(ExpressionFramework.Domain.Expressions.DelegateExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _value = source.Value;
        }

        public DelegateExpressionBuilder() : base()
        {
            _value = default(System.Func<System.Object?,System.Object?>)!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.DelegateExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.DelegateExpression(Value);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.DelegateExpressionBuilder WithValue(System.Func<object?,object?> value)
        {
            if (value is null) throw new System.ArgumentNullException(nameof(value));
            Value = value;
            return this;
        }
    }
    public partial class DelegateResultExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<DelegateResultExpressionBuilder, ExpressionFramework.Domain.Expressions.DelegateResultExpression>
    {
        private System.Func<object?,CrossCutting.Common.Results.Result<object?>> _result;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Func<object?,CrossCutting.Common.Results.Result<object?>> Result
        {
            get
            {
                return _result;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Func<System.Object?,CrossCutting.Common.Results.Result<System.Object?>>>.Default.Equals(_result!, value!);
                _result = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Result));
            }
        }

        public DelegateResultExpressionBuilder(ExpressionFramework.Domain.Expressions.DelegateResultExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _result = source.Result;
        }

        public DelegateResultExpressionBuilder() : base()
        {
            _result = default(System.Func<System.Object?,CrossCutting.Common.Results.Result<System.Object?>>)!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.DelegateResultExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.DelegateResultExpression(Result);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.DelegateResultExpressionBuilder WithResult(System.Func<object?,CrossCutting.Common.Results.Result<object?>> result)
        {
            if (result is null) throw new System.ArgumentNullException(nameof(result));
            Result = result;
            return this;
        }
    }
    public partial class ElementAtExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<ElementAtExpressionBuilder, ExpressionFramework.Domain.Expressions.ElementAtExpression>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int> _indexExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int> IndexExpression
        {
            get
            {
                return _indexExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Int32>>.Default.Equals(_indexExpression!, value!);
                _indexExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(IndexExpression));
            }
        }

        public ElementAtExpressionBuilder(ExpressionFramework.Domain.Expressions.ElementAtExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _indexExpression = source.IndexExpression.ToTypedBuilder();
        }

        public ElementAtExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Collections.IEnumerable>()!;
            _indexExpression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Int32>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.ElementAtExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.ElementAtExpression(Expression.Build(), IndexExpression.Build());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.ElementAtExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ElementAtExpressionBuilder WithIndexExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int> indexExpression)
        {
            if (indexExpression is null) throw new System.ArgumentNullException(nameof(indexExpression));
            IndexExpression = indexExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ElementAtExpressionBuilder WithExpression(System.Collections.IEnumerable expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ElementAtExpressionBuilder WithExpression(System.Func<object?, System.Collections.IEnumerable> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ElementAtExpressionBuilder WithIndexExpression(int indexExpression)
        {
            IndexExpression = new TypedConstantExpressionBuilder<System.Int32>().WithValue(indexExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ElementAtExpressionBuilder WithIndexExpression(System.Func<object?, int> indexExpression)
        {
            IndexExpression = new TypedDelegateExpressionBuilder<System.Int32>().WithValue(indexExpression);
            return this;
        }
    }
    public partial class ElementAtOrDefaultExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<ElementAtOrDefaultExpressionBuilder, ExpressionFramework.Domain.Expressions.ElementAtOrDefaultExpression>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int> _indexExpression;

        private ExpressionFramework.Domain.Builders.ExpressionBuilder? _defaultExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int> IndexExpression
        {
            get
            {
                return _indexExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Int32>>.Default.Equals(_indexExpression!, value!);
                _indexExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(IndexExpression));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder? DefaultExpression
        {
            get
            {
                return _defaultExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_defaultExpression!, value!);
                _defaultExpression = value;
                if (hasChanged) HandlePropertyChanged(nameof(DefaultExpression));
            }
        }

        public ElementAtOrDefaultExpressionBuilder(ExpressionFramework.Domain.Expressions.ElementAtOrDefaultExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _indexExpression = source.IndexExpression.ToTypedBuilder();
            _defaultExpression = source.DefaultExpression?.ToBuilder()!;
        }

        public ElementAtOrDefaultExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Collections.IEnumerable>()!;
            _indexExpression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Int32>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.ElementAtOrDefaultExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.ElementAtOrDefaultExpression(Expression.Build(), IndexExpression.Build(), DefaultExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.ElementAtOrDefaultExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ElementAtOrDefaultExpressionBuilder WithIndexExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int> indexExpression)
        {
            if (indexExpression is null) throw new System.ArgumentNullException(nameof(indexExpression));
            IndexExpression = indexExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ElementAtOrDefaultExpressionBuilder WithDefaultExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder? defaultExpression)
        {
            DefaultExpression = defaultExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ElementAtOrDefaultExpressionBuilder WithDefaultExpression(object? defaultExpression)
        {
            DefaultExpression = defaultExpression is null ? null : new ConstantExpressionBuilder().WithValue(defaultExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ElementAtOrDefaultExpressionBuilder WithDefaultExpression(System.Func<object?, object>? defaultExpression)
        {
            DefaultExpression = defaultExpression is null ? null : new DelegateExpressionBuilder().WithValue(defaultExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ElementAtOrDefaultExpressionBuilder WithExpression(System.Collections.IEnumerable expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ElementAtOrDefaultExpressionBuilder WithExpression(System.Func<object?, System.Collections.IEnumerable> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ElementAtOrDefaultExpressionBuilder WithIndexExpression(int indexExpression)
        {
            IndexExpression = new TypedConstantExpressionBuilder<System.Int32>().WithValue(indexExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ElementAtOrDefaultExpressionBuilder WithIndexExpression(System.Func<object?, int> indexExpression)
        {
            IndexExpression = new TypedDelegateExpressionBuilder<System.Int32>().WithValue(indexExpression);
            return this;
        }
    }
    public partial class EmptyExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<EmptyExpressionBuilder, ExpressionFramework.Domain.Expressions.EmptyExpression>
    {
        public EmptyExpressionBuilder(ExpressionFramework.Domain.Expressions.EmptyExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public EmptyExpressionBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.EmptyExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.EmptyExpression();
        }

        partial void SetDefaultValues();
    }
    public partial class EqualsExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<EqualsExpressionBuilder, ExpressionFramework.Domain.Expressions.EqualsExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>
    {
        private ExpressionFramework.Domain.Builders.ExpressionBuilder _firstExpression;

        private ExpressionFramework.Domain.Builders.ExpressionBuilder _secondExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder FirstExpression
        {
            get
            {
                return _firstExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_firstExpression!, value!);
                _firstExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(FirstExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder SecondExpression
        {
            get
            {
                return _secondExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_secondExpression!, value!);
                _secondExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SecondExpression));
            }
        }

        public EqualsExpressionBuilder(ExpressionFramework.Domain.Expressions.EqualsExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _firstExpression = source.FirstExpression?.ToBuilder()!;
            _secondExpression = source.SecondExpression?.ToBuilder()!;
        }

        public EqualsExpressionBuilder() : base()
        {
            _firstExpression = default(ExpressionFramework.Domain.Builders.ExpressionBuilder)!;
            _secondExpression = default(ExpressionFramework.Domain.Builders.ExpressionBuilder)!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.EqualsExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.EqualsExpression(FirstExpression?.Build()!, SecondExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.EqualsExpressionBuilder WithFirstExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder firstExpression)
        {
            if (firstExpression is null) throw new System.ArgumentNullException(nameof(firstExpression));
            FirstExpression = firstExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.EqualsExpressionBuilder WithSecondExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder secondExpression)
        {
            if (secondExpression is null) throw new System.ArgumentNullException(nameof(secondExpression));
            SecondExpression = secondExpression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<bool> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.EqualsExpressionBuilder WithFirstExpression(object firstExpression)
        {
            FirstExpression = new ConstantExpressionBuilder().WithValue(firstExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.EqualsExpressionBuilder WithFirstExpression(System.Func<object?, object> firstExpression)
        {
            FirstExpression = new DelegateExpressionBuilder().WithValue(firstExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.EqualsExpressionBuilder WithSecondExpression(object secondExpression)
        {
            SecondExpression = new ConstantExpressionBuilder().WithValue(secondExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.EqualsExpressionBuilder WithSecondExpression(System.Func<object?, object> secondExpression)
        {
            SecondExpression = new DelegateExpressionBuilder().WithValue(secondExpression);
            return this;
        }
    }
    public partial class ErrorExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<ErrorExpressionBuilder, ExpressionFramework.Domain.Expressions.ErrorExpression>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> _errorMessageExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> ErrorMessageExpression
        {
            get
            {
                return _errorMessageExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>>.Default.Equals(_errorMessageExpression!, value!);
                _errorMessageExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(ErrorMessageExpression));
            }
        }

        public ErrorExpressionBuilder(ExpressionFramework.Domain.Expressions.ErrorExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _errorMessageExpression = source.ErrorMessageExpression.ToTypedBuilder();
        }

        public ErrorExpressionBuilder() : base()
        {
            _errorMessageExpression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.String>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.ErrorExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.ErrorExpression(ErrorMessageExpression.Build());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.ErrorExpressionBuilder WithErrorMessageExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> errorMessageExpression)
        {
            if (errorMessageExpression is null) throw new System.ArgumentNullException(nameof(errorMessageExpression));
            ErrorMessageExpression = errorMessageExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ErrorExpressionBuilder WithErrorMessageExpression(string errorMessageExpression)
        {
            ErrorMessageExpression = new TypedConstantExpressionBuilder<System.String>().WithValue(errorMessageExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ErrorExpressionBuilder WithErrorMessageExpression(System.Func<object?, string> errorMessageExpression)
        {
            ErrorMessageExpression = new TypedDelegateExpressionBuilder<System.String>().WithValue(errorMessageExpression);
            return this;
        }
    }
    public partial class EvaluatableExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<EvaluatableExpressionBuilder, ExpressionFramework.Domain.Expressions.EvaluatableExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>
    {
        private ExpressionFramework.Domain.Builders.EvaluatableBuilder _condition;

        private ExpressionFramework.Domain.Builders.ExpressionBuilder _expression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.EvaluatableBuilder Condition
        {
            get
            {
                return _condition;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.EvaluatableBuilder>.Default.Equals(_condition!, value!);
                _condition = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Condition));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        public EvaluatableExpressionBuilder(ExpressionFramework.Domain.Expressions.EvaluatableExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _condition = source.Condition?.ToBuilder()!;
            _expression = source.Expression?.ToBuilder()!;
        }

        public EvaluatableExpressionBuilder() : base()
        {
            _condition = default(ExpressionFramework.Domain.Builders.EvaluatableBuilder)!;
            _expression = default(ExpressionFramework.Domain.Builders.ExpressionBuilder)!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.EvaluatableExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.EvaluatableExpression(Condition?.Build()!, Expression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.EvaluatableExpressionBuilder WithCondition(ExpressionFramework.Domain.Builders.EvaluatableBuilder condition)
        {
            if (condition is null) throw new System.ArgumentNullException(nameof(condition));
            Condition = condition;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.EvaluatableExpressionBuilder WithExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<bool> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.EvaluatableExpressionBuilder WithExpression(object expression)
        {
            Expression = new ConstantExpressionBuilder().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.EvaluatableExpressionBuilder WithExpression(System.Func<object?, object> expression)
        {
            Expression = new DelegateExpressionBuilder().WithValue(expression);
            return this;
        }
    }
    public partial class FalseExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<FalseExpressionBuilder, ExpressionFramework.Domain.Expressions.FalseExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>
    {
        public FalseExpressionBuilder(ExpressionFramework.Domain.Expressions.FalseExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public FalseExpressionBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.FalseExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.FalseExpression();
        }

        partial void SetDefaultValues();

        ExpressionFramework.Domain.Contracts.ITypedExpression<bool> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>.Build()
        {
            return BuildTyped();
        }
    }
    public partial class FieldExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<FieldExpressionBuilder, ExpressionFramework.Domain.Expressions.FieldExpression>
    {
        private ExpressionFramework.Domain.Builders.ExpressionBuilder _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> _fieldNameExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> FieldNameExpression
        {
            get
            {
                return _fieldNameExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>>.Default.Equals(_fieldNameExpression!, value!);
                _fieldNameExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(FieldNameExpression));
            }
        }

        public FieldExpressionBuilder(ExpressionFramework.Domain.Expressions.FieldExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression?.ToBuilder()!;
            _fieldNameExpression = source.FieldNameExpression.ToTypedBuilder();
        }

        public FieldExpressionBuilder() : base()
        {
            _expression = default(ExpressionFramework.Domain.Builders.ExpressionBuilder)!;
            _fieldNameExpression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.String>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.FieldExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.FieldExpression(Expression?.Build()!, FieldNameExpression.Build());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.FieldExpressionBuilder WithExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.FieldExpressionBuilder WithFieldNameExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> fieldNameExpression)
        {
            if (fieldNameExpression is null) throw new System.ArgumentNullException(nameof(fieldNameExpression));
            FieldNameExpression = fieldNameExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.FieldExpressionBuilder WithExpression(object expression)
        {
            Expression = new ConstantExpressionBuilder().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.FieldExpressionBuilder WithExpression(System.Func<object?, object> expression)
        {
            Expression = new DelegateExpressionBuilder().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.FieldExpressionBuilder WithFieldNameExpression(string fieldNameExpression)
        {
            FieldNameExpression = new TypedConstantExpressionBuilder<System.String>().WithValue(fieldNameExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.FieldExpressionBuilder WithFieldNameExpression(System.Func<object?, string> fieldNameExpression)
        {
            FieldNameExpression = new TypedDelegateExpressionBuilder<System.String>().WithValue(fieldNameExpression);
            return this;
        }
    }
    public partial class FirstExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<FirstExpressionBuilder, ExpressionFramework.Domain.Expressions.FirstExpression>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>? _predicateExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>? PredicateExpression
        {
            get
            {
                return _predicateExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>>.Default.Equals(_predicateExpression!, value!);
                _predicateExpression = value;
                if (hasChanged) HandlePropertyChanged(nameof(PredicateExpression));
            }
        }

        public FirstExpressionBuilder(ExpressionFramework.Domain.Expressions.FirstExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _predicateExpression = source.PredicateExpression?.ToTypedBuilder()!;
        }

        public FirstExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Collections.IEnumerable>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.FirstExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.FirstExpression(Expression.Build(), PredicateExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.FirstExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.FirstExpressionBuilder WithPredicateExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>? predicateExpression)
        {
            PredicateExpression = predicateExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.FirstExpressionBuilder WithExpression(System.Collections.IEnumerable expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.FirstExpressionBuilder WithExpression(System.Func<object?, System.Collections.IEnumerable> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.FirstExpressionBuilder WithPredicateExpression(bool? predicateExpression)
        {
            PredicateExpression = predicateExpression is null ? null : new TypedConstantExpressionBuilder<System.Boolean>().WithValue(predicateExpression.Value);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.FirstExpressionBuilder WithPredicateExpression(System.Func<object?, bool>? predicateExpression)
        {
            PredicateExpression = predicateExpression is null ? null : new TypedDelegateExpressionBuilder<System.Boolean>().WithValue(predicateExpression);
            return this;
        }
    }
    public partial class FirstOrDefaultExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<FirstOrDefaultExpressionBuilder, ExpressionFramework.Domain.Expressions.FirstOrDefaultExpression>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>? _predicateExpression;

        private ExpressionFramework.Domain.Builders.ExpressionBuilder? _defaultExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>? PredicateExpression
        {
            get
            {
                return _predicateExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>>.Default.Equals(_predicateExpression!, value!);
                _predicateExpression = value;
                if (hasChanged) HandlePropertyChanged(nameof(PredicateExpression));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder? DefaultExpression
        {
            get
            {
                return _defaultExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_defaultExpression!, value!);
                _defaultExpression = value;
                if (hasChanged) HandlePropertyChanged(nameof(DefaultExpression));
            }
        }

        public FirstOrDefaultExpressionBuilder(ExpressionFramework.Domain.Expressions.FirstOrDefaultExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _predicateExpression = source.PredicateExpression?.ToTypedBuilder()!;
            _defaultExpression = source.DefaultExpression?.ToBuilder()!;
        }

        public FirstOrDefaultExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Collections.IEnumerable>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.FirstOrDefaultExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.FirstOrDefaultExpression(Expression.Build(), PredicateExpression?.Build()!, DefaultExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.FirstOrDefaultExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.FirstOrDefaultExpressionBuilder WithPredicateExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>? predicateExpression)
        {
            PredicateExpression = predicateExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.FirstOrDefaultExpressionBuilder WithDefaultExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder? defaultExpression)
        {
            DefaultExpression = defaultExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.FirstOrDefaultExpressionBuilder WithDefaultExpression(object? defaultExpression)
        {
            DefaultExpression = defaultExpression is null ? null : new ConstantExpressionBuilder().WithValue(defaultExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.FirstOrDefaultExpressionBuilder WithDefaultExpression(System.Func<object?, object>? defaultExpression)
        {
            DefaultExpression = defaultExpression is null ? null : new DelegateExpressionBuilder().WithValue(defaultExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.FirstOrDefaultExpressionBuilder WithExpression(System.Collections.IEnumerable expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.FirstOrDefaultExpressionBuilder WithExpression(System.Func<object?, System.Collections.IEnumerable> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.FirstOrDefaultExpressionBuilder WithPredicateExpression(bool? predicateExpression)
        {
            PredicateExpression = predicateExpression is null ? null : new TypedConstantExpressionBuilder<System.Boolean>().WithValue(predicateExpression.Value);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.FirstOrDefaultExpressionBuilder WithPredicateExpression(System.Func<object?, bool>? predicateExpression)
        {
            PredicateExpression = predicateExpression is null ? null : new TypedDelegateExpressionBuilder<System.Boolean>().WithValue(predicateExpression);
            return this;
        }
    }
    public partial class GroupByExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<GroupByExpressionBuilder, ExpressionFramework.Domain.Expressions.GroupByExpression>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> _expression;

        private ExpressionFramework.Domain.Builders.ExpressionBuilder _keySelectorExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder KeySelectorExpression
        {
            get
            {
                return _keySelectorExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_keySelectorExpression!, value!);
                _keySelectorExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(KeySelectorExpression));
            }
        }

        public GroupByExpressionBuilder(ExpressionFramework.Domain.Expressions.GroupByExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _keySelectorExpression = source.KeySelectorExpression?.ToBuilder()!;
        }

        public GroupByExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Collections.IEnumerable>()!;
            _keySelectorExpression = default(ExpressionFramework.Domain.Builders.ExpressionBuilder)!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.GroupByExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.GroupByExpression(Expression.Build(), KeySelectorExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.GroupByExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.GroupByExpressionBuilder WithKeySelectorExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder keySelectorExpression)
        {
            if (keySelectorExpression is null) throw new System.ArgumentNullException(nameof(keySelectorExpression));
            KeySelectorExpression = keySelectorExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.GroupByExpressionBuilder WithKeySelectorExpression(object keySelectorExpression)
        {
            KeySelectorExpression = new ConstantExpressionBuilder().WithValue(keySelectorExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.GroupByExpressionBuilder WithKeySelectorExpression(System.Func<object?, object> keySelectorExpression)
        {
            KeySelectorExpression = new DelegateExpressionBuilder().WithValue(keySelectorExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.GroupByExpressionBuilder WithExpression(System.Collections.IEnumerable expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.GroupByExpressionBuilder WithExpression(System.Func<object?, System.Collections.IEnumerable> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }
    }
    public partial class IfExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<IfExpressionBuilder, ExpressionFramework.Domain.Expressions.IfExpression>
    {
        private ExpressionFramework.Domain.Builders.EvaluatableBuilder _condition;

        private ExpressionFramework.Domain.Builders.ExpressionBuilder _resultExpression;

        private ExpressionFramework.Domain.Builders.ExpressionBuilder? _defaultExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.EvaluatableBuilder Condition
        {
            get
            {
                return _condition;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.EvaluatableBuilder>.Default.Equals(_condition!, value!);
                _condition = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Condition));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder ResultExpression
        {
            get
            {
                return _resultExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_resultExpression!, value!);
                _resultExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(ResultExpression));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder? DefaultExpression
        {
            get
            {
                return _defaultExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_defaultExpression!, value!);
                _defaultExpression = value;
                if (hasChanged) HandlePropertyChanged(nameof(DefaultExpression));
            }
        }

        public IfExpressionBuilder(ExpressionFramework.Domain.Expressions.IfExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _condition = source.Condition?.ToBuilder()!;
            _resultExpression = source.ResultExpression?.ToBuilder()!;
            _defaultExpression = source.DefaultExpression?.ToBuilder()!;
        }

        public IfExpressionBuilder() : base()
        {
            _condition = default(ExpressionFramework.Domain.Builders.EvaluatableBuilder)!;
            _resultExpression = default(ExpressionFramework.Domain.Builders.ExpressionBuilder)!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.IfExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.IfExpression(Condition?.Build()!, ResultExpression?.Build()!, DefaultExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.IfExpressionBuilder WithCondition(ExpressionFramework.Domain.Builders.EvaluatableBuilder condition)
        {
            if (condition is null) throw new System.ArgumentNullException(nameof(condition));
            Condition = condition;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.IfExpressionBuilder WithResultExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder resultExpression)
        {
            if (resultExpression is null) throw new System.ArgumentNullException(nameof(resultExpression));
            ResultExpression = resultExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.IfExpressionBuilder WithDefaultExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder? defaultExpression)
        {
            DefaultExpression = defaultExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.IfExpressionBuilder WithResultExpression(object resultExpression)
        {
            ResultExpression = new ConstantExpressionBuilder().WithValue(resultExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.IfExpressionBuilder WithResultExpression(System.Func<object?, object> resultExpression)
        {
            ResultExpression = new DelegateExpressionBuilder().WithValue(resultExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.IfExpressionBuilder WithDefaultExpression(object? defaultExpression)
        {
            DefaultExpression = defaultExpression is null ? null : new ConstantExpressionBuilder().WithValue(defaultExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.IfExpressionBuilder WithDefaultExpression(System.Func<object?, object>? defaultExpression)
        {
            DefaultExpression = defaultExpression is null ? null : new DelegateExpressionBuilder().WithValue(defaultExpression);
            return this;
        }
    }
    public partial class InvalidExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<InvalidExpressionBuilder, ExpressionFramework.Domain.Expressions.InvalidExpression>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> _errorMessageExpression;

        private System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<CrossCutting.Common.Results.ValidationError>> _validationErrorExpressions;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> ErrorMessageExpression
        {
            get
            {
                return _errorMessageExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>>.Default.Equals(_errorMessageExpression!, value!);
                _errorMessageExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(ErrorMessageExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<CrossCutting.Common.Results.ValidationError>> ValidationErrorExpressions
        {
            get
            {
                return _validationErrorExpressions;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<CrossCutting.Common.Results.ValidationError>>>.Default.Equals(_validationErrorExpressions!, value!);
                _validationErrorExpressions = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(ValidationErrorExpressions));
            }
        }

        public InvalidExpressionBuilder(ExpressionFramework.Domain.Expressions.InvalidExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _validationErrorExpressions = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<CrossCutting.Common.Results.ValidationError>>();
            _errorMessageExpression = source.ErrorMessageExpression.ToTypedBuilder();
            if (source.ValidationErrorExpressions is not null) foreach (var item in source.ValidationErrorExpressions.Select(x => x.ToTypedBuilder())) _validationErrorExpressions.Add(item);
        }

        public InvalidExpressionBuilder() : base()
        {
            _validationErrorExpressions = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<CrossCutting.Common.Results.ValidationError>>();
            _errorMessageExpression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.String>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.InvalidExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.InvalidExpression(ErrorMessageExpression.Build(), ValidationErrorExpressions.Select(x => x.Build()!).ToList().AsReadOnly());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.InvalidExpressionBuilder AddValidationErrorExpressions(System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<CrossCutting.Common.Results.ValidationError>> validationErrorExpressions)
        {
            if (validationErrorExpressions is null) throw new System.ArgumentNullException(nameof(validationErrorExpressions));
            return AddValidationErrorExpressions(validationErrorExpressions.ToArray());
        }

        public ExpressionFramework.Domain.Builders.Expressions.InvalidExpressionBuilder AddValidationErrorExpressions(params ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<CrossCutting.Common.Results.ValidationError>[] validationErrorExpressions)
        {
            if (validationErrorExpressions is null) throw new System.ArgumentNullException(nameof(validationErrorExpressions));
            foreach (var item in validationErrorExpressions) ValidationErrorExpressions.Add(item);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.InvalidExpressionBuilder WithErrorMessageExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> errorMessageExpression)
        {
            if (errorMessageExpression is null) throw new System.ArgumentNullException(nameof(errorMessageExpression));
            ErrorMessageExpression = errorMessageExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.InvalidExpressionBuilder WithErrorMessageExpression(string errorMessageExpression)
        {
            ErrorMessageExpression = new TypedConstantExpressionBuilder<System.String>().WithValue(errorMessageExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.InvalidExpressionBuilder WithErrorMessageExpression(System.Func<object?, string> errorMessageExpression)
        {
            ErrorMessageExpression = new TypedDelegateExpressionBuilder<System.String>().WithValue(errorMessageExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.InvalidExpressionBuilder AddValidationErrorExpressions(System.Collections.Generic.IEnumerable<CrossCutting.Common.Results.ValidationError> validationErrorExpressions)
        {
            if (validationErrorExpressions is null) throw new System.ArgumentNullException(nameof(validationErrorExpressions));
            return AddValidationErrorExpressions(validationErrorExpressions.ToArray());
        }

        public ExpressionFramework.Domain.Builders.Expressions.InvalidExpressionBuilder AddValidationErrorExpressions(params CrossCutting.Common.Results.ValidationError[] validationErrorExpressions)
        {
            if (validationErrorExpressions is null) throw new System.ArgumentNullException(nameof(validationErrorExpressions));
            return AddValidationErrorExpressions(validationErrorExpressions.Select(x => new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<CrossCutting.Common.Results.ValidationError>().WithValue(x)));
        }
    }
    public partial class LastExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<LastExpressionBuilder, ExpressionFramework.Domain.Expressions.LastExpression>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>? _predicateExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>? PredicateExpression
        {
            get
            {
                return _predicateExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>>.Default.Equals(_predicateExpression!, value!);
                _predicateExpression = value;
                if (hasChanged) HandlePropertyChanged(nameof(PredicateExpression));
            }
        }

        public LastExpressionBuilder(ExpressionFramework.Domain.Expressions.LastExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _predicateExpression = source.PredicateExpression?.ToTypedBuilder()!;
        }

        public LastExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Collections.IEnumerable>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.LastExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.LastExpression(Expression.Build(), PredicateExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.LastExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.LastExpressionBuilder WithPredicateExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>? predicateExpression)
        {
            PredicateExpression = predicateExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.LastExpressionBuilder WithExpression(System.Collections.IEnumerable expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.LastExpressionBuilder WithExpression(System.Func<object?, System.Collections.IEnumerable> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.LastExpressionBuilder WithPredicateExpression(bool? predicateExpression)
        {
            PredicateExpression = predicateExpression is null ? null : new TypedConstantExpressionBuilder<System.Boolean>().WithValue(predicateExpression.Value);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.LastExpressionBuilder WithPredicateExpression(System.Func<object?, bool>? predicateExpression)
        {
            PredicateExpression = predicateExpression is null ? null : new TypedDelegateExpressionBuilder<System.Boolean>().WithValue(predicateExpression);
            return this;
        }
    }
    public partial class LastOrDefaultExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<LastOrDefaultExpressionBuilder, ExpressionFramework.Domain.Expressions.LastOrDefaultExpression>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>? _predicateExpression;

        private ExpressionFramework.Domain.Builders.ExpressionBuilder? _defaultExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>? PredicateExpression
        {
            get
            {
                return _predicateExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>>.Default.Equals(_predicateExpression!, value!);
                _predicateExpression = value;
                if (hasChanged) HandlePropertyChanged(nameof(PredicateExpression));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder? DefaultExpression
        {
            get
            {
                return _defaultExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_defaultExpression!, value!);
                _defaultExpression = value;
                if (hasChanged) HandlePropertyChanged(nameof(DefaultExpression));
            }
        }

        public LastOrDefaultExpressionBuilder(ExpressionFramework.Domain.Expressions.LastOrDefaultExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _predicateExpression = source.PredicateExpression?.ToTypedBuilder()!;
            _defaultExpression = source.DefaultExpression?.ToBuilder()!;
        }

        public LastOrDefaultExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Collections.IEnumerable>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.LastOrDefaultExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.LastOrDefaultExpression(Expression.Build(), PredicateExpression?.Build()!, DefaultExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.LastOrDefaultExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.LastOrDefaultExpressionBuilder WithPredicateExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>? predicateExpression)
        {
            PredicateExpression = predicateExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.LastOrDefaultExpressionBuilder WithDefaultExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder? defaultExpression)
        {
            DefaultExpression = defaultExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.LastOrDefaultExpressionBuilder WithDefaultExpression(object? defaultExpression)
        {
            DefaultExpression = defaultExpression is null ? null : new ConstantExpressionBuilder().WithValue(defaultExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.LastOrDefaultExpressionBuilder WithDefaultExpression(System.Func<object?, object>? defaultExpression)
        {
            DefaultExpression = defaultExpression is null ? null : new DelegateExpressionBuilder().WithValue(defaultExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.LastOrDefaultExpressionBuilder WithExpression(System.Collections.IEnumerable expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.LastOrDefaultExpressionBuilder WithExpression(System.Func<object?, System.Collections.IEnumerable> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.LastOrDefaultExpressionBuilder WithPredicateExpression(bool? predicateExpression)
        {
            PredicateExpression = predicateExpression is null ? null : new TypedConstantExpressionBuilder<System.Boolean>().WithValue(predicateExpression.Value);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.LastOrDefaultExpressionBuilder WithPredicateExpression(System.Func<object?, bool>? predicateExpression)
        {
            PredicateExpression = predicateExpression is null ? null : new TypedDelegateExpressionBuilder<System.Boolean>().WithValue(predicateExpression);
            return this;
        }
    }
    public partial class LeftExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<LeftExpressionBuilder, ExpressionFramework.Domain.Expressions.LeftExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int> _lengthExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int> LengthExpression
        {
            get
            {
                return _lengthExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Int32>>.Default.Equals(_lengthExpression!, value!);
                _lengthExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(LengthExpression));
            }
        }

        public LeftExpressionBuilder(ExpressionFramework.Domain.Expressions.LeftExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _lengthExpression = source.LengthExpression.ToTypedBuilder();
        }

        public LeftExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.String>()!;
            _lengthExpression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Int32>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.LeftExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.LeftExpression(Expression.Build(), LengthExpression.Build());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.LeftExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.LeftExpressionBuilder WithLengthExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int> lengthExpression)
        {
            if (lengthExpression is null) throw new System.ArgumentNullException(nameof(lengthExpression));
            LengthExpression = lengthExpression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<string> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.LeftExpressionBuilder WithExpression(string expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.LeftExpressionBuilder WithExpression(System.Func<object?, string> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.LeftExpressionBuilder WithLengthExpression(int lengthExpression)
        {
            LengthExpression = new TypedConstantExpressionBuilder<System.Int32>().WithValue(lengthExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.LeftExpressionBuilder WithLengthExpression(System.Func<object?, int> lengthExpression)
        {
            LengthExpression = new TypedDelegateExpressionBuilder<System.Int32>().WithValue(lengthExpression);
            return this;
        }
    }
    public partial class MaxExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<MaxExpressionBuilder, ExpressionFramework.Domain.Expressions.MaxExpression>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> _expression;

        private ExpressionFramework.Domain.Builders.ExpressionBuilder? _selectorExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder? SelectorExpression
        {
            get
            {
                return _selectorExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_selectorExpression!, value!);
                _selectorExpression = value;
                if (hasChanged) HandlePropertyChanged(nameof(SelectorExpression));
            }
        }

        public MaxExpressionBuilder(ExpressionFramework.Domain.Expressions.MaxExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _selectorExpression = source.SelectorExpression?.ToBuilder()!;
        }

        public MaxExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Collections.IEnumerable>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.MaxExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.MaxExpression(Expression.Build(), SelectorExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.MaxExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.MaxExpressionBuilder WithSelectorExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder? selectorExpression)
        {
            SelectorExpression = selectorExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.MaxExpressionBuilder WithSelectorExpression(object? selectorExpression)
        {
            SelectorExpression = selectorExpression is null ? null : new ConstantExpressionBuilder().WithValue(selectorExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.MaxExpressionBuilder WithSelectorExpression(System.Func<object?, object>? selectorExpression)
        {
            SelectorExpression = selectorExpression is null ? null : new DelegateExpressionBuilder().WithValue(selectorExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.MaxExpressionBuilder WithExpression(System.Collections.IEnumerable expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.MaxExpressionBuilder WithExpression(System.Func<object?, System.Collections.IEnumerable> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }
    }
    public partial class MinExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<MinExpressionBuilder, ExpressionFramework.Domain.Expressions.MinExpression>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> _expression;

        private ExpressionFramework.Domain.Builders.ExpressionBuilder? _selectorExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder? SelectorExpression
        {
            get
            {
                return _selectorExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_selectorExpression!, value!);
                _selectorExpression = value;
                if (hasChanged) HandlePropertyChanged(nameof(SelectorExpression));
            }
        }

        public MinExpressionBuilder(ExpressionFramework.Domain.Expressions.MinExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _selectorExpression = source.SelectorExpression?.ToBuilder()!;
        }

        public MinExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Collections.IEnumerable>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.MinExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.MinExpression(Expression.Build(), SelectorExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.MinExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.MinExpressionBuilder WithSelectorExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder? selectorExpression)
        {
            SelectorExpression = selectorExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.MinExpressionBuilder WithSelectorExpression(object? selectorExpression)
        {
            SelectorExpression = selectorExpression is null ? null : new ConstantExpressionBuilder().WithValue(selectorExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.MinExpressionBuilder WithSelectorExpression(System.Func<object?, object>? selectorExpression)
        {
            SelectorExpression = selectorExpression is null ? null : new DelegateExpressionBuilder().WithValue(selectorExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.MinExpressionBuilder WithExpression(System.Collections.IEnumerable expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.MinExpressionBuilder WithExpression(System.Func<object?, System.Collections.IEnumerable> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }
    }
    public partial class MonthExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<MonthExpressionBuilder, ExpressionFramework.Domain.Expressions.MonthExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.DateTime> _expression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.DateTime> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.DateTime>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        public MonthExpressionBuilder(ExpressionFramework.Domain.Expressions.MonthExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
        }

        public MonthExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.DateTime>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.MonthExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.MonthExpression(Expression.Build());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.MonthExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.DateTime> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<int> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Int32>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.MonthExpressionBuilder WithExpression(System.DateTime expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.DateTime>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.MonthExpressionBuilder WithExpression(System.Func<object?, System.DateTime> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.DateTime>().WithValue(expression);
            return this;
        }
    }
    public partial class NotEqualsExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<NotEqualsExpressionBuilder, ExpressionFramework.Domain.Expressions.NotEqualsExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>
    {
        private ExpressionFramework.Domain.Builders.ExpressionBuilder _firstExpression;

        private ExpressionFramework.Domain.Builders.ExpressionBuilder _secondExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder FirstExpression
        {
            get
            {
                return _firstExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_firstExpression!, value!);
                _firstExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(FirstExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder SecondExpression
        {
            get
            {
                return _secondExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_secondExpression!, value!);
                _secondExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SecondExpression));
            }
        }

        public NotEqualsExpressionBuilder(ExpressionFramework.Domain.Expressions.NotEqualsExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _firstExpression = source.FirstExpression?.ToBuilder()!;
            _secondExpression = source.SecondExpression?.ToBuilder()!;
        }

        public NotEqualsExpressionBuilder() : base()
        {
            _firstExpression = default(ExpressionFramework.Domain.Builders.ExpressionBuilder)!;
            _secondExpression = default(ExpressionFramework.Domain.Builders.ExpressionBuilder)!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.NotEqualsExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.NotEqualsExpression(FirstExpression?.Build()!, SecondExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.NotEqualsExpressionBuilder WithFirstExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder firstExpression)
        {
            if (firstExpression is null) throw new System.ArgumentNullException(nameof(firstExpression));
            FirstExpression = firstExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.NotEqualsExpressionBuilder WithSecondExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder secondExpression)
        {
            if (secondExpression is null) throw new System.ArgumentNullException(nameof(secondExpression));
            SecondExpression = secondExpression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<bool> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.NotEqualsExpressionBuilder WithFirstExpression(object firstExpression)
        {
            FirstExpression = new ConstantExpressionBuilder().WithValue(firstExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.NotEqualsExpressionBuilder WithFirstExpression(System.Func<object?, object> firstExpression)
        {
            FirstExpression = new DelegateExpressionBuilder().WithValue(firstExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.NotEqualsExpressionBuilder WithSecondExpression(object secondExpression)
        {
            SecondExpression = new ConstantExpressionBuilder().WithValue(secondExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.NotEqualsExpressionBuilder WithSecondExpression(System.Func<object?, object> secondExpression)
        {
            SecondExpression = new DelegateExpressionBuilder().WithValue(secondExpression);
            return this;
        }
    }
    public partial class NotExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<NotExpressionBuilder, ExpressionFramework.Domain.Expressions.NotExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool> _expression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        public NotExpressionBuilder(ExpressionFramework.Domain.Expressions.NotExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
        }

        public NotExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Boolean>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.NotExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.NotExpression(Expression.Build());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.NotExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<bool> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.NotExpressionBuilder WithExpression(bool expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.Boolean>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.NotExpressionBuilder WithExpression(System.Func<object?, bool> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.Boolean>().WithValue(expression);
            return this;
        }
    }
    public partial class NowExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<NowExpressionBuilder, ExpressionFramework.Domain.Expressions.NowExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.DateTime>
    {
        private CrossCutting.Common.Abstractions.IDateTimeProvider? _dateTimeProvider;

        public CrossCutting.Common.Abstractions.IDateTimeProvider? DateTimeProvider
        {
            get
            {
                return _dateTimeProvider;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Common.Abstractions.IDateTimeProvider>.Default.Equals(_dateTimeProvider!, value!);
                _dateTimeProvider = value;
                if (hasChanged) HandlePropertyChanged(nameof(DateTimeProvider));
            }
        }

        public NowExpressionBuilder(ExpressionFramework.Domain.Expressions.NowExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _dateTimeProvider = source.DateTimeProvider;
        }

        public NowExpressionBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.NowExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.NowExpression(DateTimeProvider);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.NowExpressionBuilder WithDateTimeProvider(CrossCutting.Common.Abstractions.IDateTimeProvider? dateTimeProvider)
        {
            DateTimeProvider = dateTimeProvider;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<System.DateTime> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.DateTime>.Build()
        {
            return BuildTyped();
        }
    }
    public partial class OfTypeExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<OfTypeExpressionBuilder, ExpressionFramework.Domain.Expressions.OfTypeExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.Generic.IEnumerable<object?>>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Type> _typeExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Type> TypeExpression
        {
            get
            {
                return _typeExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Type>>.Default.Equals(_typeExpression!, value!);
                _typeExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(TypeExpression));
            }
        }

        public OfTypeExpressionBuilder(ExpressionFramework.Domain.Expressions.OfTypeExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _typeExpression = source.TypeExpression.ToTypedBuilder();
        }

        public OfTypeExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Collections.IEnumerable>()!;
            _typeExpression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Type>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.OfTypeExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.OfTypeExpression(Expression.Build(), TypeExpression.Build());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.OfTypeExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.OfTypeExpressionBuilder WithTypeExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Type> typeExpression)
        {
            if (typeExpression is null) throw new System.ArgumentNullException(nameof(typeExpression));
            TypeExpression = typeExpression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.Generic.IEnumerable<object?>> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.Generic.IEnumerable<System.Object?>>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.OfTypeExpressionBuilder WithExpression(System.Collections.IEnumerable expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.OfTypeExpressionBuilder WithExpression(System.Func<object?, System.Collections.IEnumerable> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.OfTypeExpressionBuilder WithTypeExpression(System.Type typeExpression)
        {
            TypeExpression = new TypedConstantExpressionBuilder<System.Type>().WithValue(typeExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.OfTypeExpressionBuilder WithTypeExpression(System.Func<object?, System.Type> typeExpression)
        {
            TypeExpression = new TypedDelegateExpressionBuilder<System.Type>().WithValue(typeExpression);
            return this;
        }
    }
    public partial class OperatorExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<OperatorExpressionBuilder, ExpressionFramework.Domain.Expressions.OperatorExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>
    {
        private ExpressionFramework.Domain.Builders.ExpressionBuilder _leftExpression;

        private ExpressionFramework.Domain.Builders.ExpressionBuilder _rightExpression;

        private ExpressionFramework.Domain.Builders.OperatorBuilder _operator;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder LeftExpression
        {
            get
            {
                return _leftExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_leftExpression!, value!);
                _leftExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(LeftExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder RightExpression
        {
            get
            {
                return _rightExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_rightExpression!, value!);
                _rightExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(RightExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.OperatorBuilder Operator
        {
            get
            {
                return _operator;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.OperatorBuilder>.Default.Equals(_operator!, value!);
                _operator = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Operator));
            }
        }

        public OperatorExpressionBuilder(ExpressionFramework.Domain.Expressions.OperatorExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _leftExpression = source.LeftExpression?.ToBuilder()!;
            _rightExpression = source.RightExpression?.ToBuilder()!;
            _operator = source.Operator?.ToBuilder()!;
        }

        public OperatorExpressionBuilder() : base()
        {
            _leftExpression = default(ExpressionFramework.Domain.Builders.ExpressionBuilder)!;
            _rightExpression = default(ExpressionFramework.Domain.Builders.ExpressionBuilder)!;
            _operator = default(ExpressionFramework.Domain.Builders.OperatorBuilder)!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.OperatorExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.OperatorExpression(LeftExpression?.Build()!, RightExpression?.Build()!, Operator?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.OperatorExpressionBuilder WithLeftExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder leftExpression)
        {
            if (leftExpression is null) throw new System.ArgumentNullException(nameof(leftExpression));
            LeftExpression = leftExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.OperatorExpressionBuilder WithRightExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder rightExpression)
        {
            if (rightExpression is null) throw new System.ArgumentNullException(nameof(rightExpression));
            RightExpression = rightExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.OperatorExpressionBuilder WithOperator(ExpressionFramework.Domain.Builders.OperatorBuilder @operator)
        {
            if (@operator is null) throw new System.ArgumentNullException(nameof(@operator));
            Operator = @operator;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<bool> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.OperatorExpressionBuilder WithLeftExpression(object leftExpression)
        {
            LeftExpression = new ConstantExpressionBuilder().WithValue(leftExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.OperatorExpressionBuilder WithLeftExpression(System.Func<object?, object> leftExpression)
        {
            LeftExpression = new DelegateExpressionBuilder().WithValue(leftExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.OperatorExpressionBuilder WithRightExpression(object rightExpression)
        {
            RightExpression = new ConstantExpressionBuilder().WithValue(rightExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.OperatorExpressionBuilder WithRightExpression(System.Func<object?, object> rightExpression)
        {
            RightExpression = new DelegateExpressionBuilder().WithValue(rightExpression);
            return this;
        }
    }
    public partial class OrderByExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<OrderByExpressionBuilder, ExpressionFramework.Domain.Expressions.OrderByExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.Generic.IEnumerable<object?>>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> _expression;

        private System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<ExpressionFramework.Domain.SortOrder>> _sortOrderExpressions;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<ExpressionFramework.Domain.SortOrder>> SortOrderExpressions
        {
            get
            {
                return _sortOrderExpressions;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<ExpressionFramework.Domain.SortOrder>>>.Default.Equals(_sortOrderExpressions!, value!);
                _sortOrderExpressions = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SortOrderExpressions));
            }
        }

        public OrderByExpressionBuilder(ExpressionFramework.Domain.Expressions.OrderByExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _sortOrderExpressions = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<ExpressionFramework.Domain.SortOrder>>();
            _expression = source.Expression.ToTypedBuilder();
            if (source.SortOrderExpressions is not null) foreach (var item in source.SortOrderExpressions.Select(x => x.ToTypedBuilder())) _sortOrderExpressions.Add(item);
        }

        public OrderByExpressionBuilder() : base()
        {
            _sortOrderExpressions = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<ExpressionFramework.Domain.SortOrder>>();
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Collections.IEnumerable>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.OrderByExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.OrderByExpression(Expression.Build(), SortOrderExpressions.Select(x => x.Build()!).ToList().AsReadOnly());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.OrderByExpressionBuilder AddSortOrderExpressions(System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<ExpressionFramework.Domain.SortOrder>> sortOrderExpressions)
        {
            if (sortOrderExpressions is null) throw new System.ArgumentNullException(nameof(sortOrderExpressions));
            return AddSortOrderExpressions(sortOrderExpressions.ToArray());
        }

        public ExpressionFramework.Domain.Builders.Expressions.OrderByExpressionBuilder AddSortOrderExpressions(params ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<ExpressionFramework.Domain.SortOrder>[] sortOrderExpressions)
        {
            if (sortOrderExpressions is null) throw new System.ArgumentNullException(nameof(sortOrderExpressions));
            foreach (var item in sortOrderExpressions) SortOrderExpressions.Add(item);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.OrderByExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.Generic.IEnumerable<object?>> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.Generic.IEnumerable<System.Object?>>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.OrderByExpressionBuilder WithExpression(System.Collections.IEnumerable expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.OrderByExpressionBuilder WithExpression(System.Func<object?, System.Collections.IEnumerable> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.OrderByExpressionBuilder AddSortOrderExpressions(System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.SortOrder> sortOrderExpressions)
        {
            if (sortOrderExpressions is null) throw new System.ArgumentNullException(nameof(sortOrderExpressions));
            return AddSortOrderExpressions(sortOrderExpressions.ToArray());
        }

        public ExpressionFramework.Domain.Builders.Expressions.OrderByExpressionBuilder AddSortOrderExpressions(params ExpressionFramework.Domain.SortOrder[] sortOrderExpressions)
        {
            if (sortOrderExpressions is null) throw new System.ArgumentNullException(nameof(sortOrderExpressions));
            return AddSortOrderExpressions(sortOrderExpressions.Select(x => new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<ExpressionFramework.Domain.SortOrder>().WithValue(x)));
        }
    }
    public partial class OrExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<OrExpressionBuilder, ExpressionFramework.Domain.Expressions.OrExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool> _firstExpression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool> _secondExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool> FirstExpression
        {
            get
            {
                return _firstExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>>.Default.Equals(_firstExpression!, value!);
                _firstExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(FirstExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool> SecondExpression
        {
            get
            {
                return _secondExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>>.Default.Equals(_secondExpression!, value!);
                _secondExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SecondExpression));
            }
        }

        public OrExpressionBuilder(ExpressionFramework.Domain.Expressions.OrExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _firstExpression = source.FirstExpression.ToTypedBuilder();
            _secondExpression = source.SecondExpression.ToTypedBuilder();
        }

        public OrExpressionBuilder() : base()
        {
            _firstExpression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Boolean>()!;
            _secondExpression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Boolean>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.OrExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.OrExpression(FirstExpression.Build(), SecondExpression.Build());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.OrExpressionBuilder WithFirstExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool> firstExpression)
        {
            if (firstExpression is null) throw new System.ArgumentNullException(nameof(firstExpression));
            FirstExpression = firstExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.OrExpressionBuilder WithSecondExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool> secondExpression)
        {
            if (secondExpression is null) throw new System.ArgumentNullException(nameof(secondExpression));
            SecondExpression = secondExpression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<bool> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.OrExpressionBuilder WithFirstExpression(bool firstExpression)
        {
            FirstExpression = new TypedConstantExpressionBuilder<System.Boolean>().WithValue(firstExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.OrExpressionBuilder WithFirstExpression(System.Func<object?, bool> firstExpression)
        {
            FirstExpression = new TypedDelegateExpressionBuilder<System.Boolean>().WithValue(firstExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.OrExpressionBuilder WithSecondExpression(bool secondExpression)
        {
            SecondExpression = new TypedConstantExpressionBuilder<System.Boolean>().WithValue(secondExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.OrExpressionBuilder WithSecondExpression(System.Func<object?, bool> secondExpression)
        {
            SecondExpression = new TypedDelegateExpressionBuilder<System.Boolean>().WithValue(secondExpression);
            return this;
        }
    }
    public partial class RightExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<RightExpressionBuilder, ExpressionFramework.Domain.Expressions.RightExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int> _lengthExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int> LengthExpression
        {
            get
            {
                return _lengthExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Int32>>.Default.Equals(_lengthExpression!, value!);
                _lengthExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(LengthExpression));
            }
        }

        public RightExpressionBuilder(ExpressionFramework.Domain.Expressions.RightExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _lengthExpression = source.LengthExpression.ToTypedBuilder();
        }

        public RightExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.String>()!;
            _lengthExpression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Int32>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.RightExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.RightExpression(Expression.Build(), LengthExpression.Build());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.RightExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.RightExpressionBuilder WithLengthExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int> lengthExpression)
        {
            if (lengthExpression is null) throw new System.ArgumentNullException(nameof(lengthExpression));
            LengthExpression = lengthExpression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<string> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.RightExpressionBuilder WithExpression(string expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.RightExpressionBuilder WithExpression(System.Func<object?, string> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.RightExpressionBuilder WithLengthExpression(int lengthExpression)
        {
            LengthExpression = new TypedConstantExpressionBuilder<System.Int32>().WithValue(lengthExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.RightExpressionBuilder WithLengthExpression(System.Func<object?, int> lengthExpression)
        {
            LengthExpression = new TypedDelegateExpressionBuilder<System.Int32>().WithValue(lengthExpression);
            return this;
        }
    }
    public partial class SelectExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<SelectExpressionBuilder, ExpressionFramework.Domain.Expressions.SelectExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.Generic.IEnumerable<object?>>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> _expression;

        private ExpressionFramework.Domain.Builders.ExpressionBuilder _selectorExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder SelectorExpression
        {
            get
            {
                return _selectorExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_selectorExpression!, value!);
                _selectorExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SelectorExpression));
            }
        }

        public SelectExpressionBuilder(ExpressionFramework.Domain.Expressions.SelectExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _selectorExpression = source.SelectorExpression?.ToBuilder()!;
        }

        public SelectExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Collections.IEnumerable>()!;
            _selectorExpression = default(ExpressionFramework.Domain.Builders.ExpressionBuilder)!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.SelectExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.SelectExpression(Expression.Build(), SelectorExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.SelectExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SelectExpressionBuilder WithSelectorExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder selectorExpression)
        {
            if (selectorExpression is null) throw new System.ArgumentNullException(nameof(selectorExpression));
            SelectorExpression = selectorExpression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.Generic.IEnumerable<object?>> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.Generic.IEnumerable<System.Object?>>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.SelectExpressionBuilder WithSelectorExpression(object selectorExpression)
        {
            SelectorExpression = new ConstantExpressionBuilder().WithValue(selectorExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SelectExpressionBuilder WithSelectorExpression(System.Func<object?, object> selectorExpression)
        {
            SelectorExpression = new DelegateExpressionBuilder().WithValue(selectorExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SelectExpressionBuilder WithExpression(System.Collections.IEnumerable expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SelectExpressionBuilder WithExpression(System.Func<object?, System.Collections.IEnumerable> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }
    }
    public partial class SequenceExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<SequenceExpressionBuilder, ExpressionFramework.Domain.Expressions.SequenceExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.Generic.IEnumerable<object?>>
    {
        private System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ExpressionBuilder> _expressions;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ExpressionBuilder> Expressions
        {
            get
            {
                return _expressions;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Domain.Builders.ExpressionBuilder>>.Default.Equals(_expressions!, value!);
                _expressions = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expressions));
            }
        }

        public SequenceExpressionBuilder(ExpressionFramework.Domain.Expressions.SequenceExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expressions = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ExpressionBuilder>();
            if (source.Expressions is not null) foreach (var item in source.Expressions.Select(x => x.ToBuilder())) _expressions.Add(item);
        }

        public SequenceExpressionBuilder() : base()
        {
            _expressions = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ExpressionBuilder>();
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.SequenceExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.SequenceExpression(Expressions.Select(x => x.Build()!).ToList().AsReadOnly());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.SequenceExpressionBuilder AddExpressions(System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.Builders.ExpressionBuilder> expressions)
        {
            if (expressions is null) throw new System.ArgumentNullException(nameof(expressions));
            return AddExpressions(expressions.ToArray());
        }

        public ExpressionFramework.Domain.Builders.Expressions.SequenceExpressionBuilder AddExpressions(params ExpressionFramework.Domain.Builders.ExpressionBuilder[] expressions)
        {
            if (expressions is null) throw new System.ArgumentNullException(nameof(expressions));
            foreach (var item in expressions) Expressions.Add(item);
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.Generic.IEnumerable<object?>> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.Generic.IEnumerable<System.Object?>>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.SequenceExpressionBuilder AddExpressions(System.Collections.Generic.IEnumerable<object> expressions)
        {
            if (expressions is null) throw new System.ArgumentNullException(nameof(expressions));
            return AddExpressions(expressions.ToArray());
        }

        public ExpressionFramework.Domain.Builders.Expressions.SequenceExpressionBuilder AddExpressions(params object[] expressions)
        {
            if (expressions is null) throw new System.ArgumentNullException(nameof(expressions));
            return AddExpressions(expressions.Select(x => new ExpressionFramework.Domain.Builders.Expressions.ConstantExpressionBuilder().WithValue(x)));
        }
    }
    public partial class SingleExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<SingleExpressionBuilder, ExpressionFramework.Domain.Expressions.SingleExpression>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>? _predicateExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>? PredicateExpression
        {
            get
            {
                return _predicateExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>>.Default.Equals(_predicateExpression!, value!);
                _predicateExpression = value;
                if (hasChanged) HandlePropertyChanged(nameof(PredicateExpression));
            }
        }

        public SingleExpressionBuilder(ExpressionFramework.Domain.Expressions.SingleExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _predicateExpression = source.PredicateExpression?.ToTypedBuilder()!;
        }

        public SingleExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Collections.IEnumerable>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.SingleExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.SingleExpression(Expression.Build(), PredicateExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.SingleExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SingleExpressionBuilder WithPredicateExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>? predicateExpression)
        {
            PredicateExpression = predicateExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SingleExpressionBuilder WithExpression(System.Collections.IEnumerable expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SingleExpressionBuilder WithExpression(System.Func<object?, System.Collections.IEnumerable> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SingleExpressionBuilder WithPredicateExpression(bool? predicateExpression)
        {
            PredicateExpression = predicateExpression is null ? null : new TypedConstantExpressionBuilder<System.Boolean>().WithValue(predicateExpression.Value);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SingleExpressionBuilder WithPredicateExpression(System.Func<object?, bool>? predicateExpression)
        {
            PredicateExpression = predicateExpression is null ? null : new TypedDelegateExpressionBuilder<System.Boolean>().WithValue(predicateExpression);
            return this;
        }
    }
    public partial class SingleOrDefaultExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<SingleOrDefaultExpressionBuilder, ExpressionFramework.Domain.Expressions.SingleOrDefaultExpression>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>? _predicateExpression;

        private ExpressionFramework.Domain.Builders.ExpressionBuilder? _defaultExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>? PredicateExpression
        {
            get
            {
                return _predicateExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>>.Default.Equals(_predicateExpression!, value!);
                _predicateExpression = value;
                if (hasChanged) HandlePropertyChanged(nameof(PredicateExpression));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder? DefaultExpression
        {
            get
            {
                return _defaultExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_defaultExpression!, value!);
                _defaultExpression = value;
                if (hasChanged) HandlePropertyChanged(nameof(DefaultExpression));
            }
        }

        public SingleOrDefaultExpressionBuilder(ExpressionFramework.Domain.Expressions.SingleOrDefaultExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _predicateExpression = source.PredicateExpression?.ToTypedBuilder()!;
            _defaultExpression = source.DefaultExpression?.ToBuilder()!;
        }

        public SingleOrDefaultExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Collections.IEnumerable>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.SingleOrDefaultExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.SingleOrDefaultExpression(Expression.Build(), PredicateExpression?.Build()!, DefaultExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.SingleOrDefaultExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SingleOrDefaultExpressionBuilder WithPredicateExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>? predicateExpression)
        {
            PredicateExpression = predicateExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SingleOrDefaultExpressionBuilder WithDefaultExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder? defaultExpression)
        {
            DefaultExpression = defaultExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SingleOrDefaultExpressionBuilder WithDefaultExpression(object? defaultExpression)
        {
            DefaultExpression = defaultExpression is null ? null : new ConstantExpressionBuilder().WithValue(defaultExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SingleOrDefaultExpressionBuilder WithDefaultExpression(System.Func<object?, object>? defaultExpression)
        {
            DefaultExpression = defaultExpression is null ? null : new DelegateExpressionBuilder().WithValue(defaultExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SingleOrDefaultExpressionBuilder WithExpression(System.Collections.IEnumerable expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SingleOrDefaultExpressionBuilder WithExpression(System.Func<object?, System.Collections.IEnumerable> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SingleOrDefaultExpressionBuilder WithPredicateExpression(bool? predicateExpression)
        {
            PredicateExpression = predicateExpression is null ? null : new TypedConstantExpressionBuilder<System.Boolean>().WithValue(predicateExpression.Value);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SingleOrDefaultExpressionBuilder WithPredicateExpression(System.Func<object?, bool>? predicateExpression)
        {
            PredicateExpression = predicateExpression is null ? null : new TypedDelegateExpressionBuilder<System.Boolean>().WithValue(predicateExpression);
            return this;
        }
    }
    public partial class SkipExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<SkipExpressionBuilder, ExpressionFramework.Domain.Expressions.SkipExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.Generic.IEnumerable<object?>>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int> _countExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int> CountExpression
        {
            get
            {
                return _countExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Int32>>.Default.Equals(_countExpression!, value!);
                _countExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CountExpression));
            }
        }

        public SkipExpressionBuilder(ExpressionFramework.Domain.Expressions.SkipExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _countExpression = source.CountExpression.ToTypedBuilder();
        }

        public SkipExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Collections.IEnumerable>()!;
            _countExpression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Int32>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.SkipExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.SkipExpression(Expression.Build(), CountExpression.Build());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.SkipExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SkipExpressionBuilder WithCountExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int> countExpression)
        {
            if (countExpression is null) throw new System.ArgumentNullException(nameof(countExpression));
            CountExpression = countExpression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.Generic.IEnumerable<object?>> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.Generic.IEnumerable<System.Object?>>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.SkipExpressionBuilder WithExpression(System.Collections.IEnumerable expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SkipExpressionBuilder WithExpression(System.Func<object?, System.Collections.IEnumerable> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SkipExpressionBuilder WithCountExpression(int countExpression)
        {
            CountExpression = new TypedConstantExpressionBuilder<System.Int32>().WithValue(countExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SkipExpressionBuilder WithCountExpression(System.Func<object?, int> countExpression)
        {
            CountExpression = new TypedDelegateExpressionBuilder<System.Int32>().WithValue(countExpression);
            return this;
        }
    }
    public partial class StringConcatenateExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<StringConcatenateExpressionBuilder, ExpressionFramework.Domain.Expressions.StringConcatenateExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string>
    {
        private System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string>> _expressions;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string>> Expressions
        {
            get
            {
                return _expressions;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>>>.Default.Equals(_expressions!, value!);
                _expressions = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expressions));
            }
        }

        public StringConcatenateExpressionBuilder(ExpressionFramework.Domain.Expressions.StringConcatenateExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expressions = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string>>();
            if (source.Expressions is not null) foreach (var item in source.Expressions.Select(x => x.ToTypedBuilder())) _expressions.Add(item);
        }

        public StringConcatenateExpressionBuilder() : base()
        {
            _expressions = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string>>();
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.StringConcatenateExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.StringConcatenateExpression(Expressions.Select(x => x.Build()!).ToList().AsReadOnly());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.StringConcatenateExpressionBuilder AddExpressions(System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string>> expressions)
        {
            if (expressions is null) throw new System.ArgumentNullException(nameof(expressions));
            return AddExpressions(expressions.ToArray());
        }

        public ExpressionFramework.Domain.Builders.Expressions.StringConcatenateExpressionBuilder AddExpressions(params ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string>[] expressions)
        {
            if (expressions is null) throw new System.ArgumentNullException(nameof(expressions));
            foreach (var item in expressions) Expressions.Add(item);
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<string> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.StringConcatenateExpressionBuilder AddExpressions(System.Collections.Generic.IEnumerable<string> expressions)
        {
            if (expressions is null) throw new System.ArgumentNullException(nameof(expressions));
            return AddExpressions(expressions.ToArray());
        }

        public ExpressionFramework.Domain.Builders.Expressions.StringConcatenateExpressionBuilder AddExpressions(params string[] expressions)
        {
            if (expressions is null) throw new System.ArgumentNullException(nameof(expressions));
            return AddExpressions(expressions.Select(x => new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.String>().WithValue(x)));
        }
    }
    public partial class StringFindExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<StringFindExpressionBuilder, ExpressionFramework.Domain.Expressions.StringFindExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> _findExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> FindExpression
        {
            get
            {
                return _findExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>>.Default.Equals(_findExpression!, value!);
                _findExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(FindExpression));
            }
        }

        public StringFindExpressionBuilder(ExpressionFramework.Domain.Expressions.StringFindExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _findExpression = source.FindExpression.ToTypedBuilder();
        }

        public StringFindExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.String>()!;
            _findExpression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.String>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.StringFindExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.StringFindExpression(Expression.Build(), FindExpression.Build());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.StringFindExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.StringFindExpressionBuilder WithFindExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> findExpression)
        {
            if (findExpression is null) throw new System.ArgumentNullException(nameof(findExpression));
            FindExpression = findExpression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<int> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Int32>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.StringFindExpressionBuilder WithExpression(string expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.StringFindExpressionBuilder WithExpression(System.Func<object?, string> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.StringFindExpressionBuilder WithFindExpression(string findExpression)
        {
            FindExpression = new TypedConstantExpressionBuilder<System.String>().WithValue(findExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.StringFindExpressionBuilder WithFindExpression(System.Func<object?, string> findExpression)
        {
            FindExpression = new TypedDelegateExpressionBuilder<System.String>().WithValue(findExpression);
            return this;
        }
    }
    public partial class StringLengthExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<StringLengthExpressionBuilder, ExpressionFramework.Domain.Expressions.StringLengthExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> _expression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        public StringLengthExpressionBuilder(ExpressionFramework.Domain.Expressions.StringLengthExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
        }

        public StringLengthExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.String>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.StringLengthExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.StringLengthExpression(Expression.Build());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.StringLengthExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<int> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Int32>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.StringLengthExpressionBuilder WithExpression(string expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.StringLengthExpressionBuilder WithExpression(System.Func<object?, string> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }
    }
    public partial class StringReplaceExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<StringReplaceExpressionBuilder, ExpressionFramework.Domain.Expressions.StringReplaceExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> _findExpression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> _replaceExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> FindExpression
        {
            get
            {
                return _findExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>>.Default.Equals(_findExpression!, value!);
                _findExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(FindExpression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> ReplaceExpression
        {
            get
            {
                return _replaceExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>>.Default.Equals(_replaceExpression!, value!);
                _replaceExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(ReplaceExpression));
            }
        }

        public StringReplaceExpressionBuilder(ExpressionFramework.Domain.Expressions.StringReplaceExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _findExpression = source.FindExpression.ToTypedBuilder();
            _replaceExpression = source.ReplaceExpression.ToTypedBuilder();
        }

        public StringReplaceExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.String>()!;
            _findExpression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.String>()!;
            _replaceExpression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.String>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.StringReplaceExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.StringReplaceExpression(Expression.Build(), FindExpression.Build(), ReplaceExpression.Build());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.StringReplaceExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.StringReplaceExpressionBuilder WithFindExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> findExpression)
        {
            if (findExpression is null) throw new System.ArgumentNullException(nameof(findExpression));
            FindExpression = findExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.StringReplaceExpressionBuilder WithReplaceExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> replaceExpression)
        {
            if (replaceExpression is null) throw new System.ArgumentNullException(nameof(replaceExpression));
            ReplaceExpression = replaceExpression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<string> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.StringReplaceExpressionBuilder WithExpression(string expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.StringReplaceExpressionBuilder WithExpression(System.Func<object?, string> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.StringReplaceExpressionBuilder WithFindExpression(string findExpression)
        {
            FindExpression = new TypedConstantExpressionBuilder<System.String>().WithValue(findExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.StringReplaceExpressionBuilder WithFindExpression(System.Func<object?, string> findExpression)
        {
            FindExpression = new TypedDelegateExpressionBuilder<System.String>().WithValue(findExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.StringReplaceExpressionBuilder WithReplaceExpression(string replaceExpression)
        {
            ReplaceExpression = new TypedConstantExpressionBuilder<System.String>().WithValue(replaceExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.StringReplaceExpressionBuilder WithReplaceExpression(System.Func<object?, string> replaceExpression)
        {
            ReplaceExpression = new TypedDelegateExpressionBuilder<System.String>().WithValue(replaceExpression);
            return this;
        }
    }
    public partial class SubstringExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<SubstringExpressionBuilder, ExpressionFramework.Domain.Expressions.SubstringExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int> _indexExpression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int>? _lengthExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int> IndexExpression
        {
            get
            {
                return _indexExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Int32>>.Default.Equals(_indexExpression!, value!);
                _indexExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(IndexExpression));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int>? LengthExpression
        {
            get
            {
                return _lengthExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Int32>>.Default.Equals(_lengthExpression!, value!);
                _lengthExpression = value;
                if (hasChanged) HandlePropertyChanged(nameof(LengthExpression));
            }
        }

        public SubstringExpressionBuilder(ExpressionFramework.Domain.Expressions.SubstringExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _indexExpression = source.IndexExpression.ToTypedBuilder();
            _lengthExpression = source.LengthExpression?.ToTypedBuilder()!;
        }

        public SubstringExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.String>()!;
            _indexExpression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Int32>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.SubstringExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.SubstringExpression(Expression.Build(), IndexExpression.Build(), LengthExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.SubstringExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SubstringExpressionBuilder WithIndexExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int> indexExpression)
        {
            if (indexExpression is null) throw new System.ArgumentNullException(nameof(indexExpression));
            IndexExpression = indexExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SubstringExpressionBuilder WithLengthExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int>? lengthExpression)
        {
            LengthExpression = lengthExpression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<string> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.SubstringExpressionBuilder WithExpression(string expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SubstringExpressionBuilder WithExpression(System.Func<object?, string> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SubstringExpressionBuilder WithIndexExpression(int indexExpression)
        {
            IndexExpression = new TypedConstantExpressionBuilder<System.Int32>().WithValue(indexExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SubstringExpressionBuilder WithIndexExpression(System.Func<object?, int> indexExpression)
        {
            IndexExpression = new TypedDelegateExpressionBuilder<System.Int32>().WithValue(indexExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SubstringExpressionBuilder WithLengthExpression(int? lengthExpression)
        {
            LengthExpression = lengthExpression is null ? null : new TypedConstantExpressionBuilder<System.Int32>().WithValue(lengthExpression.Value);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SubstringExpressionBuilder WithLengthExpression(System.Func<object?, int>? lengthExpression)
        {
            LengthExpression = lengthExpression is null ? null : new TypedDelegateExpressionBuilder<System.Int32>().WithValue(lengthExpression);
            return this;
        }
    }
    public partial class SumExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<SumExpressionBuilder, ExpressionFramework.Domain.Expressions.SumExpression>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> _expression;

        private ExpressionFramework.Domain.Builders.ExpressionBuilder? _selectorExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder? SelectorExpression
        {
            get
            {
                return _selectorExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_selectorExpression!, value!);
                _selectorExpression = value;
                if (hasChanged) HandlePropertyChanged(nameof(SelectorExpression));
            }
        }

        public SumExpressionBuilder(ExpressionFramework.Domain.Expressions.SumExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _selectorExpression = source.SelectorExpression?.ToBuilder()!;
        }

        public SumExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Collections.IEnumerable>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.SumExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.SumExpression(Expression.Build(), SelectorExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.SumExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SumExpressionBuilder WithSelectorExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder? selectorExpression)
        {
            SelectorExpression = selectorExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SumExpressionBuilder WithSelectorExpression(object? selectorExpression)
        {
            SelectorExpression = selectorExpression is null ? null : new ConstantExpressionBuilder().WithValue(selectorExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SumExpressionBuilder WithSelectorExpression(System.Func<object?, object>? selectorExpression)
        {
            SelectorExpression = selectorExpression is null ? null : new DelegateExpressionBuilder().WithValue(selectorExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SumExpressionBuilder WithExpression(System.Collections.IEnumerable expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SumExpressionBuilder WithExpression(System.Func<object?, System.Collections.IEnumerable> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }
    }
    public partial class SwitchExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<SwitchExpressionBuilder, ExpressionFramework.Domain.Expressions.SwitchExpression>
    {
        private System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.CaseBuilder> _cases;

        private ExpressionFramework.Domain.Builders.ExpressionBuilder? _defaultExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.CaseBuilder> Cases
        {
            get
            {
                return _cases;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Domain.Builders.CaseBuilder>>.Default.Equals(_cases!, value!);
                _cases = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Cases));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder? DefaultExpression
        {
            get
            {
                return _defaultExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_defaultExpression!, value!);
                _defaultExpression = value;
                if (hasChanged) HandlePropertyChanged(nameof(DefaultExpression));
            }
        }

        public SwitchExpressionBuilder(ExpressionFramework.Domain.Expressions.SwitchExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _cases = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.CaseBuilder>();
            if (source.Cases is not null) foreach (var item in source.Cases.Select(x => x.ToBuilder())) _cases.Add(item);
            _defaultExpression = source.DefaultExpression?.ToBuilder()!;
        }

        public SwitchExpressionBuilder() : base()
        {
            _cases = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.CaseBuilder>();
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.SwitchExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.SwitchExpression(Cases.Select(x => x.Build()!).ToList().AsReadOnly(), DefaultExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.SwitchExpressionBuilder AddCases(System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.Builders.CaseBuilder> cases)
        {
            if (cases is null) throw new System.ArgumentNullException(nameof(cases));
            return AddCases(cases.ToArray());
        }

        public ExpressionFramework.Domain.Builders.Expressions.SwitchExpressionBuilder AddCases(params ExpressionFramework.Domain.Builders.CaseBuilder[] cases)
        {
            if (cases is null) throw new System.ArgumentNullException(nameof(cases));
            foreach (var item in cases) Cases.Add(item);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SwitchExpressionBuilder WithDefaultExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder? defaultExpression)
        {
            DefaultExpression = defaultExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SwitchExpressionBuilder WithDefaultExpression(object? defaultExpression)
        {
            DefaultExpression = defaultExpression is null ? null : new ConstantExpressionBuilder().WithValue(defaultExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.SwitchExpressionBuilder WithDefaultExpression(System.Func<object?, object>? defaultExpression)
        {
            DefaultExpression = defaultExpression is null ? null : new DelegateExpressionBuilder().WithValue(defaultExpression);
            return this;
        }
    }
    public partial class TakeExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<TakeExpressionBuilder, ExpressionFramework.Domain.Expressions.TakeExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.Generic.IEnumerable<object?>>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int> _countExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int> CountExpression
        {
            get
            {
                return _countExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Int32>>.Default.Equals(_countExpression!, value!);
                _countExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(CountExpression));
            }
        }

        public TakeExpressionBuilder(ExpressionFramework.Domain.Expressions.TakeExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _countExpression = source.CountExpression.ToTypedBuilder();
        }

        public TakeExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Collections.IEnumerable>()!;
            _countExpression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Int32>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.TakeExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.TakeExpression(Expression.Build(), CountExpression.Build());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.TakeExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.TakeExpressionBuilder WithCountExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int> countExpression)
        {
            if (countExpression is null) throw new System.ArgumentNullException(nameof(countExpression));
            CountExpression = countExpression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.Generic.IEnumerable<object?>> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.Generic.IEnumerable<System.Object?>>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.TakeExpressionBuilder WithExpression(System.Collections.IEnumerable expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.TakeExpressionBuilder WithExpression(System.Func<object?, System.Collections.IEnumerable> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.TakeExpressionBuilder WithCountExpression(int countExpression)
        {
            CountExpression = new TypedConstantExpressionBuilder<System.Int32>().WithValue(countExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.TakeExpressionBuilder WithCountExpression(System.Func<object?, int> countExpression)
        {
            CountExpression = new TypedDelegateExpressionBuilder<System.Int32>().WithValue(countExpression);
            return this;
        }
    }
    public partial class ToCamelCaseExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<ToCamelCaseExpressionBuilder, ExpressionFramework.Domain.Expressions.ToCamelCaseExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Globalization.CultureInfo>? _culture;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Globalization.CultureInfo>? Culture
        {
            get
            {
                return _culture;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Globalization.CultureInfo>>.Default.Equals(_culture!, value!);
                _culture = value;
                if (hasChanged) HandlePropertyChanged(nameof(Culture));
            }
        }

        public ToCamelCaseExpressionBuilder(ExpressionFramework.Domain.Expressions.ToCamelCaseExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _culture = source.Culture?.ToTypedBuilder()!;
        }

        public ToCamelCaseExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.String>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.ToCamelCaseExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.ToCamelCaseExpression(Expression.Build(), Culture?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.ToCamelCaseExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ToCamelCaseExpressionBuilder WithCulture(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Globalization.CultureInfo>? culture)
        {
            Culture = culture;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<string> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.ToCamelCaseExpressionBuilder WithExpression(string expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ToCamelCaseExpressionBuilder WithExpression(System.Func<object?, string> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ToCamelCaseExpressionBuilder WithCulture(System.Globalization.CultureInfo? culture)
        {
            Culture = culture is null ? null : new TypedConstantExpressionBuilder<System.Globalization.CultureInfo>().WithValue(culture);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ToCamelCaseExpressionBuilder WithCulture(System.Func<object?, System.Globalization.CultureInfo>? culture)
        {
            Culture = culture is null ? null : new TypedDelegateExpressionBuilder<System.Globalization.CultureInfo>().WithValue(culture);
            return this;
        }
    }
    public partial class TodayExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<TodayExpressionBuilder, ExpressionFramework.Domain.Expressions.TodayExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.DateTime>
    {
        private CrossCutting.Common.Abstractions.IDateTimeProvider? _dateTimeProvider;

        public CrossCutting.Common.Abstractions.IDateTimeProvider? DateTimeProvider
        {
            get
            {
                return _dateTimeProvider;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Common.Abstractions.IDateTimeProvider>.Default.Equals(_dateTimeProvider!, value!);
                _dateTimeProvider = value;
                if (hasChanged) HandlePropertyChanged(nameof(DateTimeProvider));
            }
        }

        public TodayExpressionBuilder(ExpressionFramework.Domain.Expressions.TodayExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _dateTimeProvider = source.DateTimeProvider;
        }

        public TodayExpressionBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.TodayExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.TodayExpression(DateTimeProvider);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.TodayExpressionBuilder WithDateTimeProvider(CrossCutting.Common.Abstractions.IDateTimeProvider? dateTimeProvider)
        {
            DateTimeProvider = dateTimeProvider;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<System.DateTime> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.DateTime>.Build()
        {
            return BuildTyped();
        }
    }
    public partial class ToLowerCaseExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<ToLowerCaseExpressionBuilder, ExpressionFramework.Domain.Expressions.ToLowerCaseExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Globalization.CultureInfo>? _culture;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Globalization.CultureInfo>? Culture
        {
            get
            {
                return _culture;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Globalization.CultureInfo>>.Default.Equals(_culture!, value!);
                _culture = value;
                if (hasChanged) HandlePropertyChanged(nameof(Culture));
            }
        }

        public ToLowerCaseExpressionBuilder(ExpressionFramework.Domain.Expressions.ToLowerCaseExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _culture = source.Culture?.ToTypedBuilder()!;
        }

        public ToLowerCaseExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.String>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.ToLowerCaseExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.ToLowerCaseExpression(Expression.Build(), Culture?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.ToLowerCaseExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ToLowerCaseExpressionBuilder WithCulture(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Globalization.CultureInfo>? culture)
        {
            Culture = culture;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<string> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.ToLowerCaseExpressionBuilder WithExpression(string expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ToLowerCaseExpressionBuilder WithExpression(System.Func<object?, string> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ToLowerCaseExpressionBuilder WithCulture(System.Globalization.CultureInfo? culture)
        {
            Culture = culture is null ? null : new TypedConstantExpressionBuilder<System.Globalization.CultureInfo>().WithValue(culture);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ToLowerCaseExpressionBuilder WithCulture(System.Func<object?, System.Globalization.CultureInfo>? culture)
        {
            Culture = culture is null ? null : new TypedDelegateExpressionBuilder<System.Globalization.CultureInfo>().WithValue(culture);
            return this;
        }
    }
    public partial class ToPascalCaseExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<ToPascalCaseExpressionBuilder, ExpressionFramework.Domain.Expressions.ToPascalCaseExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Globalization.CultureInfo>? _culture;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Globalization.CultureInfo>? Culture
        {
            get
            {
                return _culture;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Globalization.CultureInfo>>.Default.Equals(_culture!, value!);
                _culture = value;
                if (hasChanged) HandlePropertyChanged(nameof(Culture));
            }
        }

        public ToPascalCaseExpressionBuilder(ExpressionFramework.Domain.Expressions.ToPascalCaseExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _culture = source.Culture?.ToTypedBuilder()!;
        }

        public ToPascalCaseExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.String>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.ToPascalCaseExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.ToPascalCaseExpression(Expression.Build(), Culture?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.ToPascalCaseExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ToPascalCaseExpressionBuilder WithCulture(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Globalization.CultureInfo>? culture)
        {
            Culture = culture;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<string> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.ToPascalCaseExpressionBuilder WithExpression(string expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ToPascalCaseExpressionBuilder WithExpression(System.Func<object?, string> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ToPascalCaseExpressionBuilder WithCulture(System.Globalization.CultureInfo? culture)
        {
            Culture = culture is null ? null : new TypedConstantExpressionBuilder<System.Globalization.CultureInfo>().WithValue(culture);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ToPascalCaseExpressionBuilder WithCulture(System.Func<object?, System.Globalization.CultureInfo>? culture)
        {
            Culture = culture is null ? null : new TypedDelegateExpressionBuilder<System.Globalization.CultureInfo>().WithValue(culture);
            return this;
        }
    }
    public partial class ToUpperCaseExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<ToUpperCaseExpressionBuilder, ExpressionFramework.Domain.Expressions.ToUpperCaseExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Globalization.CultureInfo>? _culture;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Globalization.CultureInfo>? Culture
        {
            get
            {
                return _culture;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Globalization.CultureInfo>>.Default.Equals(_culture!, value!);
                _culture = value;
                if (hasChanged) HandlePropertyChanged(nameof(Culture));
            }
        }

        public ToUpperCaseExpressionBuilder(ExpressionFramework.Domain.Expressions.ToUpperCaseExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _culture = source.Culture?.ToTypedBuilder()!;
        }

        public ToUpperCaseExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.String>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.ToUpperCaseExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.ToUpperCaseExpression(Expression.Build(), Culture?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.ToUpperCaseExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ToUpperCaseExpressionBuilder WithCulture(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Globalization.CultureInfo>? culture)
        {
            Culture = culture;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<string> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.ToUpperCaseExpressionBuilder WithExpression(string expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ToUpperCaseExpressionBuilder WithExpression(System.Func<object?, string> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ToUpperCaseExpressionBuilder WithCulture(System.Globalization.CultureInfo? culture)
        {
            Culture = culture is null ? null : new TypedConstantExpressionBuilder<System.Globalization.CultureInfo>().WithValue(culture);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.ToUpperCaseExpressionBuilder WithCulture(System.Func<object?, System.Globalization.CultureInfo>? culture)
        {
            Culture = culture is null ? null : new TypedDelegateExpressionBuilder<System.Globalization.CultureInfo>().WithValue(culture);
            return this;
        }
    }
    public partial class TrimEndExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<TrimEndExpressionBuilder, ExpressionFramework.Domain.Expressions.TrimEndExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<char[]>? _trimCharsExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<char[]>? TrimCharsExpression
        {
            get
            {
                return _trimCharsExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Char[]>>.Default.Equals(_trimCharsExpression!, value!);
                _trimCharsExpression = value;
                if (hasChanged) HandlePropertyChanged(nameof(TrimCharsExpression));
            }
        }

        public TrimEndExpressionBuilder(ExpressionFramework.Domain.Expressions.TrimEndExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _trimCharsExpression = source.TrimCharsExpression?.ToTypedBuilder()!;
        }

        public TrimEndExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.String>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.TrimEndExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.TrimEndExpression(Expression.Build(), TrimCharsExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.TrimEndExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.TrimEndExpressionBuilder WithTrimCharsExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<char[]>? trimCharsExpression)
        {
            TrimCharsExpression = trimCharsExpression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<string> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.TrimEndExpressionBuilder WithExpression(string expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.TrimEndExpressionBuilder WithExpression(System.Func<object?, string> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.TrimEndExpressionBuilder WithTrimCharsExpression(char[]? trimCharsExpression)
        {
            TrimCharsExpression = trimCharsExpression is null ? null : new TypedConstantExpressionBuilder<System.Char[]>().WithValue(trimCharsExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.TrimEndExpressionBuilder WithTrimCharsExpression(System.Func<object?, char[]>? trimCharsExpression)
        {
            TrimCharsExpression = trimCharsExpression is null ? null : new TypedDelegateExpressionBuilder<System.Char[]>().WithValue(trimCharsExpression);
            return this;
        }
    }
    public partial class TrimExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<TrimExpressionBuilder, ExpressionFramework.Domain.Expressions.TrimExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<char[]>? _trimCharsExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<char[]>? TrimCharsExpression
        {
            get
            {
                return _trimCharsExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Char[]>>.Default.Equals(_trimCharsExpression!, value!);
                _trimCharsExpression = value;
                if (hasChanged) HandlePropertyChanged(nameof(TrimCharsExpression));
            }
        }

        public TrimExpressionBuilder(ExpressionFramework.Domain.Expressions.TrimExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _trimCharsExpression = source.TrimCharsExpression?.ToTypedBuilder()!;
        }

        public TrimExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.String>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.TrimExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.TrimExpression(Expression.Build(), TrimCharsExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.TrimExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.TrimExpressionBuilder WithTrimCharsExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<char[]>? trimCharsExpression)
        {
            TrimCharsExpression = trimCharsExpression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<string> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.TrimExpressionBuilder WithExpression(string expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.TrimExpressionBuilder WithExpression(System.Func<object?, string> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.TrimExpressionBuilder WithTrimCharsExpression(char[]? trimCharsExpression)
        {
            TrimCharsExpression = trimCharsExpression is null ? null : new TypedConstantExpressionBuilder<System.Char[]>().WithValue(trimCharsExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.TrimExpressionBuilder WithTrimCharsExpression(System.Func<object?, char[]>? trimCharsExpression)
        {
            TrimCharsExpression = trimCharsExpression is null ? null : new TypedDelegateExpressionBuilder<System.Char[]>().WithValue(trimCharsExpression);
            return this;
        }
    }
    public partial class TrimStartExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<TrimStartExpressionBuilder, ExpressionFramework.Domain.Expressions.TrimStartExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<char[]>? _trimCharsExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<char[]>? TrimCharsExpression
        {
            get
            {
                return _trimCharsExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Char[]>>.Default.Equals(_trimCharsExpression!, value!);
                _trimCharsExpression = value;
                if (hasChanged) HandlePropertyChanged(nameof(TrimCharsExpression));
            }
        }

        public TrimStartExpressionBuilder(ExpressionFramework.Domain.Expressions.TrimStartExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _trimCharsExpression = source.TrimCharsExpression?.ToTypedBuilder()!;
        }

        public TrimStartExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.String>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.TrimStartExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.TrimStartExpression(Expression.Build(), TrimCharsExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.TrimStartExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.TrimStartExpressionBuilder WithTrimCharsExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<char[]>? trimCharsExpression)
        {
            TrimCharsExpression = trimCharsExpression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<string> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.TrimStartExpressionBuilder WithExpression(string expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.TrimStartExpressionBuilder WithExpression(System.Func<object?, string> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.String>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.TrimStartExpressionBuilder WithTrimCharsExpression(char[]? trimCharsExpression)
        {
            TrimCharsExpression = trimCharsExpression is null ? null : new TypedConstantExpressionBuilder<System.Char[]>().WithValue(trimCharsExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.TrimStartExpressionBuilder WithTrimCharsExpression(System.Func<object?, char[]>? trimCharsExpression)
        {
            TrimCharsExpression = trimCharsExpression is null ? null : new TypedDelegateExpressionBuilder<System.Char[]>().WithValue(trimCharsExpression);
            return this;
        }
    }
    public partial class TrueExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<TrueExpressionBuilder, ExpressionFramework.Domain.Expressions.TrueExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool>
    {
        public TrueExpressionBuilder(ExpressionFramework.Domain.Expressions.TrueExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public TrueExpressionBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.TrueExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.TrueExpression();
        }

        partial void SetDefaultValues();

        ExpressionFramework.Domain.Contracts.ITypedExpression<bool> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>.Build()
        {
            return BuildTyped();
        }
    }
    public partial class TryCastExpressionBuilder<T> : ExpressionFramework.Domain.Builders.ExpressionBuilder<TryCastExpressionBuilder<T>, ExpressionFramework.Domain.Expressions.TryCastExpression<T>>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<T>
    {
        private ExpressionFramework.Domain.Builders.ExpressionBuilder _sourceExpression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<T>? _defaultExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder SourceExpression
        {
            get
            {
                return _sourceExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_sourceExpression!, value!);
                _sourceExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SourceExpression));
            }
        }

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<T>? DefaultExpression
        {
            get
            {
                return _defaultExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<T>>.Default.Equals(_defaultExpression!, value!);
                _defaultExpression = value;
                if (hasChanged) HandlePropertyChanged(nameof(DefaultExpression));
            }
        }

        public TryCastExpressionBuilder(ExpressionFramework.Domain.Expressions.TryCastExpression<T> source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _sourceExpression = source.SourceExpression?.ToBuilder()!;
            _defaultExpression = source.DefaultExpression?.ToTypedBuilder()!;
        }

        public TryCastExpressionBuilder() : base()
        {
            _sourceExpression = default(ExpressionFramework.Domain.Builders.ExpressionBuilder)!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.TryCastExpression<T> BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.TryCastExpression<T>(SourceExpression?.Build()!, DefaultExpression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.TryCastExpressionBuilder<T> WithSourceExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder sourceExpression)
        {
            if (sourceExpression is null) throw new System.ArgumentNullException(nameof(sourceExpression));
            SourceExpression = sourceExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.TryCastExpressionBuilder<T> WithDefaultExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<T>? defaultExpression)
        {
            DefaultExpression = defaultExpression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<T> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<T>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.TryCastExpressionBuilder<T> WithSourceExpression(object sourceExpression)
        {
            SourceExpression = new ConstantExpressionBuilder().WithValue(sourceExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.TryCastExpressionBuilder<T> WithSourceExpression(System.Func<object?, object> sourceExpression)
        {
            SourceExpression = new DelegateExpressionBuilder().WithValue(sourceExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.TryCastExpressionBuilder<T> WithDefaultExpression(T? defaultExpression)
        {
            DefaultExpression = defaultExpression is null ? null : new TypedConstantExpressionBuilder<T>().WithValue(defaultExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.TryCastExpressionBuilder<T> WithDefaultExpression(System.Func<object?, T>? defaultExpression)
        {
            DefaultExpression = defaultExpression is null ? null : new TypedDelegateExpressionBuilder<T>().WithValue(defaultExpression);
            return this;
        }
    }
    public partial class TypedChainedExpressionBuilder<T> : ExpressionFramework.Domain.Builders.ExpressionBuilder<TypedChainedExpressionBuilder<T>, ExpressionFramework.Domain.Expressions.TypedChainedExpression<T>>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<T>
    {
        private System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ExpressionBuilder> _expressions;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ExpressionBuilder> Expressions
        {
            get
            {
                return _expressions;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Domain.Builders.ExpressionBuilder>>.Default.Equals(_expressions!, value!);
                _expressions = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expressions));
            }
        }

        public TypedChainedExpressionBuilder(ExpressionFramework.Domain.Expressions.TypedChainedExpression<T> source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expressions = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ExpressionBuilder>();
            if (source.Expressions is not null) foreach (var item in source.Expressions.Select(x => x.ToBuilder())) _expressions.Add(item);
        }

        public TypedChainedExpressionBuilder() : base()
        {
            _expressions = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ExpressionBuilder>();
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.TypedChainedExpression<T> BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.TypedChainedExpression<T>(Expressions.Select(x => x.Build()!).ToList().AsReadOnly());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.TypedChainedExpressionBuilder<T> AddExpressions(System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.Builders.ExpressionBuilder> expressions)
        {
            if (expressions is null) throw new System.ArgumentNullException(nameof(expressions));
            return AddExpressions(expressions.ToArray());
        }

        public ExpressionFramework.Domain.Builders.Expressions.TypedChainedExpressionBuilder<T> AddExpressions(params ExpressionFramework.Domain.Builders.ExpressionBuilder[] expressions)
        {
            if (expressions is null) throw new System.ArgumentNullException(nameof(expressions));
            foreach (var item in expressions) Expressions.Add(item);
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<T> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<T>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.TypedChainedExpressionBuilder<T> AddExpressions(System.Collections.Generic.IEnumerable<object> expressions)
        {
            if (expressions is null) throw new System.ArgumentNullException(nameof(expressions));
            return AddExpressions(expressions.ToArray());
        }

        public ExpressionFramework.Domain.Builders.Expressions.TypedChainedExpressionBuilder<T> AddExpressions(params object[] expressions)
        {
            if (expressions is null) throw new System.ArgumentNullException(nameof(expressions));
            return AddExpressions(expressions.Select(x => new ExpressionFramework.Domain.Builders.Expressions.ConstantExpressionBuilder().WithValue(x)));
        }
    }
    public partial class TypedConstantExpressionBuilder<T> : ExpressionFramework.Domain.Builders.ExpressionBuilder<TypedConstantExpressionBuilder<T>, ExpressionFramework.Domain.Expressions.TypedConstantExpression<T>>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<T>
    {
        private T _value;

        public T Value
        {
            get
            {
                return _value;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<T>.Default.Equals(_value!, value!);
                _value = value;
                if (hasChanged) HandlePropertyChanged(nameof(Value));
            }
        }

        public TypedConstantExpressionBuilder(ExpressionFramework.Domain.Expressions.TypedConstantExpression<T> source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _value = source.Value;
        }

        public TypedConstantExpressionBuilder() : base()
        {
            _value = default(T)!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.TypedConstantExpression<T> BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.TypedConstantExpression<T>(Value);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<T> WithValue(T value)
        {
            Value = value;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<T> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<T>.Build()
        {
            return BuildTyped();
        }
    }
    public partial class TypedConstantResultExpressionBuilder<T> : ExpressionFramework.Domain.Builders.ExpressionBuilder<TypedConstantResultExpressionBuilder<T>, ExpressionFramework.Domain.Expressions.TypedConstantResultExpression<T>>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<T>
    {
        private CrossCutting.Common.Results.Result<T> _value;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public CrossCutting.Common.Results.Result<T> Value
        {
            get
            {
                return _value;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Common.Results.Result<T>>.Default.Equals(_value!, value!);
                _value = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Value));
            }
        }

        public TypedConstantResultExpressionBuilder(ExpressionFramework.Domain.Expressions.TypedConstantResultExpression<T> source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _value = source.Value;
        }

        public TypedConstantResultExpressionBuilder() : base()
        {
            _value = default(CrossCutting.Common.Results.Result<T>)!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.TypedConstantResultExpression<T> BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.TypedConstantResultExpression<T>(Value);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.TypedConstantResultExpressionBuilder<T> WithValue(CrossCutting.Common.Results.Result<T> value)
        {
            if (value is null) throw new System.ArgumentNullException(nameof(value));
            Value = value;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<T> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<T>.Build()
        {
            return BuildTyped();
        }
    }
    public partial class TypedContextExpressionBuilder<T> : ExpressionFramework.Domain.Builders.ExpressionBuilder<TypedContextExpressionBuilder<T>, ExpressionFramework.Domain.Expressions.TypedContextExpression<T>>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<T>
    {
        public TypedContextExpressionBuilder(ExpressionFramework.Domain.Expressions.TypedContextExpression<T> source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public TypedContextExpressionBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.TypedContextExpression<T> BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.TypedContextExpression<T>();
        }

        partial void SetDefaultValues();

        ExpressionFramework.Domain.Contracts.ITypedExpression<T> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<T>.Build()
        {
            return BuildTyped();
        }
    }
    public partial class TypedDelegateExpressionBuilder<T> : ExpressionFramework.Domain.Builders.ExpressionBuilder<TypedDelegateExpressionBuilder<T>, ExpressionFramework.Domain.Expressions.TypedDelegateExpression<T>>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<T>
    {
        private System.Func<object?,T> _value;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Func<object?,T> Value
        {
            get
            {
                return _value;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Func<System.Object?,T>>.Default.Equals(_value!, value!);
                _value = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Value));
            }
        }

        public TypedDelegateExpressionBuilder(ExpressionFramework.Domain.Expressions.TypedDelegateExpression<T> source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _value = source.Value;
        }

        public TypedDelegateExpressionBuilder() : base()
        {
            _value = default(System.Func<System.Object?,T>)!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.TypedDelegateExpression<T> BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.TypedDelegateExpression<T>(Value);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.TypedDelegateExpressionBuilder<T> WithValue(System.Func<object?,T> value)
        {
            if (value is null) throw new System.ArgumentNullException(nameof(value));
            Value = value;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<T> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<T>.Build()
        {
            return BuildTyped();
        }
    }
    public partial class TypedDelegateResultExpressionBuilder<T> : ExpressionFramework.Domain.Builders.ExpressionBuilder<TypedDelegateResultExpressionBuilder<T>, ExpressionFramework.Domain.Expressions.TypedDelegateResultExpression<T>>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<T>
    {
        private System.Func<object?,CrossCutting.Common.Results.Result<T>> _value;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public System.Func<object?,CrossCutting.Common.Results.Result<T>> Value
        {
            get
            {
                return _value;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Func<System.Object?,CrossCutting.Common.Results.Result<T>>>.Default.Equals(_value!, value!);
                _value = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Value));
            }
        }

        public TypedDelegateResultExpressionBuilder(ExpressionFramework.Domain.Expressions.TypedDelegateResultExpression<T> source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _value = source.Value;
        }

        public TypedDelegateResultExpressionBuilder() : base()
        {
            _value = default(System.Func<System.Object?,CrossCutting.Common.Results.Result<T>>)!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.TypedDelegateResultExpression<T> BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.TypedDelegateResultExpression<T>(Value);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.TypedDelegateResultExpressionBuilder<T> WithValue(System.Func<object?,CrossCutting.Common.Results.Result<T>> value)
        {
            if (value is null) throw new System.ArgumentNullException(nameof(value));
            Value = value;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<T> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<T>.Build()
        {
            return BuildTyped();
        }
    }
    public partial class TypedFieldExpressionBuilder<T> : ExpressionFramework.Domain.Builders.ExpressionBuilder<TypedFieldExpressionBuilder<T>, ExpressionFramework.Domain.Expressions.TypedFieldExpression<T>>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<T>
    {
        private ExpressionFramework.Domain.Builders.ExpressionBuilder _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> _fieldNameExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> FieldNameExpression
        {
            get
            {
                return _fieldNameExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.String>>.Default.Equals(_fieldNameExpression!, value!);
                _fieldNameExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(FieldNameExpression));
            }
        }

        public TypedFieldExpressionBuilder(ExpressionFramework.Domain.Expressions.TypedFieldExpression<T> source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression?.ToBuilder()!;
            _fieldNameExpression = source.FieldNameExpression.ToTypedBuilder();
        }

        public TypedFieldExpressionBuilder() : base()
        {
            _expression = default(ExpressionFramework.Domain.Builders.ExpressionBuilder)!;
            _fieldNameExpression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.String>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.TypedFieldExpression<T> BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.TypedFieldExpression<T>(Expression?.Build()!, FieldNameExpression.Build());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.TypedFieldExpressionBuilder<T> WithExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.TypedFieldExpressionBuilder<T> WithFieldNameExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<string> fieldNameExpression)
        {
            if (fieldNameExpression is null) throw new System.ArgumentNullException(nameof(fieldNameExpression));
            FieldNameExpression = fieldNameExpression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<T> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<T>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.TypedFieldExpressionBuilder<T> WithExpression(object expression)
        {
            Expression = new ConstantExpressionBuilder().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.TypedFieldExpressionBuilder<T> WithExpression(System.Func<object?, object> expression)
        {
            Expression = new DelegateExpressionBuilder().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.TypedFieldExpressionBuilder<T> WithFieldNameExpression(string fieldNameExpression)
        {
            FieldNameExpression = new TypedConstantExpressionBuilder<System.String>().WithValue(fieldNameExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.TypedFieldExpressionBuilder<T> WithFieldNameExpression(System.Func<object?, string> fieldNameExpression)
        {
            FieldNameExpression = new TypedDelegateExpressionBuilder<System.String>().WithValue(fieldNameExpression);
            return this;
        }
    }
    public partial class WhereExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<WhereExpressionBuilder, ExpressionFramework.Domain.Expressions.WhereExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.Generic.IEnumerable<object?>>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> _expression;

        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool> _predicateExpression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool> PredicateExpression
        {
            get
            {
                return _predicateExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Boolean>>.Default.Equals(_predicateExpression!, value!);
                _predicateExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(PredicateExpression));
            }
        }

        public WhereExpressionBuilder(ExpressionFramework.Domain.Expressions.WhereExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
            _predicateExpression = source.PredicateExpression.ToTypedBuilder();
        }

        public WhereExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Collections.IEnumerable>()!;
            _predicateExpression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.Boolean>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.WhereExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.WhereExpression(Expression.Build(), PredicateExpression.Build());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.WhereExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.IEnumerable> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.WhereExpressionBuilder WithPredicateExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<bool> predicateExpression)
        {
            if (predicateExpression is null) throw new System.ArgumentNullException(nameof(predicateExpression));
            PredicateExpression = predicateExpression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<System.Collections.Generic.IEnumerable<object?>> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Collections.Generic.IEnumerable<System.Object?>>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.WhereExpressionBuilder WithExpression(System.Collections.IEnumerable expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.WhereExpressionBuilder WithExpression(System.Func<object?, System.Collections.IEnumerable> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.Collections.IEnumerable>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.WhereExpressionBuilder WithPredicateExpression(bool predicateExpression)
        {
            PredicateExpression = new TypedConstantExpressionBuilder<System.Boolean>().WithValue(predicateExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.WhereExpressionBuilder WithPredicateExpression(System.Func<object?, bool> predicateExpression)
        {
            PredicateExpression = new TypedDelegateExpressionBuilder<System.Boolean>().WithValue(predicateExpression);
            return this;
        }
    }
    public partial class YearExpressionBuilder : ExpressionFramework.Domain.Builders.ExpressionBuilder<YearExpressionBuilder, ExpressionFramework.Domain.Expressions.YearExpression>, ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<int>
    {
        private ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.DateTime> _expression;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.DateTime> Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.DateTime>>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        public YearExpressionBuilder(ExpressionFramework.Domain.Expressions.YearExpression source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _expression = source.Expression.ToTypedBuilder();
        }

        public YearExpressionBuilder() : base()
        {
            _expression = new ExpressionFramework.Domain.Builders.Expressions.TypedConstantExpressionBuilder<System.DateTime>()!;
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Expressions.YearExpression BuildTyped()
        {
            return new ExpressionFramework.Domain.Expressions.YearExpression(Expression.Build());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.Expressions.YearExpressionBuilder WithExpression(ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.DateTime> expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        ExpressionFramework.Domain.Contracts.ITypedExpression<int> ExpressionFramework.Domain.Contracts.ITypedExpressionBuilder<System.Int32>.Build()
        {
            return BuildTyped();
        }

        public ExpressionFramework.Domain.Builders.Expressions.YearExpressionBuilder WithExpression(System.DateTime expression)
        {
            Expression = new TypedConstantExpressionBuilder<System.DateTime>().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.Expressions.YearExpressionBuilder WithExpression(System.Func<object?, System.DateTime> expression)
        {
            Expression = new TypedDelegateExpressionBuilder<System.DateTime>().WithValue(expression);
            return this;
        }
    }
}
#nullable disable
