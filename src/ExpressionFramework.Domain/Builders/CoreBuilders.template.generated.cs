// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace ExpressionFramework.Domain.Builders
{
    public partial class AggregatorDescriptorBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;

        private string _typeName;

        private string _description;

        private string _contextTypeName;

        private string _contextDescription;

        private System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder> _parameters;

        private System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder> _returnValues;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string TypeName
        {
            get
            {
                return _typeName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_typeName!, value!);
                _typeName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(TypeName));
            }
        }

        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_description!, value!);
                _description = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Description));
            }
        }

        public string ContextTypeName
        {
            get
            {
                return _contextTypeName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_contextTypeName!, value!);
                _contextTypeName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(ContextTypeName));
            }
        }

        public string ContextDescription
        {
            get
            {
                return _contextDescription;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_contextDescription!, value!);
                _contextDescription = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(ContextDescription));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder> Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder>>.Default.Equals(_parameters!, value!);
                _parameters = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Parameters));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder> ReturnValues
        {
            get
            {
                return _returnValues;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder>>.Default.Equals(_returnValues!, value!);
                _returnValues = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(ReturnValues));
            }
        }

        public AggregatorDescriptorBuilder(ExpressionFramework.Domain.AggregatorDescriptor source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _parameters = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder>();
            _returnValues = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder>();
            _name = source.Name;
            _typeName = source.TypeName;
            _description = source.Description;
            _contextTypeName = source.ContextTypeName;
            _contextDescription = source.ContextDescription;
            if (source.Parameters is not null) foreach (var item in source.Parameters.Select(x => x.ToBuilder())) _parameters.Add(item);
            if (source.ReturnValues is not null) foreach (var item in source.ReturnValues.Select(x => x.ToBuilder())) _returnValues.Add(item);
        }

        public AggregatorDescriptorBuilder()
        {
            _parameters = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder>();
            _returnValues = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder>();
            _name = string.Empty;
            _typeName = string.Empty;
            _description = string.Empty;
            _contextTypeName = string.Empty;
            _contextDescription = string.Empty;
            SetDefaultValues();
        }

        public ExpressionFramework.Domain.AggregatorDescriptor Build()
        {
            return new ExpressionFramework.Domain.AggregatorDescriptor(Name, TypeName, Description, ContextTypeName, ContextDescription, Parameters.Select(x => x.Build()!).ToList().AsReadOnly(), ReturnValues.Select(x => x.Build()!).ToList().AsReadOnly());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.AggregatorDescriptorBuilder AddParameters(System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder> parameters)
        {
            if (parameters is null) throw new System.ArgumentNullException(nameof(parameters));
            return AddParameters(parameters.ToArray());
        }

        public ExpressionFramework.Domain.Builders.AggregatorDescriptorBuilder AddParameters(params ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder[] parameters)
        {
            if (parameters is null) throw new System.ArgumentNullException(nameof(parameters));
            foreach (var item in parameters) Parameters.Add(item);
            return this;
        }

        public ExpressionFramework.Domain.Builders.AggregatorDescriptorBuilder AddReturnValues(System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder> returnValues)
        {
            if (returnValues is null) throw new System.ArgumentNullException(nameof(returnValues));
            return AddReturnValues(returnValues.ToArray());
        }

        public ExpressionFramework.Domain.Builders.AggregatorDescriptorBuilder AddReturnValues(params ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder[] returnValues)
        {
            if (returnValues is null) throw new System.ArgumentNullException(nameof(returnValues));
            foreach (var item in returnValues) ReturnValues.Add(item);
            return this;
        }

        public ExpressionFramework.Domain.Builders.AggregatorDescriptorBuilder WithName(string name)
        {
            if (name is null) throw new System.ArgumentNullException(nameof(name));
            Name = name;
            return this;
        }

        public ExpressionFramework.Domain.Builders.AggregatorDescriptorBuilder WithTypeName(string typeName)
        {
            if (typeName is null) throw new System.ArgumentNullException(nameof(typeName));
            TypeName = typeName;
            return this;
        }

        public ExpressionFramework.Domain.Builders.AggregatorDescriptorBuilder WithDescription(string description)
        {
            if (description is null) throw new System.ArgumentNullException(nameof(description));
            Description = description;
            return this;
        }

        public ExpressionFramework.Domain.Builders.AggregatorDescriptorBuilder WithContextTypeName(string contextTypeName)
        {
            if (contextTypeName is null) throw new System.ArgumentNullException(nameof(contextTypeName));
            ContextTypeName = contextTypeName;
            return this;
        }

        public ExpressionFramework.Domain.Builders.AggregatorDescriptorBuilder WithContextDescription(string contextDescription)
        {
            if (contextDescription is null) throw new System.ArgumentNullException(nameof(contextDescription));
            ContextDescription = contextDescription;
            return this;
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class CaseBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private ExpressionFramework.Domain.Builders.EvaluatableBuilder _condition;

        private ExpressionFramework.Domain.Builders.ExpressionBuilder _expression;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.EvaluatableBuilder Condition
        {
            get
            {
                return _condition;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.EvaluatableBuilder>.Default.Equals(_condition!, value!);
                _condition = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Condition));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder Expression
        {
            get
            {
                return _expression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_expression!, value!);
                _expression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Expression));
            }
        }

        public CaseBuilder(ExpressionFramework.Domain.Case source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _condition = source.Condition?.ToBuilder()!;
            _expression = source.Expression?.ToBuilder()!;
        }

        public CaseBuilder()
        {
            _condition = default(ExpressionFramework.Domain.Builders.EvaluatableBuilder)!;
            _expression = default(ExpressionFramework.Domain.Builders.ExpressionBuilder)!;
            SetDefaultValues();
        }

        public ExpressionFramework.Domain.Case Build()
        {
            return new ExpressionFramework.Domain.Case(Condition?.Build()!, Expression?.Build()!);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.CaseBuilder WithCondition(ExpressionFramework.Domain.Builders.EvaluatableBuilder condition)
        {
            if (condition is null) throw new System.ArgumentNullException(nameof(condition));
            Condition = condition;
            return this;
        }

        public ExpressionFramework.Domain.Builders.CaseBuilder WithExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder expression)
        {
            if (expression is null) throw new System.ArgumentNullException(nameof(expression));
            Expression = expression;
            return this;
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

        public ExpressionFramework.Domain.Builders.CaseBuilder WithExpression(object expression)
        {
            Expression = new ConstantExpressionBuilder().WithValue(expression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.CaseBuilder WithExpression(System.Func<object?, object> expression)
        {
            Expression = new DelegateExpressionBuilder().WithValue(expression);
            return this;
        }
    }
    public partial class EvaluatableDescriptorBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;

        private string _typeName;

        private string _description;

        private bool _usesContext;

        private string? _contextTypeName;

        private string? _contextDescription;

        private System.Nullable<bool> _contextIsRequired;

        private System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder> _parameters;

        private System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder> _returnValues;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string TypeName
        {
            get
            {
                return _typeName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_typeName!, value!);
                _typeName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(TypeName));
            }
        }

        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_description!, value!);
                _description = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Description));
            }
        }

        public bool UsesContext
        {
            get
            {
                return _usesContext;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_usesContext, value);
                _usesContext = value;
                if (hasChanged) HandlePropertyChanged(nameof(UsesContext));
            }
        }

        public string? ContextTypeName
        {
            get
            {
                return _contextTypeName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_contextTypeName!, value!);
                _contextTypeName = value;
                if (hasChanged) HandlePropertyChanged(nameof(ContextTypeName));
            }
        }

        public string? ContextDescription
        {
            get
            {
                return _contextDescription;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_contextDescription!, value!);
                _contextDescription = value;
                if (hasChanged) HandlePropertyChanged(nameof(ContextDescription));
            }
        }

        public System.Nullable<bool> ContextIsRequired
        {
            get
            {
                return _contextIsRequired;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<System.Boolean>>.Default.Equals(_contextIsRequired, value);
                _contextIsRequired = value;
                if (hasChanged) HandlePropertyChanged(nameof(ContextIsRequired));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder> Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder>>.Default.Equals(_parameters!, value!);
                _parameters = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Parameters));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder> ReturnValues
        {
            get
            {
                return _returnValues;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder>>.Default.Equals(_returnValues!, value!);
                _returnValues = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(ReturnValues));
            }
        }

        public EvaluatableDescriptorBuilder(ExpressionFramework.Domain.EvaluatableDescriptor source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _parameters = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder>();
            _returnValues = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder>();
            _name = source.Name;
            _typeName = source.TypeName;
            _description = source.Description;
            _usesContext = source.UsesContext;
            _contextTypeName = source.ContextTypeName;
            _contextDescription = source.ContextDescription;
            _contextIsRequired = source.ContextIsRequired;
            if (source.Parameters is not null) foreach (var item in source.Parameters.Select(x => x.ToBuilder())) _parameters.Add(item);
            if (source.ReturnValues is not null) foreach (var item in source.ReturnValues.Select(x => x.ToBuilder())) _returnValues.Add(item);
        }

        public EvaluatableDescriptorBuilder()
        {
            _parameters = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder>();
            _returnValues = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder>();
            _name = string.Empty;
            _typeName = string.Empty;
            _description = string.Empty;
            SetDefaultValues();
        }

        public ExpressionFramework.Domain.EvaluatableDescriptor Build()
        {
            return new ExpressionFramework.Domain.EvaluatableDescriptor(Name, TypeName, Description, UsesContext, ContextTypeName, ContextDescription, ContextIsRequired, Parameters.Select(x => x.Build()!).ToList().AsReadOnly(), ReturnValues.Select(x => x.Build()!).ToList().AsReadOnly());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.EvaluatableDescriptorBuilder AddParameters(System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder> parameters)
        {
            if (parameters is null) throw new System.ArgumentNullException(nameof(parameters));
            return AddParameters(parameters.ToArray());
        }

        public ExpressionFramework.Domain.Builders.EvaluatableDescriptorBuilder AddParameters(params ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder[] parameters)
        {
            if (parameters is null) throw new System.ArgumentNullException(nameof(parameters));
            foreach (var item in parameters) Parameters.Add(item);
            return this;
        }

        public ExpressionFramework.Domain.Builders.EvaluatableDescriptorBuilder AddReturnValues(System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder> returnValues)
        {
            if (returnValues is null) throw new System.ArgumentNullException(nameof(returnValues));
            return AddReturnValues(returnValues.ToArray());
        }

        public ExpressionFramework.Domain.Builders.EvaluatableDescriptorBuilder AddReturnValues(params ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder[] returnValues)
        {
            if (returnValues is null) throw new System.ArgumentNullException(nameof(returnValues));
            foreach (var item in returnValues) ReturnValues.Add(item);
            return this;
        }

        public ExpressionFramework.Domain.Builders.EvaluatableDescriptorBuilder WithName(string name)
        {
            if (name is null) throw new System.ArgumentNullException(nameof(name));
            Name = name;
            return this;
        }

        public ExpressionFramework.Domain.Builders.EvaluatableDescriptorBuilder WithTypeName(string typeName)
        {
            if (typeName is null) throw new System.ArgumentNullException(nameof(typeName));
            TypeName = typeName;
            return this;
        }

        public ExpressionFramework.Domain.Builders.EvaluatableDescriptorBuilder WithDescription(string description)
        {
            if (description is null) throw new System.ArgumentNullException(nameof(description));
            Description = description;
            return this;
        }

        public ExpressionFramework.Domain.Builders.EvaluatableDescriptorBuilder WithUsesContext(bool usesContext = true)
        {
            UsesContext = usesContext;
            return this;
        }

        public ExpressionFramework.Domain.Builders.EvaluatableDescriptorBuilder WithContextTypeName(string? contextTypeName)
        {
            ContextTypeName = contextTypeName;
            return this;
        }

        public ExpressionFramework.Domain.Builders.EvaluatableDescriptorBuilder WithContextDescription(string? contextDescription)
        {
            ContextDescription = contextDescription;
            return this;
        }

        public ExpressionFramework.Domain.Builders.EvaluatableDescriptorBuilder WithContextIsRequired(System.Nullable<bool> contextIsRequired)
        {
            ContextIsRequired = contextIsRequired;
            return this;
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class ExpressionDescriptorBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;

        private string _typeName;

        private string _description;

        private bool _usesContext;

        private string? _contextTypeName;

        private string? _contextDescription;

        private System.Nullable<bool> _contextIsRequired;

        private System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder> _parameters;

        private System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder> _returnValues;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string TypeName
        {
            get
            {
                return _typeName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_typeName!, value!);
                _typeName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(TypeName));
            }
        }

        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_description!, value!);
                _description = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Description));
            }
        }

        public bool UsesContext
        {
            get
            {
                return _usesContext;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_usesContext, value);
                _usesContext = value;
                if (hasChanged) HandlePropertyChanged(nameof(UsesContext));
            }
        }

        public string? ContextTypeName
        {
            get
            {
                return _contextTypeName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_contextTypeName!, value!);
                _contextTypeName = value;
                if (hasChanged) HandlePropertyChanged(nameof(ContextTypeName));
            }
        }

        public string? ContextDescription
        {
            get
            {
                return _contextDescription;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_contextDescription!, value!);
                _contextDescription = value;
                if (hasChanged) HandlePropertyChanged(nameof(ContextDescription));
            }
        }

        public System.Nullable<bool> ContextIsRequired
        {
            get
            {
                return _contextIsRequired;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Nullable<System.Boolean>>.Default.Equals(_contextIsRequired, value);
                _contextIsRequired = value;
                if (hasChanged) HandlePropertyChanged(nameof(ContextIsRequired));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder> Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder>>.Default.Equals(_parameters!, value!);
                _parameters = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Parameters));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder> ReturnValues
        {
            get
            {
                return _returnValues;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder>>.Default.Equals(_returnValues!, value!);
                _returnValues = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(ReturnValues));
            }
        }

        public ExpressionDescriptorBuilder(ExpressionFramework.Domain.ExpressionDescriptor source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _parameters = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder>();
            _returnValues = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder>();
            _name = source.Name;
            _typeName = source.TypeName;
            _description = source.Description;
            _usesContext = source.UsesContext;
            _contextTypeName = source.ContextTypeName;
            _contextDescription = source.ContextDescription;
            _contextIsRequired = source.ContextIsRequired;
            if (source.Parameters is not null) foreach (var item in source.Parameters.Select(x => x.ToBuilder())) _parameters.Add(item);
            if (source.ReturnValues is not null) foreach (var item in source.ReturnValues.Select(x => x.ToBuilder())) _returnValues.Add(item);
        }

        public ExpressionDescriptorBuilder()
        {
            _parameters = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder>();
            _returnValues = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder>();
            _name = string.Empty;
            _typeName = string.Empty;
            _description = string.Empty;
            SetDefaultValues();
        }

        public ExpressionFramework.Domain.ExpressionDescriptor Build()
        {
            return new ExpressionFramework.Domain.ExpressionDescriptor(Name, TypeName, Description, UsesContext, ContextTypeName, ContextDescription, ContextIsRequired, Parameters.Select(x => x.Build()!).ToList().AsReadOnly(), ReturnValues.Select(x => x.Build()!).ToList().AsReadOnly());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.ExpressionDescriptorBuilder AddParameters(System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder> parameters)
        {
            if (parameters is null) throw new System.ArgumentNullException(nameof(parameters));
            return AddParameters(parameters.ToArray());
        }

        public ExpressionFramework.Domain.Builders.ExpressionDescriptorBuilder AddParameters(params ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder[] parameters)
        {
            if (parameters is null) throw new System.ArgumentNullException(nameof(parameters));
            foreach (var item in parameters) Parameters.Add(item);
            return this;
        }

        public ExpressionFramework.Domain.Builders.ExpressionDescriptorBuilder AddReturnValues(System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder> returnValues)
        {
            if (returnValues is null) throw new System.ArgumentNullException(nameof(returnValues));
            return AddReturnValues(returnValues.ToArray());
        }

        public ExpressionFramework.Domain.Builders.ExpressionDescriptorBuilder AddReturnValues(params ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder[] returnValues)
        {
            if (returnValues is null) throw new System.ArgumentNullException(nameof(returnValues));
            foreach (var item in returnValues) ReturnValues.Add(item);
            return this;
        }

        public ExpressionFramework.Domain.Builders.ExpressionDescriptorBuilder WithName(string name)
        {
            if (name is null) throw new System.ArgumentNullException(nameof(name));
            Name = name;
            return this;
        }

        public ExpressionFramework.Domain.Builders.ExpressionDescriptorBuilder WithTypeName(string typeName)
        {
            if (typeName is null) throw new System.ArgumentNullException(nameof(typeName));
            TypeName = typeName;
            return this;
        }

        public ExpressionFramework.Domain.Builders.ExpressionDescriptorBuilder WithDescription(string description)
        {
            if (description is null) throw new System.ArgumentNullException(nameof(description));
            Description = description;
            return this;
        }

        public ExpressionFramework.Domain.Builders.ExpressionDescriptorBuilder WithUsesContext(bool usesContext = true)
        {
            UsesContext = usesContext;
            return this;
        }

        public ExpressionFramework.Domain.Builders.ExpressionDescriptorBuilder WithContextTypeName(string? contextTypeName)
        {
            ContextTypeName = contextTypeName;
            return this;
        }

        public ExpressionFramework.Domain.Builders.ExpressionDescriptorBuilder WithContextDescription(string? contextDescription)
        {
            ContextDescription = contextDescription;
            return this;
        }

        public ExpressionFramework.Domain.Builders.ExpressionDescriptorBuilder WithContextIsRequired(System.Nullable<bool> contextIsRequired)
        {
            ContextIsRequired = contextIsRequired;
            return this;
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class OperatorDescriptorBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;

        private string _typeName;

        private string _description;

        private bool _usesLeftValue;

        private string? _leftValueTypeName;

        private bool _usesRightValue;

        private string? _rightValueTypeName;

        private System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder> _parameters;

        private System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder> _returnValues;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string TypeName
        {
            get
            {
                return _typeName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_typeName!, value!);
                _typeName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(TypeName));
            }
        }

        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_description!, value!);
                _description = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Description));
            }
        }

        public bool UsesLeftValue
        {
            get
            {
                return _usesLeftValue;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_usesLeftValue, value);
                _usesLeftValue = value;
                if (hasChanged) HandlePropertyChanged(nameof(UsesLeftValue));
            }
        }

        public string? LeftValueTypeName
        {
            get
            {
                return _leftValueTypeName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_leftValueTypeName!, value!);
                _leftValueTypeName = value;
                if (hasChanged) HandlePropertyChanged(nameof(LeftValueTypeName));
            }
        }

        public bool UsesRightValue
        {
            get
            {
                return _usesRightValue;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_usesRightValue, value);
                _usesRightValue = value;
                if (hasChanged) HandlePropertyChanged(nameof(UsesRightValue));
            }
        }

        public string? RightValueTypeName
        {
            get
            {
                return _rightValueTypeName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_rightValueTypeName!, value!);
                _rightValueTypeName = value;
                if (hasChanged) HandlePropertyChanged(nameof(RightValueTypeName));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder> Parameters
        {
            get
            {
                return _parameters;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder>>.Default.Equals(_parameters!, value!);
                _parameters = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Parameters));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder> ReturnValues
        {
            get
            {
                return _returnValues;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder>>.Default.Equals(_returnValues!, value!);
                _returnValues = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(ReturnValues));
            }
        }

        public OperatorDescriptorBuilder(ExpressionFramework.Domain.OperatorDescriptor source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _parameters = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder>();
            _returnValues = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder>();
            _name = source.Name;
            _typeName = source.TypeName;
            _description = source.Description;
            _usesLeftValue = source.UsesLeftValue;
            _leftValueTypeName = source.LeftValueTypeName;
            _usesRightValue = source.UsesRightValue;
            _rightValueTypeName = source.RightValueTypeName;
            if (source.Parameters is not null) foreach (var item in source.Parameters.Select(x => x.ToBuilder())) _parameters.Add(item);
            if (source.ReturnValues is not null) foreach (var item in source.ReturnValues.Select(x => x.ToBuilder())) _returnValues.Add(item);
        }

        public OperatorDescriptorBuilder()
        {
            _parameters = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder>();
            _returnValues = new System.Collections.ObjectModel.ObservableCollection<ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder>();
            _name = string.Empty;
            _typeName = string.Empty;
            _description = string.Empty;
            SetDefaultValues();
        }

        public ExpressionFramework.Domain.OperatorDescriptor Build()
        {
            return new ExpressionFramework.Domain.OperatorDescriptor(Name, TypeName, Description, UsesLeftValue, LeftValueTypeName, UsesRightValue, RightValueTypeName, Parameters.Select(x => x.Build()!).ToList().AsReadOnly(), ReturnValues.Select(x => x.Build()!).ToList().AsReadOnly());
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.OperatorDescriptorBuilder AddParameters(System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder> parameters)
        {
            if (parameters is null) throw new System.ArgumentNullException(nameof(parameters));
            return AddParameters(parameters.ToArray());
        }

        public ExpressionFramework.Domain.Builders.OperatorDescriptorBuilder AddParameters(params ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder[] parameters)
        {
            if (parameters is null) throw new System.ArgumentNullException(nameof(parameters));
            foreach (var item in parameters) Parameters.Add(item);
            return this;
        }

        public ExpressionFramework.Domain.Builders.OperatorDescriptorBuilder AddReturnValues(System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder> returnValues)
        {
            if (returnValues is null) throw new System.ArgumentNullException(nameof(returnValues));
            return AddReturnValues(returnValues.ToArray());
        }

        public ExpressionFramework.Domain.Builders.OperatorDescriptorBuilder AddReturnValues(params ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder[] returnValues)
        {
            if (returnValues is null) throw new System.ArgumentNullException(nameof(returnValues));
            foreach (var item in returnValues) ReturnValues.Add(item);
            return this;
        }

        public ExpressionFramework.Domain.Builders.OperatorDescriptorBuilder WithName(string name)
        {
            if (name is null) throw new System.ArgumentNullException(nameof(name));
            Name = name;
            return this;
        }

        public ExpressionFramework.Domain.Builders.OperatorDescriptorBuilder WithTypeName(string typeName)
        {
            if (typeName is null) throw new System.ArgumentNullException(nameof(typeName));
            TypeName = typeName;
            return this;
        }

        public ExpressionFramework.Domain.Builders.OperatorDescriptorBuilder WithDescription(string description)
        {
            if (description is null) throw new System.ArgumentNullException(nameof(description));
            Description = description;
            return this;
        }

        public ExpressionFramework.Domain.Builders.OperatorDescriptorBuilder WithUsesLeftValue(bool usesLeftValue = true)
        {
            UsesLeftValue = usesLeftValue;
            return this;
        }

        public ExpressionFramework.Domain.Builders.OperatorDescriptorBuilder WithLeftValueTypeName(string? leftValueTypeName)
        {
            LeftValueTypeName = leftValueTypeName;
            return this;
        }

        public ExpressionFramework.Domain.Builders.OperatorDescriptorBuilder WithUsesRightValue(bool usesRightValue = true)
        {
            UsesRightValue = usesRightValue;
            return this;
        }

        public ExpressionFramework.Domain.Builders.OperatorDescriptorBuilder WithRightValueTypeName(string? rightValueTypeName)
        {
            RightValueTypeName = rightValueTypeName;
            return this;
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class ParameterDescriptorBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private string _name;

        private string _typeName;

        private string _description;

        private bool _required;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_name!, value!);
                _name = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Name));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string TypeName
        {
            get
            {
                return _typeName;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_typeName!, value!);
                _typeName = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(TypeName));
            }
        }

        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_description!, value!);
                _description = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Description));
            }
        }

        public bool Required
        {
            get
            {
                return _required;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Boolean>.Default.Equals(_required, value);
                _required = value;
                if (hasChanged) HandlePropertyChanged(nameof(Required));
            }
        }

        public ParameterDescriptorBuilder(ExpressionFramework.Domain.ParameterDescriptor source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _name = source.Name;
            _typeName = source.TypeName;
            _description = source.Description;
            _required = source.Required;
        }

        public ParameterDescriptorBuilder()
        {
            _name = string.Empty;
            _typeName = string.Empty;
            _description = string.Empty;
            SetDefaultValues();
        }

        public ExpressionFramework.Domain.ParameterDescriptor Build()
        {
            return new ExpressionFramework.Domain.ParameterDescriptor(Name, TypeName, Description, Required);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder WithName(string name)
        {
            if (name is null) throw new System.ArgumentNullException(nameof(name));
            Name = name;
            return this;
        }

        public ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder WithTypeName(string typeName)
        {
            if (typeName is null) throw new System.ArgumentNullException(nameof(typeName));
            TypeName = typeName;
            return this;
        }

        public ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder WithDescription(string description)
        {
            if (description is null) throw new System.ArgumentNullException(nameof(description));
            Description = description;
            return this;
        }

        public ExpressionFramework.Domain.Builders.ParameterDescriptorBuilder WithRequired(bool required = true)
        {
            Required = required;
            return this;
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class ReturnValueDescriptorBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private CrossCutting.Common.Results.ResultStatus _status;

        private string _value;

        private System.Type? _valueType;

        private string _description;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        public CrossCutting.Common.Results.ResultStatus Status
        {
            get
            {
                return _status;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<CrossCutting.Common.Results.ResultStatus>.Default.Equals(_status, value);
                _status = value;
                if (hasChanged) HandlePropertyChanged(nameof(Status));
            }
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_value!, value!);
                _value = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Value));
            }
        }

        public System.Type? ValueType
        {
            get
            {
                return _valueType;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.Type>.Default.Equals(_valueType!, value!);
                _valueType = value;
                if (hasChanged) HandlePropertyChanged(nameof(ValueType));
            }
        }

        public string Description
        {
            get
            {
                return _description;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<System.String>.Default.Equals(_description!, value!);
                _description = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(Description));
            }
        }

        public ReturnValueDescriptorBuilder(ExpressionFramework.Domain.ReturnValueDescriptor source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _status = source.Status;
            _value = source.Value;
            _valueType = source.ValueType;
            _description = source.Description;
        }

        public ReturnValueDescriptorBuilder()
        {
            _value = string.Empty;
            _description = string.Empty;
            SetDefaultValues();
        }

        public ExpressionFramework.Domain.ReturnValueDescriptor Build()
        {
            return new ExpressionFramework.Domain.ReturnValueDescriptor(Status, Value, ValueType, Description);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder WithStatus(CrossCutting.Common.Results.ResultStatus status)
        {
            Status = status;
            return this;
        }

        public ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder WithValue(string value)
        {
            if (value is null) throw new System.ArgumentNullException(nameof(value));
            Value = value;
            return this;
        }

        public ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder WithValueType(System.Type? valueType)
        {
            ValueType = valueType;
            return this;
        }

        public ExpressionFramework.Domain.Builders.ReturnValueDescriptorBuilder WithDescription(string description)
        {
            if (description is null) throw new System.ArgumentNullException(nameof(description));
            Description = description;
            return this;
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    public partial class SortOrderBuilder : System.ComponentModel.INotifyPropertyChanged
    {
        private ExpressionFramework.Domain.Builders.ExpressionBuilder _sortExpression;

        private ExpressionFramework.Domain.Domains.SortOrderDirection _direction;

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Builders.ExpressionBuilder SortExpression
        {
            get
            {
                return _sortExpression;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Builders.ExpressionBuilder>.Default.Equals(_sortExpression!, value!);
                _sortExpression = value ?? throw new System.ArgumentNullException(nameof(value));
                if (hasChanged) HandlePropertyChanged(nameof(SortExpression));
            }
        }

        public ExpressionFramework.Domain.Domains.SortOrderDirection Direction
        {
            get
            {
                return _direction;
            }
            set
            {
                bool hasChanged = !System.Collections.Generic.EqualityComparer<ExpressionFramework.Domain.Domains.SortOrderDirection>.Default.Equals(_direction, value);
                _direction = value;
                if (hasChanged) HandlePropertyChanged(nameof(Direction));
            }
        }

        public SortOrderBuilder(ExpressionFramework.Domain.SortOrder source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
            _sortExpression = source.SortExpression?.ToBuilder()!;
            _direction = source.Direction;
        }

        public SortOrderBuilder()
        {
            _sortExpression = default(ExpressionFramework.Domain.Builders.ExpressionBuilder)!;
            SetDefaultValues();
        }

        public ExpressionFramework.Domain.SortOrder Build()
        {
            return new ExpressionFramework.Domain.SortOrder(SortExpression?.Build()!, Direction);
        }

        partial void SetDefaultValues();

        public ExpressionFramework.Domain.Builders.SortOrderBuilder WithSortExpression(ExpressionFramework.Domain.Builders.ExpressionBuilder sortExpression)
        {
            if (sortExpression is null) throw new System.ArgumentNullException(nameof(sortExpression));
            SortExpression = sortExpression;
            return this;
        }

        public ExpressionFramework.Domain.Builders.SortOrderBuilder WithDirection(ExpressionFramework.Domain.Domains.SortOrderDirection direction)
        {
            Direction = direction;
            return this;
        }

        protected void HandlePropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

        public ExpressionFramework.Domain.Builders.SortOrderBuilder WithSortExpression(object sortExpression)
        {
            SortExpression = new ConstantExpressionBuilder().WithValue(sortExpression);
            return this;
        }

        public ExpressionFramework.Domain.Builders.SortOrderBuilder WithSortExpression(System.Func<object?, object> sortExpression)
        {
            SortExpression = new DelegateExpressionBuilder().WithValue(sortExpression);
            return this;
        }
    }
}
#nullable disable
