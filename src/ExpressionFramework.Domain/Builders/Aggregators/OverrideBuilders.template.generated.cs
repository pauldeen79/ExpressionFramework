// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 9.0.1
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
#nullable enable
namespace ExpressionFramework.Domain.Builders.Aggregators
{
    public partial class AddAggregatorBuilder : ExpressionFramework.Domain.Builders.AggregatorBuilder<AddAggregatorBuilder, ExpressionFramework.Domain.Aggregators.AddAggregator>
    {
        public AddAggregatorBuilder(ExpressionFramework.Domain.Aggregators.AddAggregator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public AddAggregatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Aggregators.AddAggregator BuildTyped()
        {
            return new ExpressionFramework.Domain.Aggregators.AddAggregator();
        }

        partial void SetDefaultValues();
    }
    public partial class DivideAggregatorBuilder : ExpressionFramework.Domain.Builders.AggregatorBuilder<DivideAggregatorBuilder, ExpressionFramework.Domain.Aggregators.DivideAggregator>
    {
        public DivideAggregatorBuilder(ExpressionFramework.Domain.Aggregators.DivideAggregator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public DivideAggregatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Aggregators.DivideAggregator BuildTyped()
        {
            return new ExpressionFramework.Domain.Aggregators.DivideAggregator();
        }

        partial void SetDefaultValues();
    }
    public partial class EnumerableConcatenateAggregatorBuilder : ExpressionFramework.Domain.Builders.AggregatorBuilder<EnumerableConcatenateAggregatorBuilder, ExpressionFramework.Domain.Aggregators.EnumerableConcatenateAggregator>
    {
        public EnumerableConcatenateAggregatorBuilder(ExpressionFramework.Domain.Aggregators.EnumerableConcatenateAggregator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public EnumerableConcatenateAggregatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Aggregators.EnumerableConcatenateAggregator BuildTyped()
        {
            return new ExpressionFramework.Domain.Aggregators.EnumerableConcatenateAggregator();
        }

        partial void SetDefaultValues();
    }
    public partial class ModulusAggregatorBuilder : ExpressionFramework.Domain.Builders.AggregatorBuilder<ModulusAggregatorBuilder, ExpressionFramework.Domain.Aggregators.ModulusAggregator>
    {
        public ModulusAggregatorBuilder(ExpressionFramework.Domain.Aggregators.ModulusAggregator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public ModulusAggregatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Aggregators.ModulusAggregator BuildTyped()
        {
            return new ExpressionFramework.Domain.Aggregators.ModulusAggregator();
        }

        partial void SetDefaultValues();
    }
    public partial class MultiplyAggregatorBuilder : ExpressionFramework.Domain.Builders.AggregatorBuilder<MultiplyAggregatorBuilder, ExpressionFramework.Domain.Aggregators.MultiplyAggregator>
    {
        public MultiplyAggregatorBuilder(ExpressionFramework.Domain.Aggregators.MultiplyAggregator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public MultiplyAggregatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Aggregators.MultiplyAggregator BuildTyped()
        {
            return new ExpressionFramework.Domain.Aggregators.MultiplyAggregator();
        }

        partial void SetDefaultValues();
    }
    public partial class PowerAggregatorBuilder : ExpressionFramework.Domain.Builders.AggregatorBuilder<PowerAggregatorBuilder, ExpressionFramework.Domain.Aggregators.PowerAggregator>
    {
        public PowerAggregatorBuilder(ExpressionFramework.Domain.Aggregators.PowerAggregator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public PowerAggregatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Aggregators.PowerAggregator BuildTyped()
        {
            return new ExpressionFramework.Domain.Aggregators.PowerAggregator();
        }

        partial void SetDefaultValues();
    }
    public partial class StringConcatenateAggregatorBuilder : ExpressionFramework.Domain.Builders.AggregatorBuilder<StringConcatenateAggregatorBuilder, ExpressionFramework.Domain.Aggregators.StringConcatenateAggregator>
    {
        public StringConcatenateAggregatorBuilder(ExpressionFramework.Domain.Aggregators.StringConcatenateAggregator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public StringConcatenateAggregatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Aggregators.StringConcatenateAggregator BuildTyped()
        {
            return new ExpressionFramework.Domain.Aggregators.StringConcatenateAggregator();
        }

        partial void SetDefaultValues();
    }
    public partial class SubtractAggregatorBuilder : ExpressionFramework.Domain.Builders.AggregatorBuilder<SubtractAggregatorBuilder, ExpressionFramework.Domain.Aggregators.SubtractAggregator>
    {
        public SubtractAggregatorBuilder(ExpressionFramework.Domain.Aggregators.SubtractAggregator source) : base(source)
        {
            if (source is null) throw new System.ArgumentNullException(nameof(source));
        }

        public SubtractAggregatorBuilder() : base()
        {
            SetDefaultValues();
        }

        public override ExpressionFramework.Domain.Aggregators.SubtractAggregator BuildTyped()
        {
            return new ExpressionFramework.Domain.Aggregators.SubtractAggregator();
        }

        partial void SetDefaultValues();
    }
}
#nullable disable
