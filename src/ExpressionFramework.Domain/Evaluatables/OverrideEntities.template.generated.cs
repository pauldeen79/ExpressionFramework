// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 8.0.8
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#nullable enable
namespace ExpressionFramework.Domain.Evaluatables
{
    public partial record ComposableEvaluatable : ExpressionFramework.Domain.Evaluatable
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression LeftExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Operator Operator
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression RightExpression
        {
            get;
        }

        public System.Nullable<ExpressionFramework.Domain.Domains.Combination> Combination
        {
            get;
        }

        public bool StartGroup
        {
            get;
        }

        public bool EndGroup
        {
            get;
        }

        public ComposableEvaluatable(ExpressionFramework.Domain.Expression leftExpression, ExpressionFramework.Domain.Operator @operator, ExpressionFramework.Domain.Expression rightExpression, System.Nullable<ExpressionFramework.Domain.Domains.Combination> combination, bool startGroup, bool endGroup) : base()
        {
            this.LeftExpression = leftExpression;
            this.Operator = @operator;
            this.RightExpression = rightExpression;
            this.Combination = combination;
            this.StartGroup = startGroup;
            this.EndGroup = endGroup;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.EvaluatableBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Evaluatables.ComposableEvaluatableBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Evaluatables.ComposableEvaluatableBuilder(this);
        }
    }
    public partial record ComposedEvaluatable : ExpressionFramework.Domain.Evaluatable
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Collections.Generic.IReadOnlyCollection<ExpressionFramework.Domain.Evaluatables.ComposableEvaluatable> Conditions
        {
            get;
        }

        public ComposedEvaluatable(System.Collections.Generic.IEnumerable<ExpressionFramework.Domain.Evaluatables.ComposableEvaluatable> conditions) : base()
        {
            this.Conditions = conditions is null ? null! : new CrossCutting.Common.ReadOnlyValueCollection<ExpressionFramework.Domain.Evaluatables.ComposableEvaluatable>(conditions);
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.EvaluatableBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Evaluatables.ComposedEvaluatableBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Evaluatables.ComposedEvaluatableBuilder(this);
        }
    }
    public partial record ConstantEvaluatable : ExpressionFramework.Domain.Evaluatable
    {
        public bool Value
        {
            get;
        }

        public ConstantEvaluatable(bool value) : base()
        {
            this.Value = value;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.EvaluatableBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Evaluatables.ConstantEvaluatableBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Evaluatables.ConstantEvaluatableBuilder(this);
        }
    }
    public partial record DelegateEvaluatable : ExpressionFramework.Domain.Evaluatable
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public System.Func<bool> Value
        {
            get;
        }

        public DelegateEvaluatable(System.Func<bool> value) : base()
        {
            this.Value = value;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.EvaluatableBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Evaluatables.DelegateEvaluatableBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Evaluatables.DelegateEvaluatableBuilder(this);
        }
    }
    public partial record SingleEvaluatable : ExpressionFramework.Domain.Evaluatable
    {
        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression LeftExpression
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Operator Operator
        {
            get;
        }

        [System.ComponentModel.DataAnnotations.RequiredAttribute]
        [CrossCutting.Common.DataAnnotations.ValidateObjectAttribute]
        public ExpressionFramework.Domain.Expression RightExpression
        {
            get;
        }

        public SingleEvaluatable(ExpressionFramework.Domain.Expression leftExpression, ExpressionFramework.Domain.Operator @operator, ExpressionFramework.Domain.Expression rightExpression) : base()
        {
            this.LeftExpression = leftExpression;
            this.Operator = @operator;
            this.RightExpression = rightExpression;
            System.ComponentModel.DataAnnotations.Validator.ValidateObject(this, new System.ComponentModel.DataAnnotations.ValidationContext(this, null, null), true);
        }

        public override ExpressionFramework.Domain.Builders.EvaluatableBuilder ToBuilder()
        {
            return ToTypedBuilder();
        }

        public ExpressionFramework.Domain.Builders.Evaluatables.SingleEvaluatableBuilder ToTypedBuilder()
        {
            return new ExpressionFramework.Domain.Builders.Evaluatables.SingleEvaluatableBuilder(this);
        }
    }
}
#nullable disable
